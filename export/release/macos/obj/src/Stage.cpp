// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_BackgroundDancer
#include <BackgroundDancer.h>
#endif
#ifndef INCLUDED_BackgroundGirls
#include <BackgroundGirls.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayStateChangeables
#include <PlayStateChangeables.h>
#endif
#ifndef INCLUDED_Stage
#include <Stage.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveDirection
#include <flixel/addons/effects/chainable/FlxWaveDirection.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveEffect
#include <flixel/addons/effects/chainable/FlxWaveEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveMode
#include <flixel/addons/effects/chainable/FlxWaveMode.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_IFlxEffect
#include <flixel/addons/effects/chainable/IFlxEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7b29f2b73a08853e_10_new,"Stage","new",0x85b92290,"Stage.new","Stage.hx",10,0xbcde5ee0)
static const int _hx_array_data_1738da9e_2[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,(int)18,
};

void Stage_obj::__construct(::String daStage){
            	HX_GC_STACKFRAME(&_hx_pos_7b29f2b73a08853e_10_new)
HXLINE(  23)		this->slowBacks =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  22)		this->layInFront = ::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< ::Dynamic>::__new(0))->init(1,::Array_obj< ::Dynamic>::__new(0))->init(2,::Array_obj< ::Dynamic>::__new(0));
HXLINE(  21)		this->animatedBacks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  20)		this->swagGroup =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  19)		this->swagBacks =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  17)		this->toAdd = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  16)		this->tweenDuration = ((Float)2);
HXLINE(  15)		this->hideLastBG = false;
HXLINE(  13)		this->halloweenLevel = false;
HXLINE(  12)		this->curStage = HX_("",00,00,00,00);
HXLINE(  27)		this->curStage = daStage;
HXLINE(  28)		this->camZoom = ((Float)1.05);
HXLINE(  29)		this->halloweenLevel = false;
HXLINE(  31)		::String _hx_switch_0 = daStage;
            		if (  (_hx_switch_0==HX_("halloween",8d,bb,38,50)) ){
HXLINE(  35)			this->halloweenLevel = true;
HXLINE(  37)			bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(  37)			::String hallowTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("halloween_bg",77,a6,29,9b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week2",be,95,be,c7));
HXDLIN(  37)			 ::flixel::graphics::frames::FlxAtlasFrames hallowTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(hallowTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("halloween_bg",77,a6,29,9b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week2",be,95,be,c7)));
HXLINE(  39)			 ::flixel::FlxSprite halloweenBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-100,null());
HXLINE(  40)			halloweenBG->set_frames(hallowTex1);
HXLINE(  41)			halloweenBG->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("halloweem bg0",37,fc,3c,6c),null(),null(),null(),null());
HXLINE(  42)			halloweenBG->animation->addByPrefix(HX_("lightning",0a,39,4a,d7),HX_("halloweem bg lightning strike",af,54,50,5b),24,false,null(),null());
HXLINE(  43)			halloweenBG->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  44)			halloweenBG->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  45)			this->swagBacks->set(HX_("halloweenBG",92,b2,88,5c),halloweenBG);
HXLINE(  46)			this->toAdd->push(halloweenBG);
HXLINE(  34)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
HXLINE( 103)			this->camZoom = ((Float)0.90);
HXLINE( 105)			 ::flixel::FlxSprite skyBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,-50,null());
HXDLIN( 105)			 ::flixel::FlxSprite skyBG1 = skyBG->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoSunset",45,de,4f,6e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 106)			skyBG1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 107)			skyBG1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 108)			this->swagBacks->set(HX_("skyBG",e6,94,2a,7e),skyBG1);
HXLINE( 109)			this->toAdd->push(skyBG1);
HXLINE( 111)			 ::flixel::FlxSprite bgLimo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,480,null());
HXLINE( 112)			bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 112)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/bgLimo",b4,c7,45,2c)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7));
HXDLIN( 112)			bgLimo->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/bgLimo",b4,c7,45,2c)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week4",c0,95,be,c7))));
HXLINE( 113)			bgLimo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("background limo pink",65,40,fe,9c),24,null(),null(),null());
HXLINE( 114)			bgLimo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 115)			bgLimo->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 116)			bgLimo->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 117)			this->swagBacks->set(HX_("bgLimo",84,5f,cb,af),bgLimo);
HXLINE( 118)			this->toAdd->push(bgLimo);
HXLINE( 121)			 ::flixel::FlxSprite fastCar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,160,null());
HXLINE( 120)			 ::flixel::FlxSprite fastCar1 = fastCar->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/fastCarLol",c1,b0,ed,94)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 122)			fastCar1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 124)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 126)				 ::flixel::group::FlxTypedGroup grpLimoDancers =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 127)				this->swagGroup->set(HX_("grpLimoDancers",70,18,93,51),grpLimoDancers);
HXLINE( 128)				this->toAdd->push(grpLimoDancers);
HXLINE( 130)				{
HXLINE( 131)					{
HXLINE( 132)						 ::BackgroundDancer dancer =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(130) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 133)						dancer->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 134)						grpLimoDancers->add(dancer).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 131)					{
HXLINE( 132)						 ::BackgroundDancer dancer1 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(500) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 133)						dancer1->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 134)						grpLimoDancers->add(dancer1).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 131)					{
HXLINE( 132)						 ::BackgroundDancer dancer2 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(870) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 133)						dancer2->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 134)						grpLimoDancers->add(dancer2).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 131)					{
HXLINE( 132)						 ::BackgroundDancer dancer3 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1240) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 133)						dancer3->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 134)						grpLimoDancers->add(dancer3).StaticCast<  ::BackgroundDancer >();
            					}
HXLINE( 131)					{
HXLINE( 132)						 ::BackgroundDancer dancer4 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1610) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 133)						dancer4->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 134)						grpLimoDancers->add(dancer4).StaticCast<  ::BackgroundDancer >();
            					}
            				}
HXLINE( 137)				this->swagBacks->set(HX_("fastCar",d8,f2,1f,de),fastCar1);
HXLINE( 138)				this->layInFront->__get(2).StaticCast< ::Array< ::Dynamic> >()->push(fastCar1);
            			}
HXLINE( 141)			 ::flixel::FlxSprite overlayShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-600,null());
HXDLIN( 141)			 ::flixel::FlxSprite overlayShit1 = overlayShit->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoOverlay",01,f0,58,a8)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 142)			overlayShit1->set_alpha(((Float)0.5));
HXLINE( 151)			bool usecahce1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 151)			::String limoTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoDrive",3b,67,64,e6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7));
HXDLIN( 151)			 ::flixel::graphics::frames::FlxAtlasFrames limoTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(limoTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoDrive",3b,67,64,e6)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week4",c0,95,be,c7)));
HXLINE( 153)			 ::flixel::FlxSprite limo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,550,null());
HXLINE( 154)			limo->set_frames(limoTex1);
HXLINE( 155)			limo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("Limo stage",1d,b3,df,4c),24,null(),null(),null());
HXLINE( 156)			limo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 157)			limo->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 158)			this->layInFront->__get(0).StaticCast< ::Array< ::Dynamic> >()->push(limo);
HXLINE( 159)			this->swagBacks->set(HX_("limo",1f,17,b3,47),limo);
HXLINE( 102)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ){
HXLINE( 169)			this->camZoom = ((Float)0.80);
HXLINE( 171)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1000,-500,null());
HXDLIN( 171)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bgWalls",57,9f,1b,51)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 172)			bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 173)			bg1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 174)			bg1->set_active(false);
HXLINE( 175)			bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)0.8))),null());
HXLINE( 176)			bg1->updateHitbox();
HXLINE( 177)			this->swagBacks->set(HX_("bg",c5,55,00,00),bg1);
HXLINE( 178)			this->toAdd->push(bg1);
HXLINE( 180)			 ::flixel::FlxSprite upperBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-240,-90,null());
HXLINE( 181)			bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 181)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 181)			upperBoppers->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 182)			upperBoppers->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Upper Crowd Bob",a4,72,cf,77),24,false,null(),null());
HXLINE( 183)			upperBoppers->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 184)			upperBoppers->scrollFactor->set(((Float)0.33),((Float)0.33));
HXLINE( 185)			upperBoppers->setGraphicSize(::Std_obj::_hx_int((upperBoppers->get_width() * ((Float)0.85))),null());
HXLINE( 186)			upperBoppers->updateHitbox();
HXLINE( 187)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 189)				this->swagBacks->set(HX_("upperBoppers",37,47,71,21),upperBoppers);
HXLINE( 190)				this->toAdd->push(upperBoppers);
HXLINE( 191)				this->animatedBacks->push(upperBoppers);
            			}
HXLINE( 194)			 ::flixel::FlxSprite bgEscalator =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1100,-600,null());
HXDLIN( 194)			 ::flixel::FlxSprite bgEscalator1 = bgEscalator->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bgEscalator",64,1f,c0,d5)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 195)			bgEscalator1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 196)			bgEscalator1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 197)			bgEscalator1->set_active(false);
HXLINE( 198)			bgEscalator1->setGraphicSize(::Std_obj::_hx_int((bgEscalator1->get_width() * ((Float)0.9))),null());
HXLINE( 199)			bgEscalator1->updateHitbox();
HXLINE( 200)			this->swagBacks->set(HX_("bgEscalator",b1,86,fd,8c),bgEscalator1);
HXLINE( 201)			this->toAdd->push(bgEscalator1);
HXLINE( 203)			 ::flixel::FlxSprite tree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,370,-250,null());
HXDLIN( 203)			 ::flixel::FlxSprite tree1 = tree->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/christmasTree",73,57,6d,7b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 204)			tree1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 205)			tree1->scrollFactor->set(((Float)0.40),((Float)0.40));
HXLINE( 206)			this->swagBacks->set(HX_("tree",5e,99,03,4d),tree1);
HXLINE( 207)			this->toAdd->push(tree1);
HXLINE( 209)			 ::flixel::FlxSprite bottomBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,140,null());
HXLINE( 210)			bool usecahce1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 210)			::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 210)			bottomBoppers->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 211)			bottomBoppers->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Bottom Level Boppers",c8,41,25,54),24,false,null(),null());
HXLINE( 212)			bottomBoppers->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 213)			bottomBoppers->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 214)			bottomBoppers->setGraphicSize(::Std_obj::_hx_int(bottomBoppers->get_width()),null());
HXLINE( 215)			bottomBoppers->updateHitbox();
HXLINE( 216)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 218)				this->swagBacks->set(HX_("bottomBoppers",ce,2c,ba,6e),bottomBoppers);
HXLINE( 219)				this->toAdd->push(bottomBoppers);
HXLINE( 220)				this->animatedBacks->push(bottomBoppers);
            			}
HXLINE( 223)			 ::flixel::FlxSprite fgSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,700,null());
HXDLIN( 223)			 ::flixel::FlxSprite fgSnow1 = fgSnow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/fgSnow",91,40,e7,37)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 224)			fgSnow1->set_active(false);
HXLINE( 225)			fgSnow1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 226)			this->swagBacks->set(HX_("fgSnow",64,1c,dd,4d),fgSnow1);
HXLINE( 227)			this->toAdd->push(fgSnow1);
HXLINE( 229)			 ::flixel::FlxSprite santa =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-840,150,null());
HXLINE( 230)			bool usecahce2 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 230)			::String _hx_tmp2 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/santa",00,86,f4,2d)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 230)			santa->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp2,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/santa",00,86,f4,2d)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 231)			santa->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("santa idle in fear",72,07,31,fd),24,false,null(),null());
HXLINE( 232)			santa->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 233)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 235)				this->swagBacks->set(HX_("santa",8d,45,86,77),santa);
HXLINE( 236)				this->toAdd->push(santa);
HXLINE( 237)				this->animatedBacks->push(santa);
            			}
HXLINE( 168)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 242)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-400,-500,null());
HXDLIN( 242)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilBG",86,9d,17,83)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 243)			bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 244)			bg1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 245)			bg1->set_active(false);
HXLINE( 246)			bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)0.8))),null());
HXLINE( 247)			bg1->updateHitbox();
HXLINE( 248)			this->swagBacks->set(HX_("bg",c5,55,00,00),bg1);
HXLINE( 249)			this->toAdd->push(bg1);
HXLINE( 251)			 ::flixel::FlxSprite evilTree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,300,-300,null());
HXDLIN( 251)			 ::flixel::FlxSprite evilTree1 = evilTree->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilTree",7f,5b,65,3a)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 252)			evilTree1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 253)			evilTree1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 254)			this->swagBacks->set(HX_("evilTree",12,12,68,1e),evilTree1);
HXLINE( 255)			this->toAdd->push(evilTree1);
HXLINE( 257)			 ::flixel::FlxSprite evilSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,700,null());
HXDLIN( 257)			 ::flixel::FlxSprite evilSnow1 = evilSnow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilSnow",a4,24,b9,39)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 258)			evilSnow1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 259)			this->swagBacks->set(HX_("evilSnow",37,db,bb,1d),evilSnow1);
HXLINE( 260)			this->toAdd->push(evilSnow1);
HXLINE( 241)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE(  51)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  51)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/sky",3a,d3,d5,cc)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE(  52)			bg1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE(  53)			this->swagBacks->set(HX_("bg",c5,55,00,00),bg1);
HXLINE(  54)			this->toAdd->push(bg1);
HXLINE(  56)			 ::flixel::FlxSprite city =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-10,null(),null());
HXDLIN(  56)			 ::flixel::FlxSprite city1 = city->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/city",32,0d,ae,63)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE(  57)			city1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE(  58)			city1->setGraphicSize(::Std_obj::_hx_int((city1->get_width() * ((Float)0.85))),null());
HXLINE(  59)			city1->updateHitbox();
HXLINE(  60)			this->swagBacks->set(HX_("city",ab,31,c0,41),city1);
HXLINE(  61)			this->toAdd->push(city1);
HXLINE(  63)			 ::flixel::group::FlxTypedGroup phillyCityLights =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  64)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(  66)				this->swagGroup->set(HX_("phillyCityLights",30,e0,12,1f),phillyCityLights);
HXLINE(  67)				this->toAdd->push(phillyCityLights);
            			}
HXLINE(  70)			{
HXLINE(  71)				{
HXLINE(  72)					 ::flixel::FlxSprite light =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN(  72)					 ::flixel::FlxSprite light1 = light->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE(  73)					light1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE(  74)					light1->set_visible(false);
HXLINE(  75)					light1->setGraphicSize(::Std_obj::_hx_int((light1->get_width() * ((Float)0.85))),null());
HXLINE(  76)					light1->updateHitbox();
HXLINE(  77)					light1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  78)					phillyCityLights->add(light1).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(  71)				{
HXLINE(  72)					 ::flixel::FlxSprite light2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN(  72)					 ::flixel::FlxSprite light3 = light2->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE(  73)					light3->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE(  74)					light3->set_visible(false);
HXLINE(  75)					light3->setGraphicSize(::Std_obj::_hx_int((light3->get_width() * ((Float)0.85))),null());
HXLINE(  76)					light3->updateHitbox();
HXLINE(  77)					light3->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  78)					phillyCityLights->add(light3).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(  71)				{
HXLINE(  72)					 ::flixel::FlxSprite light4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN(  72)					 ::flixel::FlxSprite light5 = light4->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE(  73)					light5->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE(  74)					light5->set_visible(false);
HXLINE(  75)					light5->setGraphicSize(::Std_obj::_hx_int((light5->get_width() * ((Float)0.85))),null());
HXLINE(  76)					light5->updateHitbox();
HXLINE(  77)					light5->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  78)					phillyCityLights->add(light5).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(  71)				{
HXLINE(  72)					 ::flixel::FlxSprite light6 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN(  72)					 ::flixel::FlxSprite light7 = light6->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 3)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE(  73)					light7->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE(  74)					light7->set_visible(false);
HXLINE(  75)					light7->setGraphicSize(::Std_obj::_hx_int((light7->get_width() * ((Float)0.85))),null());
HXLINE(  76)					light7->updateHitbox();
HXLINE(  77)					light7->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  78)					phillyCityLights->add(light7).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(  71)				{
HXLINE(  72)					 ::flixel::FlxSprite light8 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN(  72)					 ::flixel::FlxSprite light9 = light8->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE(  73)					light9->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE(  74)					light9->set_visible(false);
HXLINE(  75)					light9->setGraphicSize(::Std_obj::_hx_int((light9->get_width() * ((Float)0.85))),null());
HXLINE(  76)					light9->updateHitbox();
HXLINE(  77)					light9->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  78)					phillyCityLights->add(light9).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
HXLINE(  81)			 ::flixel::FlxSprite streetBehind =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,50,null());
HXDLIN(  81)			 ::flixel::FlxSprite streetBehind1 = streetBehind->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/behindTrain",07,a4,6d,d4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE(  82)			this->swagBacks->set(HX_("streetBehind",1d,21,e4,00),streetBehind1);
HXLINE(  83)			this->toAdd->push(streetBehind1);
HXLINE(  85)			 ::flixel::FlxSprite phillyTrain =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,2000,360,null());
HXDLIN(  85)			 ::flixel::FlxSprite phillyTrain1 = phillyTrain->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/train",61,ce,51,a4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE(  86)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(  88)				this->swagBacks->set(HX_("phillyTrain",80,9b,65,bb),phillyTrain1);
HXLINE(  89)				this->toAdd->push(phillyTrain1);
            			}
HXLINE(  92)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(  92)			::PlayState_obj::trainSound = _hx_tmp->loadEmbedded(::Paths_obj::sound(HX_("train_passes",56,da,5a,7f),HX_("week3",bf,95,be,c7)),null(),null(),null());
HXLINE(  93)			::flixel::FlxG_obj::sound->list->add(::PlayState_obj::trainSound).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(  97)			 ::flixel::FlxSprite street =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,streetBehind1->y,null());
HXDLIN(  97)			 ::flixel::FlxSprite street1 = street->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/street",4a,23,ee,ee)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE(  98)			this->swagBacks->set(HX_("street",03,18,2d,11),street1);
HXLINE(  99)			this->toAdd->push(street1);
HXLINE(  49)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ){
HXLINE( 266)			 ::flixel::FlxSprite bgSky =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 266)			 ::flixel::FlxSprite bgSky1 = bgSky->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebSky",52,34,cf,a4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 267)			bgSky1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 268)			this->swagBacks->set(HX_("bgSky",1c,2c,99,b1),bgSky1);
HXLINE( 269)			this->toAdd->push(bgSky1);
HXLINE( 271)			int repositionShit = -200;
HXLINE( 273)			 ::flixel::FlxSprite bgSchool =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,0,null());
HXDLIN( 273)			 ::flixel::FlxSprite bgSchool1 = bgSchool->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebSchool",a3,21,c0,f5)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 274)			bgSchool1->scrollFactor->set(((Float)0.6),((Float)0.90));
HXLINE( 275)			this->swagBacks->set(HX_("bgSchool",19,a4,cf,15),bgSchool1);
HXLINE( 276)			this->toAdd->push(bgSchool1);
HXLINE( 278)			 ::flixel::FlxSprite bgStreet =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,null(),null());
HXDLIN( 278)			 ::flixel::FlxSprite bgStreet1 = bgStreet->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebStreet",32,81,24,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 279)			bgStreet1->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 280)			this->swagBacks->set(HX_("bgStreet",a8,03,34,e6),bgStreet1);
HXLINE( 281)			this->toAdd->push(bgStreet1);
HXLINE( 283)			 ::flixel::FlxSprite fgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit + 170),130,null());
HXDLIN( 283)			 ::flixel::FlxSprite fgTrees1 = fgTrees->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTreesBack",4d,ac,bd,40)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 284)			fgTrees1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 285)			this->swagBacks->set(HX_("fgTrees",54,84,9f,69),fgTrees1);
HXLINE( 286)			this->toAdd->push(fgTrees1);
HXLINE( 288)			 ::flixel::FlxSprite bgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit - 380),-800,null());
HXLINE( 289)			bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 289)			::String treetex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTrees",06,ab,3a,76)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 289)			 ::flixel::graphics::frames::FlxAtlasFrames treetex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(treetex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTrees",06,ab,3a,76)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7)));
HXLINE( 290)			bgTrees->set_frames(treetex1);
HXLINE( 291)			bgTrees->animation->add(HX_("treeLoop",e2,72,7f,2b),::Array_obj< int >::fromData( _hx_array_data_1738da9e_2,19),12,null(),null(),null());
HXLINE( 292)			bgTrees->animation->play(HX_("treeLoop",e2,72,7f,2b),null(),null(),null());
HXLINE( 293)			bgTrees->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 294)			this->swagBacks->set(HX_("bgTrees",50,a9,49,c3),bgTrees);
HXLINE( 295)			this->toAdd->push(bgTrees);
HXLINE( 297)			 ::flixel::FlxSprite treeLeaves =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,-40,null());
HXLINE( 298)			bool usecahce1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 298)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/petals",8d,ca,2b,c2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 298)			treeLeaves->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/petals",8d,ca,2b,c2)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7))));
HXLINE( 299)			treeLeaves->animation->addByPrefix(HX_("leaves",9c,23,7b,96),HX_("PETALS ALL",0a,57,91,88),24,true,null(),null());
HXLINE( 300)			treeLeaves->animation->play(HX_("leaves",9c,23,7b,96),null(),null(),null());
HXLINE( 301)			treeLeaves->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 302)			this->swagBacks->set(HX_("treeLeaves",9a,8b,2d,d5),treeLeaves);
HXLINE( 303)			this->toAdd->push(treeLeaves);
HXLINE( 305)			int widShit = ::Std_obj::_hx_int((bgSky1->get_width() * ( (Float)(6) )));
HXLINE( 307)			bgSky1->setGraphicSize(widShit,null());
HXLINE( 308)			bgSchool1->setGraphicSize(widShit,null());
HXLINE( 309)			bgStreet1->setGraphicSize(widShit,null());
HXLINE( 310)			bgTrees->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)1.4))),null());
HXLINE( 311)			fgTrees1->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)0.8))),null());
HXLINE( 312)			treeLeaves->setGraphicSize(widShit,null());
HXLINE( 314)			fgTrees1->updateHitbox();
HXLINE( 315)			bgSky1->updateHitbox();
HXLINE( 316)			bgSchool1->updateHitbox();
HXLINE( 317)			bgStreet1->updateHitbox();
HXLINE( 318)			bgTrees->updateHitbox();
HXLINE( 319)			treeLeaves->updateHitbox();
HXLINE( 321)			 ::BackgroundGirls bgGirls =  ::BackgroundGirls_obj::__alloc( HX_CTX ,( (Float)(-100) ),( (Float)(190) ));
HXLINE( 322)			bgGirls->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 324)			if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("roses",04,6c,64,ed))) {
HXLINE( 326)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 328)					bgGirls->getScared();
            				}
            			}
HXLINE( 332)			Float _hx_tmp1 = bgGirls->get_width();
HXDLIN( 332)			bgGirls->setGraphicSize(::Std_obj::_hx_int((_hx_tmp1 * ::PlayState_obj::daPixelZoom)),null());
HXLINE( 333)			bgGirls->updateHitbox();
HXLINE( 334)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 336)				this->swagBacks->set(HX_("bgGirls",92,16,2b,41),bgGirls);
HXLINE( 337)				this->toAdd->push(bgGirls);
            			}
HXLINE( 263)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 342)			if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 344)				 ::flixel::addons::effects::chainable::FlxWaveEffect waveEffectBG =  ::flixel::addons::effects::chainable::FlxWaveEffect_obj::__alloc( HX_CTX ,::flixel::addons::effects::chainable::FlxWaveMode_obj::ALL_dyn(),2,-1,3,2,null(),null());
HXLINE( 345)				 ::flixel::addons::effects::chainable::FlxWaveEffect waveEffectFG =  ::flixel::addons::effects::chainable::FlxWaveEffect_obj::__alloc( HX_CTX ,::flixel::addons::effects::chainable::FlxWaveMode_obj::ALL_dyn(),2,-1,5,2,null(),null());
            			}
HXLINE( 348)			int posX = 400;
HXLINE( 349)			int posY = 200;
HXLINE( 351)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,posX,posY,null());
HXLINE( 352)			bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN( 352)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/animatedEvilSchool",8f,dd,53,cd)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 352)			bg->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/animatedEvilSchool",8f,dd,53,cd)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7))));
HXLINE( 353)			bg->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("background 2",80,07,9d,17),24,null(),null(),null());
HXLINE( 354)			bg->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 355)			bg->scrollFactor->set(((Float)0.8),((Float)0.9));
HXLINE( 356)			bg->scale->set(6,6);
HXLINE( 357)			this->swagBacks->set(HX_("bg",c5,55,00,00),bg);
HXLINE( 358)			this->toAdd->push(bg);
HXLINE( 341)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE( 400)			this->camZoom = ((Float)0.9);
HXLINE( 401)			this->curStage = HX_("stage",be,6a,0b,84);
HXLINE( 402)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-200,null());
HXDLIN( 402)			::String library = null();
HXDLIN( 402)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 403)			bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 404)			bg1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 405)			bg1->set_active(false);
HXLINE( 406)			this->swagBacks->set(HX_("bg",c5,55,00,00),bg1);
HXLINE( 407)			this->toAdd->push(bg1);
HXLINE( 409)			 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 409)			::String library1 = null();
HXDLIN( 409)			 ::flixel::FlxSprite stageFront1 = stageFront->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagefront",2b,fd,b0,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 410)			stageFront1->setGraphicSize(::Std_obj::_hx_int((stageFront1->get_width() * ((Float)1.1))),null());
HXLINE( 411)			stageFront1->updateHitbox();
HXLINE( 412)			stageFront1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 413)			stageFront1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 414)			stageFront1->set_active(false);
HXLINE( 415)			this->swagBacks->set(HX_("stageFront",0b,6d,de,59),stageFront1);
HXLINE( 416)			this->toAdd->push(stageFront1);
HXLINE( 418)			 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 418)			::String library2 = null();
HXDLIN( 418)			 ::flixel::FlxSprite stageCurtains1 = stageCurtains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagecurtains",df,ec,1a,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE( 419)			stageCurtains1->setGraphicSize(::Std_obj::_hx_int((stageCurtains1->get_width() * ((Float)0.9))),null());
HXLINE( 420)			stageCurtains1->updateHitbox();
HXLINE( 421)			stageCurtains1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 422)			stageCurtains1->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 423)			stageCurtains1->set_active(false);
HXLINE( 425)			this->swagBacks->set(HX_("stageCurtains",ff,a8,cc,24),stageCurtains1);
HXLINE( 426)			this->toAdd->push(stageCurtains1);
            		}
            		_hx_goto_0:;
            	}

Dynamic Stage_obj::__CreateEmpty() { return new Stage_obj; }

void *Stage_obj::_hx_vtable = 0;

Dynamic Stage_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Stage_obj > _hx_result = new Stage_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Stage_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b7d43fa;
}


::hx::ObjectPtr< Stage_obj > Stage_obj::__new(::String daStage) {
	::hx::ObjectPtr< Stage_obj > __this = new Stage_obj();
	__this->__construct(daStage);
	return __this;
}

::hx::ObjectPtr< Stage_obj > Stage_obj::__alloc(::hx::Ctx *_hx_ctx,::String daStage) {
	Stage_obj *__this = (Stage_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Stage_obj), true, "Stage"));
	*(void **)__this = Stage_obj::_hx_vtable;
	__this->__construct(daStage);
	return __this;
}

Stage_obj::Stage_obj()
{
}

void Stage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stage);
	HX_MARK_MEMBER_NAME(curStage,"curStage");
	HX_MARK_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_MARK_MEMBER_NAME(camZoom,"camZoom");
	HX_MARK_MEMBER_NAME(hideLastBG,"hideLastBG");
	HX_MARK_MEMBER_NAME(tweenDuration,"tweenDuration");
	HX_MARK_MEMBER_NAME(toAdd,"toAdd");
	HX_MARK_MEMBER_NAME(swagBacks,"swagBacks");
	HX_MARK_MEMBER_NAME(swagGroup,"swagGroup");
	HX_MARK_MEMBER_NAME(animatedBacks,"animatedBacks");
	HX_MARK_MEMBER_NAME(layInFront,"layInFront");
	HX_MARK_MEMBER_NAME(slowBacks,"slowBacks");
	HX_MARK_END_CLASS();
}

void Stage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curStage,"curStage");
	HX_VISIT_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_VISIT_MEMBER_NAME(camZoom,"camZoom");
	HX_VISIT_MEMBER_NAME(hideLastBG,"hideLastBG");
	HX_VISIT_MEMBER_NAME(tweenDuration,"tweenDuration");
	HX_VISIT_MEMBER_NAME(toAdd,"toAdd");
	HX_VISIT_MEMBER_NAME(swagBacks,"swagBacks");
	HX_VISIT_MEMBER_NAME(swagGroup,"swagGroup");
	HX_VISIT_MEMBER_NAME(animatedBacks,"animatedBacks");
	HX_VISIT_MEMBER_NAME(layInFront,"layInFront");
	HX_VISIT_MEMBER_NAME(slowBacks,"slowBacks");
}

::hx::Val Stage_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"toAdd") ) { return ::hx::Val( toAdd ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camZoom") ) { return ::hx::Val( camZoom ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { return ::hx::Val( curStage ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"swagBacks") ) { return ::hx::Val( swagBacks ); }
		if (HX_FIELD_EQ(inName,"swagGroup") ) { return ::hx::Val( swagGroup ); }
		if (HX_FIELD_EQ(inName,"slowBacks") ) { return ::hx::Val( slowBacks ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hideLastBG") ) { return ::hx::Val( hideLastBG ); }
		if (HX_FIELD_EQ(inName,"layInFront") ) { return ::hx::Val( layInFront ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"tweenDuration") ) { return ::hx::Val( tweenDuration ); }
		if (HX_FIELD_EQ(inName,"animatedBacks") ) { return ::hx::Val( animatedBacks ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { return ::hx::Val( halloweenLevel ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Stage_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"toAdd") ) { toAdd=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camZoom") ) { camZoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"swagBacks") ) { swagBacks=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"swagGroup") ) { swagGroup=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"slowBacks") ) { slowBacks=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hideLastBG") ) { hideLastBG=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layInFront") ) { layInFront=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"tweenDuration") ) { tweenDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animatedBacks") ) { animatedBacks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { halloweenLevel=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Stage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curStage",1e,65,b9,cb));
	outFields->push(HX_("halloweenLevel",b7,ca,23,07));
	outFields->push(HX_("camZoom",c2,f6,e9,db));
	outFields->push(HX_("hideLastBG",fd,ab,4a,ec));
	outFields->push(HX_("tweenDuration",df,58,51,72));
	outFields->push(HX_("toAdd",66,a3,0b,14));
	outFields->push(HX_("swagBacks",82,d9,24,8a));
	outFields->push(HX_("swagGroup",55,84,6b,76));
	outFields->push(HX_("animatedBacks",c9,96,f7,e5));
	outFields->push(HX_("layInFront",80,62,57,86));
	outFields->push(HX_("slowBacks",ab,36,dc,c0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Stage_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Stage_obj,curStage),HX_("curStage",1e,65,b9,cb)},
	{::hx::fsBool,(int)offsetof(Stage_obj,halloweenLevel),HX_("halloweenLevel",b7,ca,23,07)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,camZoom),HX_("camZoom",c2,f6,e9,db)},
	{::hx::fsBool,(int)offsetof(Stage_obj,hideLastBG),HX_("hideLastBG",fd,ab,4a,ec)},
	{::hx::fsFloat,(int)offsetof(Stage_obj,tweenDuration),HX_("tweenDuration",df,58,51,72)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(Stage_obj,toAdd),HX_("toAdd",66,a3,0b,14)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Stage_obj,swagBacks),HX_("swagBacks",82,d9,24,8a)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Stage_obj,swagGroup),HX_("swagGroup",55,84,6b,76)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,animatedBacks),HX_("animatedBacks",c9,96,f7,e5)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Stage_obj,layInFront),HX_("layInFront",80,62,57,86)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Stage_obj,slowBacks),HX_("slowBacks",ab,36,dc,c0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Stage_obj_sStaticStorageInfo = 0;
#endif

static ::String Stage_obj_sMemberFields[] = {
	HX_("curStage",1e,65,b9,cb),
	HX_("halloweenLevel",b7,ca,23,07),
	HX_("camZoom",c2,f6,e9,db),
	HX_("hideLastBG",fd,ab,4a,ec),
	HX_("tweenDuration",df,58,51,72),
	HX_("toAdd",66,a3,0b,14),
	HX_("swagBacks",82,d9,24,8a),
	HX_("swagGroup",55,84,6b,76),
	HX_("animatedBacks",c9,96,f7,e5),
	HX_("layInFront",80,62,57,86),
	HX_("slowBacks",ab,36,dc,c0),
	::String(null()) };

::hx::Class Stage_obj::__mClass;

void Stage_obj::__register()
{
	Stage_obj _hx_dummy;
	Stage_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Stage",9e,da,38,17);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Stage_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Stage_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stage_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

