// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Event
#include <Event.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif
#ifndef INCLUDED_smTools_SMMeasure
#include <smTools/SMMeasure.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_624174a6cc61787a_8_new,"smTools.SMFile","new",0x7287a455,"smTools.SMFile.new","smTools/SMFile.hx",8,0x8084749a)
HX_LOCAL_STACK_FRAME(_hx_pos_624174a6cc61787a_93_convertToFNF,"smTools.SMFile","convertToFNF",0xde54e1db,"smTools.SMFile.convertToFNF","smTools/SMFile.hx",93,0x8084749a)
HX_LOCAL_STACK_FRAME(_hx_pos_624174a6cc61787a_12_loadFile,"smTools.SMFile","loadFile",0xabda53ad,"smTools.SMFile.loadFile","smTools/SMFile.hx",12,0x8084749a)
namespace smTools{

void SMFile_obj::__construct(::Array< ::String > data){
            	HX_GC_STACKFRAME(&_hx_pos_624174a6cc61787a_8_new)
HXLINE(  21)		this->_readTime = ((Float)0);
HXLINE(  19)		this->isValid = true;
HXLINE(  17)		this->isDouble = false;
HXLINE(  28)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  30)			this->_fileData = data;
HXLINE(  33)			::String headerData = HX_("",00,00,00,00);
HXLINE(  34)			int inc = 0;
HXLINE(  35)			while((data->__get((inc + 1)).indexOf(HX_("//",20,29,00,00),null()) == -1)){
HXLINE(  37)				headerData = (headerData + data->__get(inc));
HXLINE(  38)				inc = (inc + 1);
            			}
HXLINE(  42)			this->header =  ::smTools::SMHeader_obj::__alloc( HX_CTX ,headerData.split(HX_(";",3b,00,00,00)));
HXLINE(  44)			if ((this->header->MUSIC.indexOf(HX_("ogg",4f,94,54,00),null()) == -1)) {
HXLINE(  46)				::lime::app::Application_obj::current->_hx___window->alert(HX_("The music MUST be an OGG File.",9e,e7,5c,bd),((HX_("SM File loading (",c6,bf,47,b9) + this->header->TITLE) + HX_(")",29,00,00,00)));
HXLINE(  47)				this->isValid = false;
HXLINE(  48)				return;
            			}
HXLINE(  52)			inc = (inc + 3);
HXLINE(  53)			bool _hx_tmp;
HXDLIN(  53)			if ((data->__get(inc).indexOf(HX_("dance-double:",af,01,2f,6b),null()) == -1)) {
HXLINE(  53)				_hx_tmp = (data->__get(inc).indexOf(HX_("dance-single",a2,df,b6,4f),null()) == -1);
            			}
            			else {
HXLINE(  53)				_hx_tmp = false;
            			}
HXDLIN(  53)			if (_hx_tmp) {
HXLINE(  55)				::lime::app::Application_obj::current->_hx___window->alert(HX_("The file you are loading is neither a Dance Double chart or a Dance Single chart",87,8b,c7,c1),((HX_("SM File loading (",c6,bf,47,b9) + this->header->TITLE) + HX_(")",29,00,00,00)));
HXLINE(  56)				this->isValid = false;
HXLINE(  57)				return;
            			}
HXLINE(  59)			if ((data->__get(inc).indexOf(HX_("dance-double:",af,01,2f,6b),null()) != -1)) {
HXLINE(  60)				this->isDouble = true;
            			}
HXLINE(  61)			if (this->isDouble) {
HXLINE(  62)				::haxe::Log_obj::trace(HX_("this is dance double",92,8c,5e,ab),::hx::SourceInfo(HX_("source/smTools/SMFile.hx",26,53,6b,c3),62,HX_("smTools.SMFile",e3,d5,c7,d6),HX_("new",60,d0,53,00)));
            			}
HXLINE(  64)			inc = (inc + 5);
HXLINE(  66)			this->measures = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  68)			::String measure = HX_("",00,00,00,00);
HXLINE(  70)			::haxe::Log_obj::trace(data->__get((inc - 1)),::hx::SourceInfo(HX_("source/smTools/SMFile.hx",26,53,6b,c3),70,HX_("smTools.SMFile",e3,d5,c7,d6),HX_("new",60,d0,53,00)));
HXLINE(  72)			{
HXLINE(  72)				int _g = inc;
HXDLIN(  72)				int _g1 = data->length;
HXDLIN(  72)				while((_g < _g1)){
HXLINE(  72)					_g = (_g + 1);
HXDLIN(  72)					int ii = (_g - 1);
HXLINE(  74)					::String i = data->__get(ii);
HXLINE(  75)					bool _hx_tmp;
HXDLIN(  75)					if ((i.indexOf(HX_(",",2c,00,00,00),null()) == -1)) {
HXLINE(  75)						_hx_tmp = (i.indexOf(HX_(";",3b,00,00,00),null()) != -1);
            					}
            					else {
HXLINE(  75)						_hx_tmp = true;
            					}
HXDLIN(  75)					if (_hx_tmp) {
HXLINE(  77)						::Array< ::Dynamic> _hx_tmp = this->measures;
HXDLIN(  77)						_hx_tmp->push( ::smTools::SMMeasure_obj::__alloc( HX_CTX ,measure.split(HX_("\n",0a,00,00,00))));
HXLINE(  79)						measure = HX_("",00,00,00,00);
HXLINE(  80)						continue;
            					}
HXLINE(  82)					measure = (measure + (i + HX_("\n",0a,00,00,00)));
            				}
            			}
HXLINE(  84)			::haxe::Log_obj::trace((this->measures->length + HX_(" Measures",95,d3,b0,47)),::hx::SourceInfo(HX_("source/smTools/SMFile.hx",26,53,6b,c3),84,HX_("smTools.SMFile",e3,d5,c7,d6),HX_("new",60,d0,53,00)));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(  88)				{
HXLINE(  88)					 ::lime::ui::Window _hx_tmp = ::lime::app::Application_obj::current->_hx___window;
HXDLIN(  88)					_hx_tmp->alert((HX_("Failure to load file.\n",63,01,ed,f5) + ::Std_obj::string(e)),HX_("SM File loading",3e,98,42,f1));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}

Dynamic SMFile_obj::__CreateEmpty() { return new SMFile_obj; }

void *SMFile_obj::_hx_vtable = 0;

Dynamic SMFile_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SMFile_obj > _hx_result = new SMFile_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SMFile_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x08d5c773;
}

::String SMFile_obj::convertToFNF(::String saveTo){
            	HX_STACKFRAME(&_hx_pos_624174a6cc61787a_93_convertToFNF)
HXLINE(  96)		::Array< ::Dynamic> heldNotes;
HXLINE(  99)		if (this->isDouble) {
HXLINE( 100)			heldNotes = ::Array_obj< ::Dynamic>::__new(8)->init(0,::cpp::VirtualArray_obj::__new(0))->init(1,::cpp::VirtualArray_obj::__new(0))->init(2,::cpp::VirtualArray_obj::__new(0))->init(3,::cpp::VirtualArray_obj::__new(0))->init(4,::cpp::VirtualArray_obj::__new(0))->init(5,::cpp::VirtualArray_obj::__new(0))->init(6,::cpp::VirtualArray_obj::__new(0))->init(7,::cpp::VirtualArray_obj::__new(0));
            		}
            		else {
HXLINE( 102)			heldNotes = ::Array_obj< ::Dynamic>::__new(4)->init(0,::cpp::VirtualArray_obj::__new(0))->init(1,::cpp::VirtualArray_obj::__new(0))->init(2,::cpp::VirtualArray_obj::__new(0))->init(3,::cpp::VirtualArray_obj::__new(0));
            		}
HXLINE( 107)		int measureIndex = 0;
HXLINE( 108)		Float currentBeat = ( (Float)(0) );
HXLINE( 109)		::String output = HX_("",00,00,00,00);
HXLINE( 114)		::String song = this->header->TITLE;
HXLINE( 113)		 ::Dynamic song1 =  ::Dynamic(::hx::Anon_obj::Create(12)
            			->setFixed(0,HX_("speed",87,97,69,81),((Float)1.0))
            			->setFixed(1,HX_("stage",be,6a,0b,84),HX_("stage",be,6a,0b,84))
            			->setFixed(2,HX_("player1",b0,09,15,8a),HX_("bf",c4,55,00,00))
            			->setFixed(3,HX_("player2",b1,09,15,8a),HX_("gf",1f,5a,00,00))
            			->setFixed(4,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(5,HX_("noteStyle",df,ef,aa,c1),HX_("normal",27,72,69,30))
            			->setFixed(6,HX_("validScore",b6,dc,18,c7),false)
            			->setFixed(7,HX_("gfVersion",b9,c6,7d,f3),HX_("gf",1f,5a,00,00))
            			->setFixed(8,HX_("bpm",df,be,4a,00),this->header->getBPM(( (Float)(0) ),null()))
            			->setFixed(9,HX_("needsVoices",be,05,e9,0d),true)
            			->setFixed(10,HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(11,HX_("song",d5,23,58,4c),song));
HXLINE( 130)		if (!(this->isValid)) {
HXLINE( 132)			 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("song",d5,23,58,4c),song1));
HXLINE( 136)			 ::Dynamic replacer = null();
HXDLIN( 136)			::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,HX_(" ",20,00,00,00));
HXLINE( 137)			::sys::io::File_obj::saveContent(saveTo,data);
HXLINE( 138)			return data;
            		}
HXLINE( 143)		::haxe::Log_obj::trace(HX_("Converting measures",a6,74,71,97),::hx::SourceInfo(HX_("source/smTools/SMFile.hx",26,53,6b,c3),143,HX_("smTools.SMFile",e3,d5,c7,d6),HX_("convertToFNF",70,5c,d6,46)));
HXLINE( 145)		{
HXLINE( 145)			int _g = 0;
HXDLIN( 145)			::Array< ::Dynamic> _g1 = this->measures;
HXDLIN( 145)			while((_g < _g1->length)){
HXLINE( 145)				 ::smTools::SMMeasure measure = _g1->__get(_g).StaticCast<  ::smTools::SMMeasure >();
HXDLIN( 145)				_g = (_g + 1);
HXLINE( 149)				Float lengthInRows = (( (Float)(192) ) / ( (Float)((measure->_measure->length - 1)) ));
HXLINE( 151)				int rowIndex = 0;
HXLINE( 155)				 ::Dynamic section =  ::Dynamic(::hx::Anon_obj::Create(9)
            					->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),16)
            					->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            					->setFixed(2,HX_("typeOfSection",74,f3,25,fb),0)
            					->setFixed(3,HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0))
            					->setFixed(4,HX_("bpm",df,be,4a,00),this->header->getBPM(( (Float)(0) ),null()))
            					->setFixed(5,HX_("startTime",8f,45,f0,05),((Float)0.0))
            					->setFixed(6,HX_("changeBPM",4f,4f,f8,1d),false)
            					->setFixed(7,HX_("endTime",88,85,21,2f),((Float)0.0))
            					->setFixed(8,HX_("mustHitSection",3b,5f,87,62),false));
HXLINE( 169)				if (!(this->isDouble)) {
HXLINE( 170)					section->__SetField(HX_("mustHitSection",3b,5f,87,62),true,::hx::paccDynamic);
            				}
HXLINE( 173)				{
HXLINE( 173)					int _g2 = 0;
HXDLIN( 173)					int _g3 = (measure->_measure->length - 1);
HXDLIN( 173)					while((_g2 < _g3)){
HXLINE( 173)						_g2 = (_g2 + 1);
HXDLIN( 173)						int i = (_g2 - 1);
HXLINE( 175)						Float noteRow = ((measureIndex * 192) + (lengthInRows * ( (Float)(rowIndex) )));
HXLINE( 177)						::Array< ::String > notes = ::Array_obj< ::String >::__new(0);
HXLINE( 179)						{
HXLINE( 179)							int _g = 0;
HXDLIN( 179)							::Array< ::String > _g1 = measure->_measure->__get(i).split(HX_("",00,00,00,00));
HXDLIN( 179)							while((_g < _g1->length)){
HXLINE( 179)								::String note = _g1->__get(_g);
HXDLIN( 179)								_g = (_g + 1);
HXLINE( 182)								notes->push(note);
            							}
            						}
HXLINE( 185)						currentBeat = (noteRow / ( (Float)(48) ));
HXLINE( 187)						 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtBeat(currentBeat);
HXLINE( 189)						Float timeInSec = (seg->startTime + ((currentBeat - seg->startBeat) / (seg->bpm / ( (Float)(60) ))));
HXLINE( 191)						Float rowTime = (timeInSec * ( (Float)(1000) ));
HXLINE( 195)						int index = 0;
HXLINE( 197)						{
HXLINE( 197)							int _g3 = 0;
HXDLIN( 197)							while((_g3 < notes->length)){
HXLINE( 197)								::String i = notes->__get(_g3);
HXDLIN( 197)								_g3 = (_g3 + 1);
HXLINE( 200)								if ((i == HX_("M",4d,00,00,00))) {
HXLINE( 202)									index = (index + 1);
HXLINE( 203)									continue;
            								}
HXLINE( 207)								int lane = index;
HXLINE( 208)								 ::Dynamic numba = ::Std_obj::parseInt(i);
HXLINE( 212)								 ::Dynamic _hx_switch_0 = numba;
            								if (  (_hx_switch_0==1) ){
HXLINE( 215)									( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::Array_obj< Float >::__new(3)->init(0,rowTime)->init(1,lane)->init(2,0));
HXDLIN( 215)									goto _hx_goto_7;
            								}
            								if (  (_hx_switch_0==2) ){
HXLINE( 217)									heldNotes[lane] = ::cpp::VirtualArray_obj::__new(3)->init(0,rowTime)->init(1,lane)->init(2,0);
HXDLIN( 217)									goto _hx_goto_7;
            								}
            								if (  (_hx_switch_0==3) ){
HXLINE( 219)									::cpp::VirtualArray data = ::cpp::VirtualArray( heldNotes->__get(lane));
HXLINE( 220)									Float timeDiff = (rowTime - ( (Float)(data->__get(0)) ));
HXLINE( 221)									( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::Array_obj< Float >::__new(3)->init(0,data->__get(0))->init(1,lane)->init(2,timeDiff));
HXLINE( 222)									heldNotes[index] = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 218)									goto _hx_goto_7;
            								}
            								if (  (_hx_switch_0==4) ){
HXLINE( 224)									heldNotes[lane] = ::cpp::VirtualArray_obj::__new(3)->init(0,rowTime)->init(1,lane)->init(2,0);
HXDLIN( 224)									goto _hx_goto_7;
            								}
            								_hx_goto_7:;
HXLINE( 226)								index = (index + 1);
            							}
            						}
HXLINE( 230)						rowIndex = (rowIndex + 1);
            					}
            				}
HXLINE( 235)				( (::Array< ::Dynamic>)(song1->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->push(section);
HXLINE( 239)				measureIndex = (measureIndex + 1);
            			}
            		}
HXLINE( 242)		{
HXLINE( 242)			int _g2 = 0;
HXDLIN( 242)			int _g3 = ( (::Array< ::Dynamic>)(song1->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN( 242)			while((_g2 < _g3)){
HXLINE( 242)				_g2 = (_g2 + 1);
HXDLIN( 242)				int i = (_g2 - 1);
HXLINE( 244)				 ::Dynamic section =  ::Dynamic(song1->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i);
HXLINE( 246)				int currentBeat = (4 * i);
HXLINE( 248)				 ::TimingStruct currentSeg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(currentBeat) ));
HXLINE( 250)				Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE( 252)				section->__SetField(HX_("startTime",8f,45,f0,05),((currentSeg->startTime + start) * ( (Float)(1000) )),::hx::paccDynamic);
HXLINE( 254)				if ((i != 0)) {
HXLINE( 255)					 ::Dynamic(song1->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((i - 1))->__SetField(HX_("endTime",88,85,21,2f),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXLINE( 256)				section->__SetField(HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY,::hx::paccDynamic);
            			}
            		}
HXLINE( 262)		if ((this->header->changeEvents->length != 0)) {
HXLINE( 264)			song1->__SetField(HX_("eventObjects",da,5f,a4,12),this->header->changeEvents,::hx::paccDynamic);
            		}
HXLINE( 269)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),song1));
HXLINE( 273)		 ::Dynamic replacer = null();
HXDLIN( 273)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,HX_(" ",20,00,00,00));
HXLINE( 274)		::sys::io::File_obj::saveContent(saveTo,data);
HXLINE( 275)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SMFile_obj,convertToFNF,return )

 ::smTools::SMFile SMFile_obj::loadFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_624174a6cc61787a_12_loadFile)
HXDLIN(  12)		return  ::smTools::SMFile_obj::__alloc( HX_CTX ,::sys::io::File_obj::getContent(path).split(HX_("\n",0a,00,00,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SMFile_obj,loadFile,return )


::hx::ObjectPtr< SMFile_obj > SMFile_obj::__new(::Array< ::String > data) {
	::hx::ObjectPtr< SMFile_obj > __this = new SMFile_obj();
	__this->__construct(data);
	return __this;
}

::hx::ObjectPtr< SMFile_obj > SMFile_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::String > data) {
	SMFile_obj *__this = (SMFile_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SMFile_obj), true, "smTools.SMFile"));
	*(void **)__this = SMFile_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

SMFile_obj::SMFile_obj()
{
}

void SMFile_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SMFile);
	HX_MARK_MEMBER_NAME(_fileData,"_fileData");
	HX_MARK_MEMBER_NAME(isDouble,"isDouble");
	HX_MARK_MEMBER_NAME(isValid,"isValid");
	HX_MARK_MEMBER_NAME(_readTime,"_readTime");
	HX_MARK_MEMBER_NAME(header,"header");
	HX_MARK_MEMBER_NAME(measures,"measures");
	HX_MARK_END_CLASS();
}

void SMFile_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_fileData,"_fileData");
	HX_VISIT_MEMBER_NAME(isDouble,"isDouble");
	HX_VISIT_MEMBER_NAME(isValid,"isValid");
	HX_VISIT_MEMBER_NAME(_readTime,"_readTime");
	HX_VISIT_MEMBER_NAME(header,"header");
	HX_VISIT_MEMBER_NAME(measures,"measures");
}

::hx::Val SMFile_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"header") ) { return ::hx::Val( header ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isValid") ) { return ::hx::Val( isValid ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isDouble") ) { return ::hx::Val( isDouble ); }
		if (HX_FIELD_EQ(inName,"measures") ) { return ::hx::Val( measures ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_fileData") ) { return ::hx::Val( _fileData ); }
		if (HX_FIELD_EQ(inName,"_readTime") ) { return ::hx::Val( _readTime ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"convertToFNF") ) { return ::hx::Val( convertToFNF_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SMFile_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"loadFile") ) { outValue = loadFile_dyn(); return true; }
	}
	return false;
}

::hx::Val SMFile_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"header") ) { header=inValue.Cast<  ::smTools::SMHeader >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isValid") ) { isValid=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isDouble") ) { isDouble=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"measures") ) { measures=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_fileData") ) { _fileData=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_readTime") ) { _readTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SMFile_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_fileData",25,36,3d,a3));
	outFields->push(HX_("isDouble",9b,c6,34,8b));
	outFields->push(HX_("isValid",b2,18,3e,ce));
	outFields->push(HX_("_readTime",e2,9d,8a,bc));
	outFields->push(HX_("header",8d,09,00,fd));
	outFields->push(HX_("measures",55,f7,d1,0f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SMFile_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(SMFile_obj,_fileData),HX_("_fileData",25,36,3d,a3)},
	{::hx::fsBool,(int)offsetof(SMFile_obj,isDouble),HX_("isDouble",9b,c6,34,8b)},
	{::hx::fsBool,(int)offsetof(SMFile_obj,isValid),HX_("isValid",b2,18,3e,ce)},
	{::hx::fsFloat,(int)offsetof(SMFile_obj,_readTime),HX_("_readTime",e2,9d,8a,bc)},
	{::hx::fsObject /*  ::smTools::SMHeader */ ,(int)offsetof(SMFile_obj,header),HX_("header",8d,09,00,fd)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SMFile_obj,measures),HX_("measures",55,f7,d1,0f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SMFile_obj_sStaticStorageInfo = 0;
#endif

static ::String SMFile_obj_sMemberFields[] = {
	HX_("_fileData",25,36,3d,a3),
	HX_("isDouble",9b,c6,34,8b),
	HX_("isValid",b2,18,3e,ce),
	HX_("_readTime",e2,9d,8a,bc),
	HX_("header",8d,09,00,fd),
	HX_("measures",55,f7,d1,0f),
	HX_("convertToFNF",70,5c,d6,46),
	::String(null()) };

::hx::Class SMFile_obj::__mClass;

static ::String SMFile_obj_sStaticFields[] = {
	HX_("loadFile",c2,9f,5b,b4),
	::String(null())
};

void SMFile_obj::__register()
{
	SMFile_obj _hx_dummy;
	SMFile_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("smTools.SMFile",e3,d5,c7,d6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SMFile_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SMFile_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SMFile_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SMFile_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SMFile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SMFile_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace smTools
