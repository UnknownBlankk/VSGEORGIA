// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_LuaClass
#include <LuaClass.h>
#endif
#ifndef INCLUDED_LuaGame
#include <LuaGame.h>
#endif
#ifndef INCLUDED_LuaReceptor
#include <LuaReceptor.h>
#endif
#ifndef INCLUDED_LuaSprite
#include <LuaSprite.h>
#endif
#ifndef INCLUDED_LuaWindow
#include <LuaWindow.h>
#endif
#ifndef INCLUDED_ModchartState
#include <ModchartState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_StaticArrow
#include <StaticArrow.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_WiggleEffect
#include <WiggleEffect.h>
#endif
#ifndef INCLUDED_WiggleShader
#include <WiggleShader.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_llua_Convert
#include <llua/Convert.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ShaderFilter
#include <openfl/filters/ShaderFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_29_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",29,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_448_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",448,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_453_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",453,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_457_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",457,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_470_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",470,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_477_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",477,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_485_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",485,0x8167c869)
HX_DEFINE_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_490_new,"ModchartState","new",0xb96c10e7,"ModchartState.new","ModchartState.hx",490,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_36_callLua,"ModchartState","callLua",0xd99f3fc1,"ModchartState.callLua","ModchartState.hx",36,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_136_convert,"ModchartState","convert",0xa01a8dfa,"ModchartState.convert","ModchartState.hx",136,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_179_getLuaErrorMessage,"ModchartState","getLuaErrorMessage",0x5dfc841a,"ModchartState.getLuaErrorMessage","ModchartState.hx",179,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_185_setVar,"ModchartState","setVar",0x1c3cfa3e,"ModchartState.setVar","ModchartState.hx",185,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_192_getVar,"ModchartState","getVar",0x4ff4a5ca,"ModchartState.getVar","ModchartState.hx",192,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_295_makeLuaSprite,"ModchartState","makeLuaSprite",0x6b8e8b56,"ModchartState.makeLuaSprite","ModchartState.hx",295,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_357_die,"ModchartState","die",0xb9647dc7,"ModchartState.die","ModchartState.hx",357,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_506_executeState,"ModchartState","executeState",0xa7b6b235,"ModchartState.executeState","ModchartState.hx",506,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_511_createModchartState,"ModchartState","createModchartState",0x9084fb80,"ModchartState.createModchartState","ModchartState.hx",511,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_33_boot,"ModchartState","boot",0x7d3bb9cb,"ModchartState.boot","ModchartState.hx",33,0x8167c869)
HX_LOCAL_STACK_FRAME(_hx_pos_cbdb2f83c10b3d9f_240_boot,"ModchartState","boot",0x7d3bb9cb,"ModchartState.boot","ModchartState.hx",240,0x8167c869)

void ModchartState_obj::__construct( ::Dynamic __o_isStoryMode){
            		 ::Dynamic isStoryMode = __o_isStoryMode;
            		if (::hx::IsNull(__o_isStoryMode)) isStoryMode = true;
            	HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_29_new)
HXLINE( 362)		this->luaWiggles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 366)		 ::ModchartState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 369)		::ModchartState_obj::lua = luaL_newstate();
HXLINE( 370)		luaL_openlibs(::ModchartState_obj::lua);
HXLINE( 373)		{
HXLINE( 373)			 cpp::Reference<lua_State> l = ::ModchartState_obj::lua;
HXDLIN( 373)			linc::callbacks::set_callbacks_function(::cpp::Function< int ( cpp::Reference<lua_State>,::String)>(::hx::AnyCast(&::llua::Lua_helper_obj::callback_handler )));
            		}
HXLINE( 378)		::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXLINE( 379)		::String _hx_switch_0 = songLowercase;
            		if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE( 382)			songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN( 382)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE( 384)			songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN( 384)			goto _hx_goto_0;
            		}
            		_hx_goto_0:;
HXLINE( 387)		::String library = null();
HXDLIN( 387)		::String path = ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (songLowercase + HX_("/modchart",0b,0e,ff,5d))) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),library);
HXLINE( 388)		if (::PlayState_obj::isSM) {
HXLINE( 389)			path = (::PlayState_obj::pathToSm + HX_("/modchart.lua",d5,99,c0,d9));
            		}
HXLINE( 391)		int result = luaL_dofile(::ModchartState_obj::lua,path);
HXLINE( 393)		if ((result != 0)) {
HXLINE( 395)			 ::lime::ui::Window _hx_tmp = ::lime::app::Application_obj::current->_hx___window;
HXDLIN( 395)			_hx_tmp->alert((HX_("LUA COMPILE ERROR:\n",e3,81,d3,99) + linc::lua::tostring(::ModchartState_obj::lua,result)),HX_("Kade Engine Modcharts",c2,0f,cb,ec));
HXLINE( 396)			{
HXLINE( 396)				 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 396)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 396)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE( 397)			return;
            		}
HXLINE( 402)		this->setVar(HX_("difficulty",3b,4e,8e,47),::PlayState_obj::storyDifficulty);
HXLINE( 403)		this->setVar(HX_("bpm",df,be,4a,00),::Conductor_obj::bpm);
HXLINE( 404)		 ::Dynamic _hx_tmp;
HXDLIN( 404)		if (::hx::IsNotEq( ::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic),1 )) {
HXLINE( 404)			_hx_tmp =  ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic));
            		}
            		else {
HXLINE( 404)			_hx_tmp =  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic));
            		}
HXDLIN( 404)		this->setVar(HX_("scrollspeed",5a,70,19,38),_hx_tmp);
HXLINE( 405)		this->setVar(HX_("fpsCap",a9,7b,7e,91), ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic)));
HXLINE( 406)		this->setVar(HX_("downscroll",ef,45,d4,4f), ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)));
HXLINE( 407)		this->setVar(HX_("flashing",32,85,e8,99), ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic)));
HXLINE( 408)		this->setVar(HX_("distractions",31,13,7d,60), ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)));
HXLINE( 409)		this->setVar(HX_("colour",4c,c8,86,c6), ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("colour",4c,c8,86,c6),::hx::paccDynamic)));
HXLINE( 411)		this->setVar(HX_("curStep",ec,58,71,b7),0);
HXLINE( 412)		this->setVar(HX_("curBeat",16,53,29,ac),0);
HXLINE( 413)		this->setVar(HX_("crochet",34,d5,b5,d4),::Conductor_obj::stepCrochet);
HXLINE( 414)		this->setVar(HX_("safeZoneOffset",8c,9a,25,8d),::Conductor_obj::safeZoneOffset);
HXLINE( 416)		this->setVar(HX_("hudZoom",6a,47,5d,7c),::PlayState_obj::instance->camHUD->zoom);
HXLINE( 417)		this->setVar(HX_("cameraZoom",58,cc,16,b7),::flixel::FlxG_obj::camera->zoom);
HXLINE( 419)		this->setVar(HX_("cameraAngle",ee,36,28,17),::flixel::FlxG_obj::camera->angle);
HXLINE( 420)		this->setVar(HX_("camHudAngle",cb,c2,43,4c),::PlayState_obj::instance->camHUD->angle);
HXLINE( 422)		this->setVar(HX_("followXOffset",ba,cc,46,b7),0);
HXLINE( 423)		this->setVar(HX_("followYOffset",7b,43,dc,e0),0);
HXLINE( 425)		this->setVar(HX_("showOnlyStrums",f3,ec,e4,3c),false);
HXLINE( 426)		this->setVar(HX_("strumLine1Visible",1e,97,fd,b5),true);
HXLINE( 427)		this->setVar(HX_("strumLine2Visible",3d,09,30,ef),true);
HXLINE( 429)		this->setVar(HX_("screenWidth",fa,02,e8,81),::flixel::FlxG_obj::width);
HXLINE( 430)		this->setVar(HX_("screenHeight",73,10,6a,df),::flixel::FlxG_obj::height);
HXLINE( 431)		this->setVar(HX_("windowWidth",f6,4b,35,bb),::flixel::FlxG_obj::width);
HXLINE( 432)		this->setVar(HX_("windowHeight",f7,a3,bc,c9),::flixel::FlxG_obj::height);
HXLINE( 433)		this->setVar(HX_("hudWidth",cf,dd,0d,97),::PlayState_obj::instance->camHUD->width);
HXLINE( 434)		this->setVar(HX_("hudHeight",fe,af,63,4b),::PlayState_obj::instance->camHUD->height);
HXLINE( 436)		this->setVar(HX_("mustHit",ca,3b,5d,00),false);
HXLINE( 438)		this->setVar(HX_("strumLineY",dc,27,b3,0d),::PlayState_obj::instance->strumLine->y);
HXLINE( 442)		{
HXLINE( 442)			 cpp::Reference<lua_State> l1 = ::ModchartState_obj::lua;
HXDLIN( 442)			::llua::Lua_helper_obj::callbacks->set(HX_("makeSprite",93,b0,65,15),this->makeLuaSprite_dyn());
HXDLIN( 442)			linc::callbacks::add_callback_function(l1,HX_("makeSprite",93,b0,65,15));
            		}
HXLINE( 446)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ModchartState,_gthis) HXARGC(1)
            			void _hx_run(::String wiggleId){
            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_448_new)
HXLINE( 448)				 ::flixel::FlxCamera _hx_tmp = ::PlayState_obj::instance->camNotes;
HXDLIN( 448)				_hx_tmp->setFilters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::ShaderFilter_obj::__alloc( HX_CTX ,( ( ::WiggleEffect)(_gthis->luaWiggles->get(wiggleId)) )->shader)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 446)			 cpp::Reference<lua_State> l2 = ::ModchartState_obj::lua;
HXDLIN( 446)			::llua::Lua_helper_obj::callbacks->set(HX_("setNoteWiggle",7f,a5,7a,8d), ::Dynamic(new _hx_Closure_0(_gthis)));
HXDLIN( 446)			linc::callbacks::add_callback_function(l2,HX_("setNoteWiggle",7f,a5,7a,8d));
            		}
HXLINE( 451)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ModchartState,_gthis) HXARGC(1)
            			void _hx_run(::String wiggleId){
            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_453_new)
HXLINE( 453)				 ::flixel::FlxCamera _hx_tmp = ::PlayState_obj::instance->camSustains;
HXDLIN( 453)				_hx_tmp->setFilters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::ShaderFilter_obj::__alloc( HX_CTX ,( ( ::WiggleEffect)(_gthis->luaWiggles->get(wiggleId)) )->shader)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 451)			 cpp::Reference<lua_State> l3 = ::ModchartState_obj::lua;
HXDLIN( 451)			::llua::Lua_helper_obj::callbacks->set(HX_("setSustainWiggle",ac,fd,e5,eb), ::Dynamic(new _hx_Closure_1(_gthis)));
HXDLIN( 451)			linc::callbacks::add_callback_function(l3,HX_("setSustainWiggle",ac,fd,e5,eb));
            		}
HXLINE( 456)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ModchartState,_gthis) HXARGC(3)
            			::String _hx_run(Float freq,Float amplitude,Float speed){
            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_457_new)
HXLINE( 458)				 ::WiggleEffect wiggle =  ::WiggleEffect_obj::__alloc( HX_CTX );
HXLINE( 459)				wiggle->set_waveAmplitude(amplitude);
HXLINE( 460)				wiggle->set_waveSpeed(speed);
HXLINE( 461)				wiggle->set_waveFrequency(freq);
HXLINE( 463)				::String id = ((::Lambda_obj::count(_gthis->luaWiggles,null()) + 1) + HX_("",00,00,00,00));
HXLINE( 465)				_gthis->luaWiggles->set(id,wiggle);
HXLINE( 466)				return id;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 456)			 cpp::Reference<lua_State> l4 = ::ModchartState_obj::lua;
HXDLIN( 456)			::llua::Lua_helper_obj::callbacks->set(HX_("createWiggle",c7,99,43,70), ::Dynamic(new _hx_Closure_2(_gthis)));
HXDLIN( 456)			linc::callbacks::add_callback_function(l4,HX_("createWiggle",c7,99,43,70));
            		}
HXLINE( 469)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::ModchartState,_gthis) HXARGC(2)
            			void _hx_run(::String wiggleId,Float time){
            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_470_new)
HXLINE( 471)				 ::WiggleEffect wiggle = ( ( ::WiggleEffect)(_gthis->luaWiggles->get(wiggleId)) );
HXLINE( 473)				wiggle->shader->uTime->value = ::Array_obj< Float >::__new(1)->init(0,time);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 469)			 cpp::Reference<lua_State> l5 = ::ModchartState_obj::lua;
HXDLIN( 469)			::llua::Lua_helper_obj::callbacks->set(HX_("setWiggleTime",9a,41,62,d5), ::Dynamic(new _hx_Closure_3(_gthis)));
HXDLIN( 469)			linc::callbacks::add_callback_function(l5,HX_("setWiggleTime",9a,41,62,d5));
            		}
HXLINE( 476)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::ModchartState,_gthis) HXARGC(2)
            			void _hx_run(::String wiggleId,Float amp){
            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_477_new)
HXLINE( 478)				 ::WiggleEffect wiggle = ( ( ::WiggleEffect)(_gthis->luaWiggles->get(wiggleId)) );
HXLINE( 480)				wiggle->set_waveAmplitude(amp);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 476)			 cpp::Reference<lua_State> l6 = ::ModchartState_obj::lua;
HXDLIN( 476)			::llua::Lua_helper_obj::callbacks->set(HX_("setWiggleAmplitude",96,60,ff,74), ::Dynamic(new _hx_Closure_4(_gthis)));
HXDLIN( 476)			linc::callbacks::add_callback_function(l6,HX_("setWiggleAmplitude",96,60,ff,74));
            		}
HXLINE( 483)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(1)
            			void _hx_run(Float y){
            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_485_new)
HXLINE( 485)				::PlayState_obj::instance->strumLine->set_y(y);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 483)			 cpp::Reference<lua_State> l7 = ::ModchartState_obj::lua;
HXDLIN( 483)			::llua::Lua_helper_obj::callbacks->set(HX_("setStrumlineY",3e,f6,fd,1b), ::Dynamic(new _hx_Closure_5()));
HXDLIN( 483)			linc::callbacks::add_callback_function(l7,HX_("setStrumlineY",3e,f6,fd,1b));
            		}
HXLINE( 488)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(1)
            			int _hx_run(Float y){
            				HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_490_new)
HXLINE( 490)				return ::PlayState_obj::instance->notes->members->get_length();
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 488)			 cpp::Reference<lua_State> l8 = ::ModchartState_obj::lua;
HXDLIN( 488)			::llua::Lua_helper_obj::callbacks->set(HX_("getNumberOfNotes",6b,3d,bd,6c), ::Dynamic(new _hx_Closure_6()));
HXDLIN( 488)			linc::callbacks::add_callback_function(l8,HX_("getNumberOfNotes",6b,3d,bd,6c));
            		}
HXLINE( 493)		{
HXLINE( 493)			int _g = 0;
HXDLIN( 493)			int _g1 = ::PlayState_obj::strumLineNotes->length;
HXDLIN( 493)			while((_g < _g1)){
HXLINE( 493)				_g = (_g + 1);
HXDLIN( 493)				int i = (_g - 1);
HXLINE( 495)				 ::StaticArrow member = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(i)).StaticCast<  ::StaticArrow >();
HXLINE( 496)				 ::LuaReceptor_obj::__alloc( HX_CTX ,member,(HX_("receptor_",23,7d,22,c1) + i))->Register(::ModchartState_obj::lua);
            			}
            		}
HXLINE( 499)		 ::LuaGame_obj::__alloc( HX_CTX )->Register(::ModchartState_obj::lua);
HXLINE( 501)		 ::LuaWindow_obj::__alloc( HX_CTX )->Register(::ModchartState_obj::lua);
            	}

Dynamic ModchartState_obj::__CreateEmpty() { return new ModchartState_obj; }

void *ModchartState_obj::_hx_vtable = 0;

Dynamic ModchartState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModchartState_obj > _hx_result = new ModchartState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ModchartState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x683926b5;
}

 ::Dynamic ModchartState_obj::callLua(::String func_name,::cpp::VirtualArray args,::String type){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_36_callLua)
HXLINE(  37)		 ::Dynamic result = null();
HXLINE(  39)		lua_getglobal(::ModchartState_obj::lua,func_name);
HXLINE(  41)		{
HXLINE(  41)			int _g = 0;
HXDLIN(  41)			while((_g < args->get_length())){
HXLINE(  41)				 ::Dynamic arg = args->__get(_g);
HXDLIN(  41)				_g = (_g + 1);
HXLINE(  42)				::llua::Convert_obj::toLua(::ModchartState_obj::lua,arg);
            			}
            		}
HXLINE(  45)		result = lua_pcall(::ModchartState_obj::lua,args->get_length(),1,0);
HXLINE(  46)		::String p = linc::lua::tostring(::ModchartState_obj::lua,( (int)(result) ));
HXLINE(  47)		::String e = this->getLuaErrorMessage(::ModchartState_obj::lua);
HXLINE(  49)		linc::lua::tostring(::ModchartState_obj::lua,-1);
HXLINE(  51)		bool _hx_tmp = ::hx::IsNotNull( e );
HXLINE(  58)		if (::hx::IsNull( result )) {
HXLINE(  59)			return null();
            		}
            		else {
HXLINE(  61)			return this->convert(result,type);
            		}
HXLINE(  58)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ModchartState_obj,callLua,return )

 ::Dynamic ModchartState_obj::convert( ::Dynamic v,::String type){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_136_convert)
HXDLIN( 136)		bool _hx_tmp;
HXDLIN( 136)		if (::Std_obj::isOfType(v,( ( ::Dynamic)(::hx::ClassOf< ::String >()) ))) {
HXDLIN( 136)			_hx_tmp = ::hx::IsNotNull( type );
            		}
            		else {
HXDLIN( 136)			_hx_tmp = false;
            		}
HXDLIN( 136)		if (_hx_tmp) {
HXLINE( 137)			::String v1 = ( (::String)(v) );
HXLINE( 138)			if ((type.substr(0,4) == HX_("array",99,6d,8f,25))) {
HXLINE( 139)				if ((type.substr(4,null()) == HX_("float",9c,c5,96,02))) {
HXLINE( 140)					::Array< ::String > array = v1.split(HX_(",",2c,00,00,00));
HXLINE( 141)					::Array< Float > array2 = ::Array_obj< Float >::__new();
HXLINE( 143)					{
HXLINE( 143)						int _g = 0;
HXDLIN( 143)						while((_g < array->length)){
HXLINE( 143)							::String vars = array->__get(_g);
HXDLIN( 143)							_g = (_g + 1);
HXLINE( 144)							array2->push(::Std_obj::parseFloat(vars));
            						}
            					}
HXLINE( 147)					return array2;
            				}
            				else {
HXLINE( 148)					if ((type.substr(4,null()) == HX_("int",ef,0c,50,00))) {
HXLINE( 149)						::Array< ::String > array = v1.split(HX_(",",2c,00,00,00));
HXLINE( 150)						::Array< int > array2 = ::Array_obj< int >::__new();
HXLINE( 152)						{
HXLINE( 152)							int _g = 0;
HXDLIN( 152)							while((_g < array->length)){
HXLINE( 152)								::String vars = array->__get(_g);
HXDLIN( 152)								_g = (_g + 1);
HXLINE( 153)								array2->push(::Std_obj::parseInt(vars));
            							}
            						}
HXLINE( 156)						return array2;
            					}
            					else {
HXLINE( 158)						::Array< ::String > array = v1.split(HX_(",",2c,00,00,00));
HXLINE( 159)						return array;
            					}
            				}
            			}
            			else {
HXLINE( 161)				if ((type == HX_("float",9c,c5,96,02))) {
HXLINE( 162)					return ::Std_obj::parseFloat(v1);
            				}
            				else {
HXLINE( 163)					if ((type == HX_("int",ef,0c,50,00))) {
HXLINE( 164)						return ::Std_obj::parseInt(v1);
            					}
            					else {
HXLINE( 165)						if ((type == HX_("bool",2a,84,1b,41))) {
HXLINE( 166)							if ((v1 == HX_("true",4e,a7,03,4d))) {
HXLINE( 167)								return true;
            							}
            							else {
HXLINE( 169)								return false;
            							}
            						}
            						else {
HXLINE( 172)							return v1;
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 175)			return v;
            		}
HXLINE( 136)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ModchartState_obj,convert,return )

::String ModchartState_obj::getLuaErrorMessage( cpp::Reference<lua_State> l){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_179_getLuaErrorMessage)
HXLINE( 180)		::String v = linc::lua::tostring(l,-1);
HXLINE( 181)		lua_pop(l,1);
HXLINE( 182)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ModchartState_obj,getLuaErrorMessage,return )

void ModchartState_obj::setVar(::String var_name, ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_185_setVar)
HXLINE( 188)		lua_pushnumber(::ModchartState_obj::lua,( (Float)(object) ));
HXLINE( 189)		lua_setglobal(::ModchartState_obj::lua,var_name);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ModchartState_obj,setVar,(void))

 ::Dynamic ModchartState_obj::getVar(::String var_name,::String type){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_192_getVar)
HXLINE( 193)		 ::Dynamic result = null();
HXLINE( 197)		lua_getglobal(::ModchartState_obj::lua,var_name);
HXLINE( 198)		 cpp::Reference<lua_State> l = ::ModchartState_obj::lua;
HXDLIN( 198)		 ::Dynamic ret = null();
HXDLIN( 198)		switch((int)(lua_type(l,-1))){
            			case (int)0: {
HXLINE( 198)				ret = null();
            			}
            			break;
            			case (int)1: {
HXLINE( 198)				ret = (lua_toboolean(l,-1) != 0);
            			}
            			break;
            			case (int)3: {
HXLINE( 198)				ret = lua_tonumber(l,-1);
            			}
            			break;
            			case (int)4: {
HXLINE( 198)				ret = linc::lua::tostring(l,-1);
            			}
            			break;
            			case (int)5: {
HXLINE( 198)				ret = ::llua::Convert_obj::toHaxeObj(l,-1);
            			}
            			break;
            			default:{
HXLINE( 198)				ret = null();
            			}
            		}
HXDLIN( 198)		result = ret;
HXLINE( 199)		lua_pop(::ModchartState_obj::lua,1);
HXLINE( 201)		if (::hx::IsNull( result )) {
HXLINE( 202)			return null();
            		}
            		else {
HXLINE( 204)			 ::Dynamic result1 = this->convert(result,type);
HXLINE( 206)			return result1;
            		}
HXLINE( 201)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ModchartState_obj,getVar,return )

::String ModchartState_obj::makeLuaSprite(::String spritePath,::String toBeCalled,bool drawBehind){
            	HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_295_makeLuaSprite)
HXLINE( 298)		::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXLINE( 299)		::String _hx_switch_0 = songLowercase;
            		if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE( 300)			songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN( 300)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE( 301)			songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN( 301)			goto _hx_goto_18;
            		}
            		_hx_goto_18:;
HXLINE( 304)		::String path = (((::Sys_obj::getCwd() + HX_("assets/data/",f9,10,73,a0)) + songLowercase) + HX_("/",2f,00,00,00));
HXLINE( 306)		if (::PlayState_obj::isSM) {
HXLINE( 307)			path = (::PlayState_obj::pathToSm + HX_("/",2f,00,00,00));
            		}
HXLINE( 309)		 ::openfl::display::BitmapData data = ::openfl::display::BitmapData_obj::fromFile(((path + spritePath) + HX_(".png",3b,2d,bd,1e)));
HXLINE( 311)		 ::flixel::FlxSprite sprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE( 312)		Float imgWidth = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(data->width) ));
HXLINE( 313)		Float imgHeight = (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(data->height) ));
HXLINE( 314)		Float scale;
HXDLIN( 314)		if ((imgWidth <= imgHeight)) {
HXLINE( 314)			scale = imgWidth;
            		}
            		else {
HXLINE( 314)			scale = imgHeight;
            		}
HXLINE( 317)		if ((scale > 1)) {
HXLINE( 318)			scale = ( (Float)(1) );
            		}
HXLINE( 320)		int _hx_tmp = ::Std_obj::_hx_int((( (Float)(data->width) ) * scale));
HXDLIN( 320)		sprite->makeGraphic(_hx_tmp,::Std_obj::_hx_int((( (Float)(data->width) ) * scale)),0,null(),null());
HXLINE( 322)		 ::openfl::display::BitmapData data2 = sprite->get_pixels()->clone();
HXLINE( 323)		 ::openfl::geom::Matrix matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 324)		matrix->identity();
HXLINE( 325)		matrix->scale(scale,scale);
HXLINE( 326)		data2->fillRect(data2->rect,0);
HXLINE( 327)		data2->draw(data,matrix,null(),null(),null(),true);
HXLINE( 328)		sprite->set_pixels(data2);
HXLINE( 330)		::ModchartState_obj::luaSprites->set(toBeCalled,sprite);
HXLINE( 334)		{
HXLINE( 335)			if (drawBehind) {
HXLINE( 337)				::PlayState_obj::instance->removeObject(::PlayState_obj::gf);
HXLINE( 338)				::PlayState_obj::instance->removeObject(::PlayState_obj::boyfriend);
HXLINE( 339)				::PlayState_obj::instance->removeObject(::PlayState_obj::dad);
            			}
HXLINE( 341)			::PlayState_obj::instance->addObject(sprite);
HXLINE( 342)			if (drawBehind) {
HXLINE( 344)				::PlayState_obj::instance->addObject(::PlayState_obj::gf);
HXLINE( 345)				::PlayState_obj::instance->addObject(::PlayState_obj::boyfriend);
HXLINE( 346)				::PlayState_obj::instance->addObject(::PlayState_obj::dad);
            			}
            		}
HXLINE( 351)		 ::LuaSprite_obj::__alloc( HX_CTX ,sprite,toBeCalled)->Register(::ModchartState_obj::lua);
HXLINE( 353)		return toBeCalled;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ModchartState_obj,makeLuaSprite,return )

void ModchartState_obj::die(){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_357_die)
HXLINE( 358)		lua_close(::ModchartState_obj::lua);
HXLINE( 359)		::ModchartState_obj::lua = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ModchartState_obj,die,(void))

::String ModchartState_obj::executeState(::String name,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_506_executeState)
HXDLIN( 506)		 cpp::Reference<lua_State> _hx_tmp = ::ModchartState_obj::lua;
HXDLIN( 506)		return linc::lua::tostring(_hx_tmp,( (int)(this->callLua(name,args,null())) ));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ModchartState_obj,executeState,return )

 cpp::Reference<lua_State> ModchartState_obj::lua;

 ::haxe::ds::StringMap ModchartState_obj::luaSprites;

 ::ModchartState ModchartState_obj::createModchartState( ::Dynamic __o_isStoryMode){
            		 ::Dynamic isStoryMode = __o_isStoryMode;
            		if (::hx::IsNull(__o_isStoryMode)) isStoryMode = true;
            	HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_511_createModchartState)
HXDLIN( 511)		return  ::ModchartState_obj::__alloc( HX_CTX ,isStoryMode);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ModchartState_obj,createModchartState,return )


::hx::ObjectPtr< ModchartState_obj > ModchartState_obj::__new( ::Dynamic __o_isStoryMode) {
	::hx::ObjectPtr< ModchartState_obj > __this = new ModchartState_obj();
	__this->__construct(__o_isStoryMode);
	return __this;
}

::hx::ObjectPtr< ModchartState_obj > ModchartState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_isStoryMode) {
	ModchartState_obj *__this = (ModchartState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModchartState_obj), true, "ModchartState"));
	*(void **)__this = ModchartState_obj::_hx_vtable;
	__this->__construct(__o_isStoryMode);
	return __this;
}

ModchartState_obj::ModchartState_obj()
{
}

void ModchartState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ModchartState);
	HX_MARK_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_MARK_END_CLASS();
}

void ModchartState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(luaWiggles,"luaWiggles");
}

::hx::Val ModchartState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"die") ) { return ::hx::Val( die_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"setVar") ) { return ::hx::Val( setVar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVar") ) { return ::hx::Val( getVar_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"callLua") ) { return ::hx::Val( callLua_dyn() ); }
		if (HX_FIELD_EQ(inName,"convert") ) { return ::hx::Val( convert_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { return ::hx::Val( luaWiggles ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"executeState") ) { return ::hx::Val( executeState_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"makeLuaSprite") ) { return ::hx::Val( makeLuaSprite_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLuaErrorMessage") ) { return ::hx::Val( getLuaErrorMessage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ModchartState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { outValue = ( lua ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"luaSprites") ) { outValue = ( luaSprites ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createModchartState") ) { outValue = createModchartState_dyn(); return true; }
	}
	return false;
}

::hx::Val ModchartState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { luaWiggles=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ModchartState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { lua=ioValue.Cast<  cpp::Reference<lua_State> >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"luaSprites") ) { luaSprites=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void ModchartState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("luaWiggles",90,11,ce,e3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ModchartState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ModchartState_obj,luaWiggles),HX_("luaWiggles",90,11,ce,e3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ModchartState_obj_sStaticStorageInfo[] = {
	{::hx::fsUnknown /*  cpp::Reference<lua_State> */ ,(void *) &ModchartState_obj::lua,HX_("lua",b8,59,52,00)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &ModchartState_obj::luaSprites,HX_("luaSprites",f6,9d,b8,60)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ModchartState_obj_sMemberFields[] = {
	HX_("callLua",ba,af,4e,54),
	HX_("convert",f3,fd,c9,1a),
	HX_("getLuaErrorMessage",c1,14,67,07),
	HX_("setVar",65,6c,71,6f),
	HX_("getVar",f1,17,29,a3),
	HX_("makeLuaSprite",0f,bc,5b,d4),
	HX_("die",40,3d,4c,00),
	HX_("luaWiggles",90,11,ce,e3),
	HX_("executeState",9c,bb,91,3e),
	::String(null()) };

static void ModchartState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ModchartState_obj::lua,"lua");
	HX_MARK_MEMBER_NAME(ModchartState_obj::luaSprites,"luaSprites");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ModchartState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ModchartState_obj::lua,"lua");
	HX_VISIT_MEMBER_NAME(ModchartState_obj::luaSprites,"luaSprites");
};

#endif

::hx::Class ModchartState_obj::__mClass;

static ::String ModchartState_obj_sStaticFields[] = {
	HX_("lua",b8,59,52,00),
	HX_("luaSprites",f6,9d,b8,60),
	HX_("createModchartState",f9,fc,58,24),
	::String(null())
};

void ModchartState_obj::__register()
{
	ModchartState_obj _hx_dummy;
	ModchartState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ModchartState",75,11,f2,8b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ModchartState_obj::__GetStatic;
	__mClass->mSetStaticField = &ModchartState_obj::__SetStatic;
	__mClass->mMarkFunc = ModchartState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ModchartState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ModchartState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ModchartState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ModchartState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModchartState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModchartState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ModchartState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_33_boot)
HXDLIN(  33)		lua = null();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_cbdb2f83c10b3d9f_240_boot)
HXDLIN( 240)		luaSprites =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

