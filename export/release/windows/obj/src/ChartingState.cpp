// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_Event
#include <Event.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_SectionRender
#include <SectionRender.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c8186eee1bd9a607_50_new,"ChartingState","new",0x5e894bff,"ChartingState.new","ChartingState.hx",50,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_137_create,"ChartingState","create",0xe351b8bd,"ChartingState.create","ChartingState.hx",137,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_433_regenerateLines,"ChartingState","regenerateLines",0x6a7da516,"ChartingState.regenerateLines","ChartingState.hx",433,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_492_addGrid,"ChartingState","addGrid",0x736e50a6,"ChartingState.addGrid","ChartingState.hx",492,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_535_containsName,"ChartingState","containsName",0x8c788c8b,"ChartingState.containsName","ChartingState.hx",535,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_571_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",571,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_640_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",640,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_716_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",716,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_796_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",796,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_853_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",853,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_870_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",870,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_877_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",877,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_881_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",881,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_551_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",551,0xd9647851)
static const ::String _hx_array_data_9bdde08d_32[] = {
	HX_("BPM Change",d1,e8,85,d1),HX_("Scroll Speed Change",fc,2c,18,61),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_928_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",928,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_934_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",934,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_947_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",947,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_921_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",921,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_968_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",968,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_975_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",975,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_980_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",980,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_985_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",985,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_990_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",990,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1046_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1046,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1056_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1056,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1064_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1064,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1072_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1072,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1080_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1080,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1088_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1088,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_960_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",960,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1161_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1161,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1165_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1165,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1175_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1175,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1193_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1193,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1227_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1227,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1151_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1151,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1255_addNoteUI,"ChartingState","addNoteUI",0x01b274a6,"ChartingState.addNoteUI","ChartingState.hx",1255,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1329_loadSong,"ChartingState","loadSong",0x36c2f91c,"ChartingState.loadSong","ChartingState.hx",1329,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1292_loadSong,"ChartingState","loadSong",0x36c2f91c,"ChartingState.loadSong","ChartingState.hx",1292,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1337_generateUI,"ChartingState","generateUI",0x13f5670a,"ChartingState.generateUI","ChartingState.hx",1337,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1357_getEvent,"ChartingState","getEvent",0x4f66dba5,"ChartingState.getEvent","ChartingState.hx",1357,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1443_stepStartTime,"ChartingState","stepStartTime",0xba6fcd02,"ChartingState.stepStartTime","ChartingState.hx",1443,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1447_sectionStartTime,"ChartingState","sectionStartTime",0x9b4027eb,"ChartingState.sectionStartTime","ChartingState.hx",1447,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1474_resizeEverything,"ChartingState","resizeEverything",0xa26a0e88,"ChartingState.resizeEverything","ChartingState.hx",1474,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1473_resizeEverything,"ChartingState","resizeEverything",0xa26a0e88,"ChartingState.resizeEverything","ChartingState.hx",1473,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1491_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",1491,0xd9647851)
static const bool _hx_array_data_9bdde08d_77[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1714_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",1714,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1735_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",1735,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1828_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",1828,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2002_changeNoteSustain,"ChartingState","changeNoteSustain",0x9b3f5f20,"ChartingState.changeNoteSustain","ChartingState.hx",2002,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2017_resetSection,"ChartingState","resetSection",0xb8b9e457,"ChartingState.resetSection","ChartingState.hx",2017,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2034_changeSection,"ChartingState","changeSection",0xb8ce82b4,"ChartingState.changeSection","ChartingState.hx",2034,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2072_copySection,"ChartingState","copySection",0xd085354f,"ChartingState.copySection","ChartingState.hx",2072,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2091_updateSectionUI,"ChartingState","updateSectionUI",0x006c124f,"ChartingState.updateSectionUI","ChartingState.hx",2091,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2109_updateHeads,"ChartingState","updateHeads",0x26e9ef29,"ChartingState.updateHeads","ChartingState.hx",2109,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2123_updateNoteUI,"ChartingState","updateNoteUI",0x1a7d0230,"ChartingState.updateNoteUI","ChartingState.hx",2123,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2128_updateGrid,"ChartingState","updateGrid",0xc2b587b0,"ChartingState.updateGrid","ChartingState.hx",2128,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2197_addSection,"ChartingState","addSection",0x8af6f805,"ChartingState.addSection","ChartingState.hx",2197,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2229_selectNote,"ChartingState","selectNote",0x7d3a534f,"ChartingState.selectNote","ChartingState.hx",2229,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2248_deleteNote,"ChartingState","deleteNote",0x61ebbbfe,"ChartingState.deleteNote","ChartingState.hx",2248,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2282_clearSection,"ChartingState","clearSection",0x225a5059,"ChartingState.clearSection","ChartingState.hx",2282,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2289_clearSong,"ChartingState","clearSong",0xd7f188e1,"ChartingState.clearSong","ChartingState.hx",2289,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2299_newSection,"ChartingState","newSection",0x606eefa6,"ChartingState.newSection","ChartingState.hx",2299,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2334_recalculateAllSectionTimes,"ChartingState","recalculateAllSectionTimes",0xbe1ad090,"ChartingState.recalculateAllSectionTimes","ChartingState.hx",2334,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2385_shiftNotes,"ChartingState","shiftNotes",0x74b78ea0,"ChartingState.shiftNotes","ChartingState.hx",2385,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2434_getSectionByTime,"ChartingState","getSectionByTime",0x743e0fd4,"ChartingState.getSectionByTime","ChartingState.hx",2434,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2455_getNoteByTime,"ChartingState","getNoteByTime",0x06f3c7ab,"ChartingState.getNoteByTime","ChartingState.hx",2455,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2467_addNote,"ChartingState","addNote",0x780c91d2,"ChartingState.addNote","ChartingState.hx",2467,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2500_getStrumTime,"ChartingState","getStrumTime",0xec7b6301,"ChartingState.getStrumTime","ChartingState.hx",2500,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2505_getYfromStrum,"ChartingState","getYfromStrum",0x7268247b,"ChartingState.getYfromStrum","ChartingState.hx",2505,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2535_loadLevel,"ChartingState","loadLevel",0xa572de5d,"ChartingState.loadLevel","ChartingState.hx",2535,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2539_getNotes,"ChartingState","getNotes",0x796cefcc,"ChartingState.getNotes","ChartingState.hx",2539,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2551_loadJson,"ChartingState","loadJson",0x30d3176f,"ChartingState.loadJson","ChartingState.hx",2551,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2562_loadAutosave,"ChartingState","loadAutosave",0xe706d2f3,"ChartingState.loadAutosave","ChartingState.hx",2562,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2568_autosaveSong,"ChartingState","autosaveSong",0x50afbca2,"ChartingState.autosaveSong","ChartingState.hx",2568,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2576_saveLevel,"ChartingState","saveLevel",0x18e899e6,"ChartingState.saveLevel","ChartingState.hx",2576,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2594_onSaveComplete,"ChartingState","onSaveComplete",0x9fbb2796,"ChartingState.onSaveComplete","ChartingState.hx",2594,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2606_onSaveCancel,"ChartingState","onSaveCancel",0xc234b317,"ChartingState.onSaveCancel","ChartingState.hx",2606,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2617_onSaveError,"ChartingState","onSaveError",0x40b268cb,"ChartingState.onSaveError","ChartingState.hx",2617,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_65_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",65,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_66_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",66,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_77_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",77,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_134_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",134,0xd9647851)

void ChartingState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_50_new)
HXLINE(2531)		this->daSpacing = ((Float)0.3);
HXLINE(2381)		this->once = false;
HXLINE(1470)		this->lastUpdatedSection = null();
HXLINE(1469)		this->updateFrame = 0;
HXLINE(1467)		this->lastBPM = ((Float)0);
HXLINE(1466)		this->currentBPM = ((Float)0);
HXLINE(1464)		this->changeIndex = 0;
HXLINE(1462)		this->diff = ((Float)0);
HXLINE(1460)		this->doSnapShit = false;
HXLINE(1459)		this->writingNotes = false;
HXLINE(1428)		this->updatedSection = false;
HXLINE( 548)		this->Typeables = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 546)		this->chartEvents = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 532)		this->currentEventPosition = ((Float)0);
HXLINE( 531)		this->savedValue = HX_("",00,00,00,00);
HXLINE( 530)		this->savedType = HX_("",00,00,00,00);
HXLINE( 529)		this->currentSelectedEventName = HX_("",00,00,00,00);
HXLINE( 128)		this->claps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 120)		this->height = 0;
HXLINE( 116)		this->player1 =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("bf",c4,55,00,00));
HXLINE( 115)		this->player2 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("dad",47,36,4c,00),null());
HXLINE( 111)		this->tempBpm = ((Float)0);
HXLINE(  91)		this->defaultSnap = true;
HXLINE(  90)		this->subDivisions = ((Float)1);
HXLINE(  88)		this->GRID_SIZE = 40;
HXLINE(  83)		this->amountSteps = 0;
HXLINE(  82)		this->curSong = HX_("Dad Battle",31,46,15,16);
HXLINE(  75)		this->curSection = 0;
HXLINE(  69)		this->zoomFactor = ((Float)1);
HXLINE(  68)		this->beatsShown = ((Float)1);
HXLINE(  60)		this->deezNuts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  58)		this->snap = 16;
HXLINE(  56)		this->playClaps = false;
HXLINE(  50)		super::__construct(TransIn,TransOut);
            	}

Dynamic ChartingState_obj::__CreateEmpty() { return new ChartingState_obj; }

void *ChartingState_obj::_hx_vtable = 0;

Dynamic ChartingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChartingState_obj > _hx_result = new ChartingState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ChartingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x7824f5cd || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ChartingState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_137_create)
HXLINE( 138)		this->curSection = ::ChartingState_obj::lastSection;
HXLINE( 140)		::haxe::Log_obj::trace((1 > ::Math_obj::POSITIVE_INFINITY),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),140,HX_("ChartingState",8d,e0,dd,9b),HX_("create",fc,66,0f,7c)));
HXLINE( 142)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 144)		::ChartingState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 146)		this->deezNuts->set(4,1);
HXLINE( 147)		this->deezNuts->set(8,2);
HXLINE( 148)		this->deezNuts->set(16,4);
HXLINE( 149)		this->deezNuts->set(32,8);
HXLINE( 150)		this->deezNuts->set(64,16);
HXLINE( 152)		this->sectionRenderes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 153)		this->lines =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 154)		this->texts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 156)		::TimingStruct_obj::clearTimings();
HXLINE( 158)		if (::hx::IsNotNull( ::PlayState_obj::SONG )) {
HXLINE( 159)			::ChartingState_obj::_song = ::PlayState_obj::SONG;
            		}
            		else {
HXLINE( 162)			::ChartingState_obj::_song =  ::Dynamic(::hx::Anon_obj::Create(13)
            				->setFixed(0,HX_("speed",87,97,69,81),( (Float)(1) ))
            				->setFixed(1,HX_("stage",be,6a,0b,84),HX_("stage",be,6a,0b,84))
            				->setFixed(2,HX_("player1",b0,09,15,8a),HX_("bf",c4,55,00,00))
            				->setFixed(3,HX_("player2",b1,09,15,8a),HX_("dad",47,36,4c,00))
            				->setFixed(4,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(5,HX_("noteStyle",df,ef,aa,c1),HX_("normal",27,72,69,30))
            				->setFixed(6,HX_("validScore",b6,dc,18,c7),false)
            				->setFixed(7,HX_("chartVersion",da,e9,39,c8),::ChartingState_obj::latestChartVersion)
            				->setFixed(8,HX_("gfVersion",b9,c6,7d,f3),HX_("gf",1f,5a,00,00))
            				->setFixed(9,HX_("bpm",df,be,4a,00),( (Float)(150) ))
            				->setFixed(10,HX_("needsVoices",be,05,e9,0d),true)
            				->setFixed(11,HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(12,HX_("song",d5,23,58,4c),HX_("Test",72,f4,d2,37)));
            		}
HXLINE( 179)		this->addGrid(1);
HXLINE( 181)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("chartVersion",da,e9,39,c8),::hx::paccDynamic) )) {
HXLINE( 182)			::ChartingState_obj::_song->__SetField(HX_("chartVersion",da,e9,39,c8),HX_("2",32,00,00,00),::hx::paccDynamic);
            		}
HXLINE( 191)		this->snapText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,60,10,0,HX_("",00,00,00,00),14,null());
HXLINE( 192)		this->snapText->scrollFactor->set(null(),null());
HXLINE( 195)		this->curRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 196)		this->curRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 198)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 199)		::flixel::FlxG_obj::save->bind(HX_("funkin",31,b2,4f,6f),HX_("ninjamuffin99",f7,4c,e5,00));
HXLINE( 201)		this->tempBpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 203)		this->addSection(null());
HXLINE( 207)		this->loadSong(( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 208)		::Conductor_obj::changeBPM(( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 209)		::Conductor_obj::mapBPMChanges(::ChartingState_obj::_song);
HXLINE( 211)		::ChartingState_obj::leftIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 212)		::ChartingState_obj::rightIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 214)		int index = 0;
HXLINE( 216)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 217)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 219)		if ((( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->length == 0)) {
HXLINE( 220)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 223)		::haxe::Log_obj::trace(HX_("goin",0d,90,69,44),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),223,HX_("ChartingState",8d,e0,dd,9b),HX_("create",fc,66,0f,7c)));
HXLINE( 225)		int currentIndex = 0;
HXLINE( 226)		{
HXLINE( 226)			int _g = 0;
HXDLIN( 226)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 226)			while((_g < _g1->length)){
HXLINE( 226)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 226)				_g = (_g + 1);
HXLINE( 228)				 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 229)				::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 230)				Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 231)				Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 233)				if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 235)					Float beat = pos;
HXLINE( 237)					Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 239)					::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 241)					if ((currentIndex != 0)) {
HXLINE( 243)						 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 244)						data->endBeat = beat;
HXLINE( 245)						data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 246)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            					}
HXLINE( 249)					currentIndex = (currentIndex + 1);
            				}
            			}
            		}
HXLINE( 253)		 ::TimingStruct lastSeg = ::TimingStruct_obj::AllTimings->__get((::TimingStruct_obj::AllTimings->length - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 255)		{
HXLINE( 255)			int _g2 = 0;
HXDLIN( 255)			int _g3 = ::TimingStruct_obj::AllTimings->length;
HXDLIN( 255)			while((_g2 < _g3)){
HXLINE( 255)				_g2 = (_g2 + 1);
HXDLIN( 255)				int i = (_g2 - 1);
HXLINE( 257)				 ::TimingStruct seg = ::TimingStruct_obj::AllTimings->__get(i).StaticCast<  ::TimingStruct >();
HXLINE( 258)				if ((i == (::TimingStruct_obj::AllTimings->length - 1))) {
HXLINE( 259)					lastSeg = seg;
            				}
            			}
            		}
HXLINE( 262)		this->recalculateAllSectionTimes();
HXLINE( 264)		::haxe::Log_obj::trace((HX_("Song length in MS: ",38,a4,9f,08) + ::flixel::FlxG_obj::sound->music->_length),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),264,HX_("ChartingState",8d,e0,dd,9b),HX_("create",fc,66,0f,7c)));
HXLINE( 266)		{
HXLINE( 266)			int _g4 = 0;
HXDLIN( 266)			while((_g4 < 9000000)){
HXLINE( 266)				_g4 = (_g4 + 1);
HXDLIN( 266)				int i = (_g4 - 1);
HXLINE( 268)				 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(i) ));
HXLINE( 271)				Float start = ((( (Float)(i) ) - seg->startBeat) / (seg->bpm / ( (Float)(60) )));
HXLINE( 273)				Float time = ((seg->startTime + start) * ( (Float)(1000) ));
HXLINE( 275)				if ((time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE( 276)					goto _hx_goto_3;
            				}
HXLINE( 278)				::ChartingState_obj::lengthInBeats = ( (Float)(i) );
            			}
            			_hx_goto_3:;
            		}
HXLINE( 281)		::ChartingState_obj::lengthInSteps = (::ChartingState_obj::lengthInBeats * ( (Float)(4) ));
HXLINE( 283)		::haxe::Log_obj::trace((((((HX_("LENGTH IN STEPS ",da,89,02,50) + ::ChartingState_obj::lengthInSteps) + HX_(" | LENGTH IN BEATS ",c8,5e,d1,c6)) + ::ChartingState_obj::lengthInBeats) + HX_(" | SECTIONS: ",58,2e,8e,5d)) + ::Math_obj::floor(((::ChartingState_obj::lengthInSteps + 16) / ( (Float)(16) )))),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),283,HX_("ChartingState",8d,e0,dd,9b),HX_("create",fc,66,0f,7c)));
HXLINE( 285)		int sections = ::Math_obj::floor(((::ChartingState_obj::lengthInSteps + 16) / ( (Float)(16) )));
HXLINE( 287)		Float targetY = this->getYfromStrum(::flixel::FlxG_obj::sound->music->_length);
HXLINE( 289)		::haxe::Log_obj::trace((HX_("TARGET ",af,c7,3b,08) + targetY),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),289,HX_("ChartingState",8d,e0,dd,9b),HX_("create",fc,66,0f,7c)));
HXLINE( 291)		{
HXLINE( 291)			int _g5 = 0;
HXDLIN( 291)			int _g6 = (::Math_obj::round((targetY / ( (Float)(640) ))) + 1920);
HXDLIN( 291)			while((_g5 < _g6)){
HXLINE( 291)				_g5 = (_g5 + 1);
HXDLIN( 291)				int awfgaw = (_g5 - 1);
HXLINE( 293)				 ::SectionRender renderer =  ::SectionRender_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)((640 * awfgaw)) ),this->GRID_SIZE,null());
HXLINE( 294)				if (::hx::IsNull(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw) )) {
HXLINE( 295)					::Array< ::Dynamic> _hx_tmp = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN( 295)					_hx_tmp->push(this->newSection(16,true,false));
            				}
HXLINE( 296)				renderer->section =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw);
HXLINE( 298)				this->sectionRenderes->add(renderer).StaticCast<  ::SectionRender >();
HXLINE( 300)				Float down = this->getYfromStrum(( (Float)(renderer->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) ));
HXDLIN( 300)				Float down1 = (down * this->zoomFactor);
HXLINE( 302)				 ::flixel::FlxSprite sectionicon;
HXDLIN( 302)				if (( (bool)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 302)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
            				else {
HXLINE( 302)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
HXLINE( 303)				sectionicon->set_x(( (Float)(-95) ));
HXLINE( 304)				sectionicon->set_y((down1 - ( (Float)(75) )));
HXLINE( 305)				sectionicon->setGraphicSize(0,45);
HXLINE( 307)				renderer->icon = sectionicon;
HXLINE( 308)				renderer->lastUpdated = ( (bool)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE( 310)				this->add(sectionicon);
HXLINE( 311)				this->height = ::Math_obj::floor(renderer->y);
            			}
            		}
HXLINE( 316)		::haxe::Log_obj::trace(this->height,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),316,HX_("ChartingState",8d,e0,dd,9b),HX_("create",fc,66,0f,7c)));
HXLINE( 318)		Float _hx_tmp = (this->gridBG->get_width() / ( (Float)(2) ));
HXDLIN( 318)		this->gridBlackLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp,null(),null())->makeGraphic(2,this->height,-16777216,null(),null());
HXLINE( 324)		::ChartingState_obj::leftIcon->setGraphicSize(0,45);
HXLINE( 325)		::ChartingState_obj::rightIcon->setGraphicSize(0,45);
HXLINE( 327)		this->add(::ChartingState_obj::leftIcon);
HXLINE( 328)		this->add(::ChartingState_obj::rightIcon);
HXLINE( 330)		::ChartingState_obj::leftIcon->setPosition(0,-100);
HXLINE( 331)		 ::HealthIcon _hx_tmp1 = ::ChartingState_obj::rightIcon;
HXDLIN( 331)		_hx_tmp1->setPosition((this->gridBG->get_width() / ( (Float)(2) )),-100);
HXLINE( 333)		::ChartingState_obj::leftIcon->scrollFactor->set(null(),null());
HXLINE( 334)		::ChartingState_obj::rightIcon->scrollFactor->set(null(),null());
HXLINE( 336)		this->bpmTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1000,50,0,HX_("",00,00,00,00),16,null());
HXLINE( 337)		this->bpmTxt->scrollFactor->set(null(),null());
HXLINE( 338)		this->add(this->bpmTxt);
HXLINE( 340)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 340)		this->strumLine = _hx_tmp2->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,null(),null(),null());
HXLINE( 342)		this->dummyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(this->GRID_SIZE,this->GRID_SIZE,null(),null(),null());
HXLINE( 343)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(4)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Song",f5,4f,31,37))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Data",55,ca,2e,d8))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Section",c5,2d,29,2b))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Section Data",85,da,d0,2d))))->init(2, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Note",12,44,e3,33))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Note Data",18,cd,41,e6))))->init(3, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Assets",a3,bc,97,80))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Assets",a3,bc,97,80))));
HXLINE( 350)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 352)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 353)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 354)		this->UI_box->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 40));
HXLINE( 355)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 357)		::Array< ::Dynamic> opt_tabs = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Options",3e,5b,4f,ad))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Options",13,6c,3f,84))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Events",39,c3,fe,ca))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Events",04,64,1b,cd))));
HXLINE( 359)		this->UI_options =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),opt_tabs,null(),true,null(),null());
HXLINE( 361)		this->UI_options->scrollFactor->set(null(),null());
HXLINE( 362)		this->UI_options->set_selected_tab(0);
HXLINE( 363)		this->UI_options->resize(( (Float)(300) ),( (Float)(200) ));
HXLINE( 364)		this->UI_options->set_x(this->UI_box->x);
HXLINE( 365)		this->UI_options->set_y(( (Float)((::flixel::FlxG_obj::height - 300)) ));
HXLINE( 366)		this->add(this->UI_options);
HXLINE( 367)		this->add(this->UI_box);
HXLINE( 370)		this->addSongUI();
HXLINE( 371)		this->addSectionUI();
HXLINE( 372)		this->addNoteUI();
HXLINE( 374)		this->addOptionsUI();
HXLINE( 375)		this->addEventsUI();
HXLINE( 377)		this->regenerateLines();
HXLINE( 380)		this->updateGrid();
HXLINE( 382)		::haxe::Log_obj::trace(HX_("bruh",23,d0,1d,41),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),382,HX_("ChartingState",8d,e0,dd,9b),HX_("create",fc,66,0f,7c)));
HXLINE( 385)		this->add(this->sectionRenderes);
HXLINE( 386)		this->add(this->dummyArrow);
HXLINE( 387)		this->add(this->strumLine);
HXLINE( 388)		this->add(this->lines);
HXLINE( 389)		this->add(this->texts);
HXLINE( 390)		this->add(this->gridBlackLine);
HXLINE( 391)		this->add(this->curRenderedNotes);
HXLINE( 392)		this->add(this->curRenderedSustains);
HXLINE( 394)		::haxe::Log_obj::trace(HX_("bruh",23,d0,1d,41),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),394,HX_("ChartingState",8d,e0,dd,9b),HX_("create",fc,66,0f,7c)));
HXLINE( 397)		this->add(this->snapText);
HXLINE( 399)		::haxe::Log_obj::trace(HX_("bruh",23,d0,1d,41),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),399,HX_("ChartingState",8d,e0,dd,9b),HX_("create",fc,66,0f,7c)));
HXLINE( 401)		::haxe::Log_obj::trace(HX_("create",fc,66,0f,7c),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),401,HX_("ChartingState",8d,e0,dd,9b),HX_("create",fc,66,0f,7c)));
HXLINE( 403)		::TimingStruct_obj::clearTimings();
HXLINE( 405)		int currentIndex1 = 0;
HXLINE( 406)		{
HXLINE( 406)			int _g7 = 0;
HXDLIN( 406)			::Array< ::Dynamic> _g8 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 406)			while((_g7 < _g8->length)){
HXLINE( 406)				 ::Event i = _g8->__get(_g7).StaticCast<  ::Event >();
HXDLIN( 406)				_g7 = (_g7 + 1);
HXLINE( 408)				if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 410)					Float beat = i->position;
HXLINE( 412)					Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 414)					::TimingStruct_obj::addTiming(beat,( (Float)(i->value) ),endBeat,( (Float)(0) ));
HXLINE( 416)					if ((currentIndex1 != 0)) {
HXLINE( 418)						 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex1 - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 419)						data->endBeat = beat;
HXLINE( 420)						data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 421)						::TimingStruct_obj::AllTimings->__get(currentIndex1).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            					}
HXLINE( 424)					currentIndex1 = (currentIndex1 + 1);
            				}
            			}
            		}
HXLINE( 427)		this->super::create();
            	}


void ChartingState_obj::regenerateLines(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_433_regenerateLines)
HXLINE( 434)		while((this->lines->members->get_length() > 0)){
HXLINE( 436)			Dynamic( this->lines->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->destroy();
HXLINE( 437)			this->lines->members->remove(Dynamic( this->lines->members->__get(0)).StaticCast<  ::flixel::FlxSprite >());
            		}
HXLINE( 440)		while((this->texts->members->get_length() > 0)){
HXLINE( 442)			Dynamic( this->texts->members->__get(0)).StaticCast<  ::flixel::text::FlxText >()->destroy();
HXLINE( 443)			this->texts->members->remove(Dynamic( this->texts->members->__get(0)).StaticCast<  ::flixel::text::FlxText >());
            		}
HXLINE( 445)		::haxe::Log_obj::trace(HX_("removed lines and texts",3c,7f,17,5a),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),445,HX_("ChartingState",8d,e0,dd,9b),HX_("regenerateLines",f7,b6,ed,41)));
HXLINE( 447)		if (::hx::IsNotNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 448)			int _g = 0;
HXDLIN( 448)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 448)			while((_g < _g1->length)){
HXLINE( 448)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 448)				_g = (_g + 1);
HXLINE( 450)				 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtBeat(i->position);
HXLINE( 452)				Float posi = ( (Float)(0) );
HXLINE( 454)				if (::hx::IsNotNull( seg )) {
HXLINE( 456)					Float start = ((i->position - seg->startBeat) / (seg->bpm / ( (Float)(60) )));
HXLINE( 458)					posi = (seg->startTime + start);
            				}
HXLINE( 461)				Float pos = this->getYfromStrum((posi * ( (Float)(1000) )));
HXDLIN( 461)				Float pos1 = (pos * this->zoomFactor);
HXLINE( 463)				if ((pos1 < 0)) {
HXLINE( 464)					pos1 = ( (Float)(0) );
            				}
HXLINE( 466)				::String type = i->type;
HXLINE( 468)				::String text = (((i->name + HX_("\n",0a,00,00,00)) + type) + HX_("\n",0a,00,00,00));
HXDLIN( 468)				 ::flixel::text::FlxText text1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,-190,pos1,0,(text + ::Std_obj::string(i->value)),12,null());
HXLINE( 469)				 ::flixel::FlxSprite line =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,pos1,null());
HXDLIN( 469)				 ::flixel::FlxSprite line1 = line->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,-16776961,null(),null());
HXLINE( 471)				line1->set_alpha(((Float)0.2));
HXLINE( 473)				this->lines->add(line1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 474)				this->texts->add(text1).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 476)				this->add(line1);
HXLINE( 477)				this->add(text1);
            			}
            		}
HXLINE( 480)		{
HXLINE( 480)			 ::Dynamic filter = null();
HXDLIN( 480)			 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->sectionRenderes->members,filter);
HXDLIN( 480)			while(i->hasNext()){
HXLINE( 480)				 ::SectionRender i1 = i->next().StaticCast<  ::SectionRender >();
HXLINE( 482)				Float pos = this->getYfromStrum(( (Float)(i1->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) ));
HXDLIN( 482)				Float pos1 = (pos * this->zoomFactor);
HXLINE( 483)				i1->icon->set_y((pos1 - ( (Float)(75) )));
HXLINE( 485)				 ::flixel::FlxSprite line =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,pos1,null());
HXDLIN( 485)				 ::flixel::FlxSprite line1 = line->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,-16777216,null(),null());
HXLINE( 486)				line1->set_alpha(((Float)0.4));
HXLINE( 487)				this->lines->add(line1).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,regenerateLines,(void))

void ChartingState_obj::addGrid( ::Dynamic __o_divisions){
            		 ::Dynamic divisions = __o_divisions;
            		if (::hx::IsNull(__o_divisions)) divisions = 1;
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_492_addGrid)
HXLINE( 494)		Float h = (( (Float)(this->GRID_SIZE) ) / ( (Float)(divisions) ));
HXLINE( 495)		if ((::Math_obj::floor(h) != h)) {
HXLINE( 496)			h = ( (Float)(this->GRID_SIZE) );
            		}
HXLINE( 498)		this->remove(this->gridBG,null());
HXLINE( 499)		int _hx_tmp = this->GRID_SIZE;
HXDLIN( 499)		int _hx_tmp1 = ::Std_obj::_hx_int(h);
HXDLIN( 499)		this->gridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(_hx_tmp,_hx_tmp1,(this->GRID_SIZE * 8),(this->GRID_SIZE * 16),null(),null(),null());
HXLINE( 500)		 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 500)		Float _hx_tmp3 = this->gridBG->get_height();
HXDLIN( 500)		_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),500,HX_("ChartingState",8d,e0,dd,9b),HX_("addGrid",87,19,a9,80)));
HXLINE( 504)		::haxe::Log_obj::trace((HX_("height of ",70,ee,66,fd) + ::Math_obj::floor(::ChartingState_obj::lengthInSteps)),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),504,HX_("ChartingState",8d,e0,dd,9b),HX_("addGrid",87,19,a9,80)));
HXLINE( 516)		int totalHeight = 0;
HXLINE( 521)		this->remove(this->gridBlackLine,null());
HXLINE( 522)		 ::flixel::FlxSprite _hx_tmp4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->gridBG->get_width() / ( (Float)(2) )),null(),null());
HXDLIN( 522)		this->gridBlackLine = _hx_tmp4->makeGraphic(2,::Std_obj::_hx_int(( (Float)(::Math_obj::floor(::ChartingState_obj::lengthInSteps)) )),-16777216,null(),null());
HXLINE( 523)		this->add(this->gridBlackLine);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addGrid,(void))

 ::Event ChartingState_obj::containsName(::String name,::Array< ::Dynamic> events){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_535_containsName)
HXLINE( 536)		{
HXLINE( 536)			int _g = 0;
HXDLIN( 536)			while((_g < events->length)){
HXLINE( 536)				 ::Event i = events->__get(_g).StaticCast<  ::Event >();
HXDLIN( 536)				_g = (_g + 1);
HXLINE( 538)				::String thisName = ( (::String)(::Reflect_obj::field(i,HX_("name",4b,72,ff,48))) );
HXLINE( 540)				if ((thisName == name)) {
HXLINE( 541)					return i;
            				}
            			}
            		}
HXLINE( 543)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,containsName,return )

void ChartingState_obj::addEventsUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_571_addEventsUI)
HXLINE( 572)			::String _gthis1 = _gthis->currentSelectedEventName;
HXDLIN( 572)			Float _gthis2 = _gthis->currentEventPosition;
HXDLIN( 572)			Float pog = ::HelperFunctions_obj::truncateFloat(::Std_obj::parseFloat(_gthis->savedValue),3);
HXDLIN( 572)			 ::Event pog1 =  ::Event_obj::__alloc( HX_CTX ,_gthis1,_gthis2,pog,_gthis->savedType);
HXLINE( 574)			::haxe::Log_obj::trace((HX_("trying to save ",97,46,0a,74) + _gthis->currentSelectedEventName),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),574,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 576)			 ::Event obj = _gthis->containsName(pog1->name,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 579)			if ((pog1->name == HX_("",00,00,00,00))) {
HXLINE( 580)				return;
            			}
HXLINE( 582)			::haxe::Log_obj::trace(HX_("yeah we can save it",99,4d,9e,30),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),582,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 584)			if (::hx::IsNotNull( obj )) {
HXLINE( 585)				( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->remove(obj);
            			}
HXLINE( 586)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->push(pog1);
HXLINE( 588)			::haxe::Log_obj::trace(( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->length,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),588,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 590)			::TimingStruct_obj::clearTimings();
HXLINE( 592)			int currentIndex = 0;
HXLINE( 593)			{
HXLINE( 593)				int _g = 0;
HXDLIN( 593)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 593)				while((_g < _g1->length)){
HXLINE( 593)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 593)					_g = (_g + 1);
HXLINE( 595)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 596)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 597)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 598)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 600)					::haxe::Log_obj::trace(i->type,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),600,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 601)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 603)						Float beat = pos;
HXLINE( 605)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 607)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 609)						if ((currentIndex != 0)) {
HXLINE( 611)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 612)							data->endBeat = beat;
HXLINE( 613)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 614)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 617)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 621)			if ((pog1->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 622)				_gthis->recalculateAllSectionTimes();
            			}
HXLINE( 624)			_gthis->regenerateLines();
HXLINE( 626)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 628)			{
HXLINE( 628)				int _g2_current = 0;
HXDLIN( 628)				::Array< ::Dynamic> _g2_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 628)				while((_g2_current < _g2_array->length)){
HXLINE( 628)					 ::Event _g3_value = _g2_array->__get(_g2_current).StaticCast<  ::Event >();
HXDLIN( 628)					_g2_current = (_g2_current + 1);
HXDLIN( 628)					int _g3_key = (_g2_current - 1);
HXDLIN( 628)					int key = _g3_key;
HXDLIN( 628)					 ::Event value = _g3_value;
HXLINE( 629)					listofnames->push(value->name);
            				}
            			}
HXLINE( 632)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis3 = _gthis->listOfEvents;
HXDLIN( 632)			_gthis3->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 634)			_gthis->listOfEvents->set_selectedLabel(pog1->name);
HXLINE( 636)			::haxe::Log_obj::trace(HX_("end",db,03,4d,00),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),636,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_640_addEventsUI)
HXLINE( 642)			::String pog = (HX_("New Event ",c6,9a,0f,64) + ::HelperFunctions_obj::truncateFloat(_gthis->curDecimalBeat,3));
HXDLIN( 642)			Float pog1 = ::HelperFunctions_obj::truncateFloat(_gthis->curDecimalBeat,3);
HXDLIN( 642)			 ::Event pog2 =  ::Event_obj::__alloc( HX_CTX ,pog,pog1, ::Dynamic((::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic) + HX_("",00,00,00,00))),HX_("BPM Change",d1,e8,85,d1));
HXLINE( 644)			::haxe::Log_obj::trace((HX_("adding ",9f,4f,1f,97) + pog2->name),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),644,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 646)			 ::Event obj = _gthis->containsName(pog2->name,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 648)			if (::hx::IsNotNull( obj )) {
HXLINE( 649)				return;
            			}
HXLINE( 651)			::haxe::Log_obj::trace(HX_("yeah we can add it",3f,aa,e1,d8),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),651,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 653)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->push(pog2);
HXLINE( 655)			eventName->set_text(pog2->name);
HXLINE( 656)			eventType->set_selectedLabel(pog2->type);
HXLINE( 657)			eventValue->set_text(( (::String)(pog2->value) ));
HXLINE( 658)			eventPos->set_text((pog2->position + HX_("",00,00,00,00)));
HXLINE( 659)			_gthis->currentSelectedEventName = pog2->name;
HXLINE( 660)			_gthis->currentEventPosition = pog2->position;
HXLINE( 662)			_gthis->savedType = pog2->type;
HXLINE( 663)			_gthis->savedValue = ( (::String)(pog2->value) );
HXLINE( 665)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 667)			{
HXLINE( 667)				int _g_current = 0;
HXDLIN( 667)				::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 667)				while((_g_current < _g_array->length)){
HXLINE( 667)					 ::Event _g1_value = _g_array->__get(_g_current).StaticCast<  ::Event >();
HXDLIN( 667)					_g_current = (_g_current + 1);
HXDLIN( 667)					int _g1_key = (_g_current - 1);
HXDLIN( 667)					int key = _g1_key;
HXDLIN( 667)					 ::Event value = _g1_value;
HXLINE( 668)					listofnames->push(value->name);
            				}
            			}
HXLINE( 671)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis1 = _gthis->listOfEvents;
HXDLIN( 671)			_gthis1->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 673)			_gthis->listOfEvents->set_selectedLabel(pog2->name);
HXLINE( 675)			::TimingStruct_obj::clearTimings();
HXLINE( 677)			int currentIndex = 0;
HXLINE( 678)			{
HXLINE( 678)				int _g = 0;
HXDLIN( 678)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 678)				while((_g < _g1->length)){
HXLINE( 678)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 678)					_g = (_g + 1);
HXLINE( 680)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 681)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 682)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 683)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 685)					::haxe::Log_obj::trace(i->type,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),685,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 686)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 688)						Float beat = pos;
HXLINE( 690)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 692)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 694)						if ((currentIndex != 0)) {
HXLINE( 696)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 697)							data->endBeat = beat;
HXLINE( 698)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 699)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 702)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 705)			::haxe::Log_obj::trace(HX_("BPM CHANGES:",78,b7,42,2d),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),705,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 707)			{
HXLINE( 707)				int _g2 = 0;
HXDLIN( 707)				::Array< ::Dynamic> _g3 = ::TimingStruct_obj::AllTimings;
HXDLIN( 707)				while((_g2 < _g3->length)){
HXLINE( 707)					 ::TimingStruct i = _g3->__get(_g2).StaticCast<  ::TimingStruct >();
HXDLIN( 707)					_g2 = (_g2 + 1);
HXLINE( 708)					::haxe::Log_obj::trace(((((((i->bpm + HX_(" - START: ",55,a8,fb,f8)) + i->startBeat) + HX_(" - END: ",ce,26,68,2f)) + i->endBeat) + HX_(" - START-TIME: ",d1,13,6b,73)) + i->startTime),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),708,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
            				}
            			}
HXLINE( 710)			_gthis->recalculateAllSectionTimes();
HXLINE( 712)			_gthis->regenerateLines();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_2, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_716_addEventsUI)
HXLINE( 718)			 ::Dynamic eventRemove = ::haxe::Log_obj::trace;
HXDLIN( 718)			::String eventRemove1 = (HX_("lets see if we can remove ",68,ff,f9,75) + _gthis->listOfEvents->get_selectedLabel());
HXDLIN( 718)			eventRemove(eventRemove1,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),718,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 720)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 720)			::String obj = _gthis->listOfEvents->get_selectedLabel();
HXDLIN( 720)			 ::Event obj1 = _gthis1->containsName(obj,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 722)			::haxe::Log_obj::trace(obj1,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),722,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 724)			if (::hx::IsNull( obj1 )) {
HXLINE( 725)				return;
            			}
HXLINE( 727)			::haxe::Log_obj::trace(HX_("yeah we can remove it it",99,63,09,73),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),727,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 729)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->remove(obj1);
HXLINE( 731)			 ::Event firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
HXLINE( 733)			if (::hx::IsNull( firstEvent )) {
HXLINE( 735)				::Array< ::Dynamic> eventRemove = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 735)				eventRemove->push( ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)),HX_("BPM Change",d1,e8,85,d1)));
HXLINE( 736)				firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
            			}
HXLINE( 739)			eventName->set_text(firstEvent->name);
HXLINE( 740)			eventType->set_selectedLabel(firstEvent->type);
HXLINE( 741)			eventValue->set_text(( (::String)(firstEvent->value) ));
HXLINE( 742)			eventPos->set_text((firstEvent->position + HX_("",00,00,00,00)));
HXLINE( 743)			_gthis->currentSelectedEventName = firstEvent->name;
HXLINE( 744)			_gthis->currentEventPosition = firstEvent->position;
HXLINE( 746)			_gthis->savedType = firstEvent->type;
HXLINE( 747)			_gthis->savedValue = ( (::String)(firstEvent->value) );
HXLINE( 749)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 751)			{
HXLINE( 751)				int _g_current = 0;
HXDLIN( 751)				::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 751)				while((_g_current < _g_array->length)){
HXLINE( 751)					 ::Event _g1_value = _g_array->__get(_g_current).StaticCast<  ::Event >();
HXDLIN( 751)					_g_current = (_g_current + 1);
HXDLIN( 751)					int _g1_key = (_g_current - 1);
HXDLIN( 751)					int key = _g1_key;
HXDLIN( 751)					 ::Event value = _g1_value;
HXLINE( 752)					listofnames->push(value->name);
            				}
            			}
HXLINE( 755)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis2 = _gthis->listOfEvents;
HXDLIN( 755)			_gthis2->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 757)			_gthis->listOfEvents->set_selectedLabel(firstEvent->name);
HXLINE( 759)			::TimingStruct_obj::clearTimings();
HXLINE( 761)			int currentIndex = 0;
HXLINE( 762)			{
HXLINE( 762)				int _g = 0;
HXDLIN( 762)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 762)				while((_g < _g1->length)){
HXLINE( 762)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 762)					_g = (_g + 1);
HXLINE( 764)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 765)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 766)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 767)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 769)					::haxe::Log_obj::trace(i->type,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),769,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 770)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 772)						Float beat = pos;
HXLINE( 774)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 776)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 778)						if ((currentIndex != 0)) {
HXLINE( 780)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 781)							data->endBeat = beat;
HXLINE( 782)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 783)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 786)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 790)			_gthis->recalculateAllSectionTimes();
HXLINE( 792)			_gthis->regenerateLines();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_796_addEventsUI)
HXLINE( 797)			 ::Event obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 798)			if (::hx::IsNull( obj )) {
HXLINE( 799)				return;
            			}
HXLINE( 800)			_gthis->currentEventPosition = _gthis->curDecimalBeat;
HXLINE( 801)			obj->position = _gthis->currentEventPosition;
HXLINE( 802)			eventPos->set_text((_gthis->currentEventPosition + HX_("",00,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(1)
            		void _hx_run(::String name){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_853_addEventsUI)
HXLINE( 854)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 854)			::String event = _gthis->listOfEvents->get_selectedLabel();
HXDLIN( 854)			 ::Event event1 = _gthis1->containsName(event,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 856)			if (::hx::IsNull( event1 )) {
HXLINE( 857)				return;
            			}
HXLINE( 859)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 859)			::String _hx_tmp1 = (((HX_("selecting ",fa,81,7d,c9) + name) + HX_(" found: ",48,0d,5c,c0)) + ::Std_obj::string(event1));
HXDLIN( 859)			_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),859,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 861)			eventName->set_text(event1->name);
HXLINE( 862)			eventValue->set_text(( (::String)(event1->value) ));
HXLINE( 863)			eventPos->set_text((event1->position + HX_("",00,00,00,00)));
HXLINE( 864)			eventType->set_selectedLabel(event1->type);
HXLINE( 865)			_gthis->currentSelectedEventName = event1->name;
HXLINE( 866)			_gthis->currentEventPosition = event1->position;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(::String string,::String string2){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_870_addEventsUI)
HXLINE( 871)			::haxe::Log_obj::trace((string + HX_(" - value",1e,2f,b8,72)),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),871,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 872)			_gthis->savedValue = string;
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String type){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_877_addEventsUI)
HXLINE( 877)			_gthis->savedType = eventType->get_selectedLabel();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(::String string,::String string2){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_881_addEventsUI)
HXLINE( 882)			 ::Event obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 883)			if (::hx::IsNull( obj )) {
HXLINE( 885)				_gthis->currentSelectedEventName = string;
HXLINE( 886)				return;
            			}
HXLINE( 888)			obj = _gthis->containsName(string,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 889)			if (::hx::IsNotNull( obj )) {
HXLINE( 890)				return;
            			}
HXLINE( 891)			obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 892)			obj->name = string;
HXLINE( 893)			_gthis->currentSelectedEventName = string;
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_551_addEventsUI)
HXLINE( 550)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 552)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 554)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 557)		::String firstEvent = HX_("",00,00,00,00);
HXLINE( 559)		if ((::Lambda_obj::count(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic),null()) != 0)) {
HXLINE( 561)			firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >()->name;
            		}
HXLINE( 564)		 ::flixel::text::FlxText listLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,5,null(),HX_("List of Events",00,a9,f1,9c),null(),null());
HXLINE( 565)		 ::flixel::text::FlxText nameLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,5,null(),HX_("Event Name",51,cc,89,80),null(),null());
HXLINE( 566)		 ::flixel::addons::ui::FlxUIInputText eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,20,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 567)		 ::flixel::text::FlxText typeLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,45,null(),HX_("Type of Event",37,e6,4b,c6),null(),null());
HXLINE( 568)		 ::flixel::addons::ui::FlxUIDropDownMenu eventType =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,60,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_32,2),true),null(),null(),null(),null(),null());
HXLINE( 569)		 ::flixel::text::FlxText valueLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,45,null(),HX_("Event Value",ab,ea,3c,93),null(),null());
HXLINE( 570)		 ::flixel::addons::ui::FlxUIInputText eventValue =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,60,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 571)		 ::flixel::ui::FlxButton eventSave =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,155,HX_("Save Event",f7,de,33,df), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 638)		 ::flixel::text::FlxText posLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,85,null(),HX_("Event Position",af,75,21,14),null(),null());
HXLINE( 639)		 ::flixel::addons::ui::FlxUIInputText eventPos =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,100,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 640)		 ::flixel::ui::FlxButton eventAdd =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,95,155,HX_("Add Event",9b,64,c0,f9), ::Dynamic(new _hx_Closure_1(eventType,_gthis,eventName,eventValue,eventPos)));
HXLINE( 716)		 ::flixel::ui::FlxButton eventRemove =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,180,155,HX_("Remove Event",3e,37,09,d7), ::Dynamic(new _hx_Closure_2(eventType,_gthis,eventName,eventValue,eventPos)));
HXLINE( 796)		 ::flixel::ui::FlxButton updatePos =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,150,120,HX_("Update Pos",fd,ab,f0,d9), ::Dynamic(new _hx_Closure_3(_gthis,eventPos)));
HXLINE( 807)		::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 809)		 ::Event firstEventObject = null();
HXLINE( 811)		{
HXLINE( 811)			int _g = 0;
HXDLIN( 811)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 811)			while((_g < _g1->length)){
HXLINE( 811)				 ::Event event = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 811)				_g = (_g + 1);
HXLINE( 812)				::String name = ( (::String)(::Reflect_obj::field(event,HX_("name",4b,72,ff,48))) );
HXLINE( 813)				::String type = ( (::String)(::Reflect_obj::field(event,HX_("type",ba,f2,08,4d))) );
HXLINE( 814)				Float pos = ( (Float)(::Reflect_obj::field(event,HX_("position",a9,a0,fa,ca))) );
HXLINE( 815)				 ::Dynamic value = ::Reflect_obj::field(event,HX_("value",71,7f,b8,31));
HXLINE( 817)				::haxe::Log_obj::trace(value,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),817,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 819)				 ::Event eventt =  ::Event_obj::__alloc( HX_CTX ,name,pos,value,type);
HXLINE( 821)				this->chartEvents->push(eventt);
HXLINE( 822)				listofnames->push(name);
            			}
            		}
HXLINE( 825)		::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),this->chartEvents,::hx::paccDynamic);
HXLINE( 827)		if ((listofnames->length == 0)) {
HXLINE( 828)			listofnames->push(HX_("",00,00,00,00));
            		}
HXLINE( 830)		if ((( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->length != 0)) {
HXLINE( 831)			firstEventObject = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
            		}
HXLINE( 832)		::haxe::Log_obj::trace(HX_("bruh",23,d0,1d,41),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),832,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 835)		if ((firstEvent != HX_("",00,00,00,00))) {
HXLINE( 837)			::haxe::Log_obj::trace(firstEventObject,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),837,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 838)			eventName->set_text(firstEventObject->name);
HXLINE( 839)			::haxe::Log_obj::trace(HX_("bruh",23,d0,1d,41),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),839,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 840)			eventType->set_selectedLabel(firstEventObject->type);
HXLINE( 841)			::haxe::Log_obj::trace(HX_("bruh",23,d0,1d,41),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),841,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 842)			eventValue->set_text(( (::String)(firstEventObject->value) ));
HXLINE( 843)			::haxe::Log_obj::trace(HX_("bruh",23,d0,1d,41),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),843,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 844)			this->currentSelectedEventName = firstEventObject->name;
HXLINE( 845)			::haxe::Log_obj::trace(HX_("bruh",23,d0,1d,41),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),845,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 846)			this->currentEventPosition = firstEventObject->position;
HXLINE( 847)			::haxe::Log_obj::trace(HX_("bruh",23,d0,1d,41),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),847,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 848)			eventPos->set_text((this->currentEventPosition + HX_("",00,00,00,00)));
HXLINE( 849)			::haxe::Log_obj::trace(HX_("bruh",23,d0,1d,41),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),849,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
            		}
HXLINE( 852)		this->listOfEvents =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,20,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true), ::Dynamic(new _hx_Closure_4(eventType,_gthis,eventName,eventValue,eventPos)),null(),null(),null(),null());
HXLINE( 869)		eventValue->callback =  ::Dynamic(new _hx_Closure_5(_gthis));
HXLINE( 875)		eventType->callback =  ::Dynamic(new _hx_Closure_6(eventType,_gthis));
HXLINE( 880)		eventName->callback =  ::Dynamic(new _hx_Closure_7(_gthis));
HXLINE( 895)		::haxe::Log_obj::trace(HX_("bruh",23,d0,1d,41),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),895,HX_("ChartingState",8d,e0,dd,9b),HX_("addEventsUI",ee,88,4b,f2)));
HXLINE( 897)		this->Typeables->push(eventPos);
HXLINE( 898)		this->Typeables->push(eventValue);
HXLINE( 899)		this->Typeables->push(eventName);
HXLINE( 901)		 ::flixel::addons::ui::FlxUI tab_events =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_options,null(),null(),null(),null());
HXLINE( 902)		tab_events->name = HX_("Events",39,c3,fe,ca);
HXLINE( 903)		tab_events->add(posLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 904)		tab_events->add(valueLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 905)		tab_events->add(nameLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 906)		tab_events->add(listLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 907)		tab_events->add(typeLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 908)		tab_events->add(eventName).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 909)		tab_events->add(eventType).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 910)		tab_events->add(this->listOfEvents).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 911)		tab_events->add(eventValue).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 912)		tab_events->add(eventSave).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 913)		tab_events->add(eventAdd).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 914)		tab_events->add(eventRemove).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 915)		tab_events->add(eventPos).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 916)		tab_events->add(updatePos).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 917)		this->UI_options->addGroup(tab_events);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addEventsUI,(void))

void ChartingState_obj::addOptionsUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUICheckBox,hitsounds) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_928_addOptionsUI)
HXLINE( 928)			_gthis->playClaps = hitsounds->checked;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUICheckBox,check_mute_inst) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_934_addOptionsUI)
HXLINE( 935)			Float vol = ( (Float)(1) );
HXLINE( 937)			if (check_mute_inst->checked) {
HXLINE( 938)				vol = ( (Float)(0) );
            			}
HXLINE( 940)			::flixel::FlxG_obj::sound->music->set_volume(vol);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_947_addOptionsUI)
HXLINE( 948)			_gthis->defaultSnap = _gthis->check_snap->checked;
HXLINE( 949)			::haxe::Log_obj::trace(HX_("CHECKED!",3a,9f,7d,06),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),949,HX_("ChartingState",8d,e0,dd,9b),HX_("addOptionsUI",d1,b2,cc,81)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_921_addOptionsUI)
HXLINE( 920)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 924)		 ::flixel::addons::ui::FlxUICheckBox hitsounds =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,60,null(),null(),HX_("Play hitsounds",4b,26,03,51),100,null(),null());
HXLINE( 925)		hitsounds->set_checked(false);
HXLINE( 926)		hitsounds->callback =  ::Dynamic(new _hx_Closure_0(_gthis,hitsounds));
HXLINE( 931)		 ::flixel::addons::ui::FlxUICheckBox check_mute_inst =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,90,null(),null(),HX_("Mute Instrumental",79,89,01,0a),100,null(),null());
HXLINE( 932)		check_mute_inst->set_checked(false);
HXLINE( 933)		check_mute_inst->callback =  ::Dynamic(new _hx_Closure_1(check_mute_inst));
HXLINE( 943)		this->check_snap =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,80,25,null(),null(),HX_("Snap to grid",d5,83,5b,e7),100,null(),null());
HXLINE( 944)		this->check_snap->set_checked(this->defaultSnap);
HXLINE( 946)		this->check_snap->callback =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE( 952)		 ::flixel::addons::ui::FlxUI tab_options =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_options,null(),null(),null(),null());
HXLINE( 953)		tab_options->name = HX_("Options",3e,5b,4f,ad);
HXLINE( 954)		tab_options->add(hitsounds).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 955)		tab_options->add(check_mute_inst).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 956)		this->UI_options->addGroup(tab_options);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addOptionsUI,(void))

void ChartingState_obj::addSongUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::addons::ui::FlxUICheckBox,check_voices) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_968_addSongUI)
HXLINE( 969)			::ChartingState_obj::_song->__SetField(HX_("needsVoices",be,05,e9,0d),check_voices->checked,::hx::paccDynamic);
HXLINE( 970)			::haxe::Log_obj::trace(HX_("CHECKED!",3a,9f,7d,06),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),970,HX_("ChartingState",8d,e0,dd,9b),HX_("addSongUI",6a,02,ad,e5)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_975_addSongUI)
HXLINE( 975)			_gthis->saveLevel();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_980_addSongUI)
HXLINE( 980)			_gthis->loadSong(( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_985_addSongUI)
HXLINE( 985)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 985)			_gthis1->loadJson(( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_990_addSongUI)
HXLINE( 991)			{
HXLINE( 991)				int _g = 0;
HXDLIN( 991)				int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN( 991)				while((_g < _g1)){
HXLINE( 991)					_g = (_g + 1);
HXDLIN( 991)					int ii = (_g - 1);
HXLINE( 993)					{
HXLINE( 993)						int _g1 = 0;
HXDLIN( 993)						int _g2 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(ii)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN( 993)						while((_g1 < _g2)){
HXLINE( 993)							_g1 = (_g1 + 1);
HXDLIN( 993)							int i = (_g1 - 1);
HXLINE( 995)							 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(ii)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
            						}
            					}
            				}
            			}
HXLINE( 998)			_gthis->resetSection(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_5, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDialstep, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDial, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDialms) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1046_addSongUI)
HXLINE(1046)			 ::ChartingState _gthis1 = _gthis;
HXDLIN(1046)			int shiftNoteButton = ::Std_obj::_hx_int(stepperShiftNoteDial->value);
HXDLIN(1046)			int shiftNoteButton1 = ::Std_obj::_hx_int(stepperShiftNoteDialstep->value);
HXDLIN(1046)			_gthis1->shiftNotes(shiftNoteButton,shiftNoteButton1,::Std_obj::_hx_int(stepperShiftNoteDialms->value));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1056_addSongUI)
HXLINE(1056)			::Array< ::String > characters1 = characters;
HXDLIN(1056)			 ::Dynamic player1DropDown = ::Std_obj::parseInt(character);
HXDLIN(1056)			::ChartingState_obj::_song->__SetField(HX_("player1",b0,09,15,8a),characters1->__get(( (int)(player1DropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1064_addSongUI)
HXLINE(1064)			::Array< ::String > characters1 = characters;
HXDLIN(1064)			 ::Dynamic player2DropDown = ::Std_obj::parseInt(character);
HXDLIN(1064)			::ChartingState_obj::_song->__SetField(HX_("player2",b1,09,15,8a),characters1->__get(( (int)(player2DropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8,::Array< ::String >,gfVersions) HXARGC(1)
            		void _hx_run(::String gfVersion){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1072_addSongUI)
HXLINE(1072)			::Array< ::String > gfVersions1 = gfVersions;
HXDLIN(1072)			 ::Dynamic gfVersionDropDown = ::Std_obj::parseInt(gfVersion);
HXDLIN(1072)			::ChartingState_obj::_song->__SetField(HX_("gfVersion",b9,c6,7d,f3),gfVersions1->__get(( (int)(gfVersionDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9,::Array< ::String >,stages) HXARGC(1)
            		void _hx_run(::String stage){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1080_addSongUI)
HXLINE(1080)			::Array< ::String > stages1 = stages;
HXDLIN(1080)			 ::Dynamic stageDropDown = ::Std_obj::parseInt(stage);
HXDLIN(1080)			::ChartingState_obj::_song->__SetField(HX_("stage",be,6a,0b,84),stages1->__get(( (int)(stageDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10,::Array< ::String >,noteStyles) HXARGC(1)
            		void _hx_run(::String noteStyle){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1088_addSongUI)
HXLINE(1088)			::Array< ::String > noteStyles1 = noteStyles;
HXDLIN(1088)			 ::Dynamic noteStyleDropDown = ::Std_obj::parseInt(noteStyle);
HXDLIN(1088)			::ChartingState_obj::_song->__SetField(HX_("noteStyle",df,ef,aa,c1),noteStyles1->__get(( (int)(noteStyleDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_960_addSongUI)
HXLINE( 959)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 961)		 ::flixel::addons::ui::FlxUIInputText UI_songTitle =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,10,70,( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),8,null(),null(),null());
HXLINE( 962)		this->typingShit = UI_songTitle;
HXLINE( 964)		 ::flixel::addons::ui::FlxUICheckBox check_voices =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,25,null(),null(),HX_("Has voice track",b7,2b,b0,eb),100,null(),null());
HXLINE( 965)		check_voices->set_checked(( (bool)(::ChartingState_obj::_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) ));
HXLINE( 967)		check_voices->callback =  ::Dynamic(new _hx_Closure_0(check_voices));
HXLINE( 973)		 ::flixel::ui::FlxButton saveButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,8,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 978)		Float saveButton1 = saveButton->x;
HXDLIN( 978)		Float reloadSong = ((saveButton1 + saveButton->get_width()) + 10);
HXDLIN( 978)		 ::flixel::ui::FlxButton reloadSong1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong,saveButton->y,HX_("Reload Audio",cf,9c,c1,ed), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 983)		 ::flixel::ui::FlxButton reloadSongJson =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong1->x,(saveButton->y + 30),HX_("Reload JSON",2f,1c,a5,4a), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 989)		 ::flixel::ui::FlxButton restart =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,140,HX_("Reset Chart",8d,3f,ff,f3), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE(1001)		 ::flixel::ui::FlxButton loadAutosaveBtn =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSongJson->x,(reloadSongJson->y + 30),HX_("load autosave",66,5f,5a,83),this->loadAutosave_dyn());
HXLINE(1002)		 ::flixel::addons::ui::FlxUINumericStepper stepperBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,65,((Float)0.1),1,((Float)1.0),((Float)5000.0),1,null(),null(),null(),null(),null());
HXLINE(1003)		stepperBPM->set_value(::Conductor_obj::bpm);
HXLINE(1004)		stepperBPM->name = HX_("song_bpm",35,36,15,42);
HXLINE(1006)		 ::flixel::text::FlxText stepperBPMLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,65,null(),HX_("BPM",bf,5a,32,00),null(),null());
HXLINE(1008)		 ::flixel::addons::ui::FlxUINumericStepper stepperSpeed =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,80,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1009)		stepperSpeed->set_value(( (Float)(::ChartingState_obj::_song->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE(1010)		stepperSpeed->name = HX_("song_speed",5d,10,41,a4);
HXLINE(1012)		 ::flixel::text::FlxText stepperSpeedLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,80,null(),HX_("Scroll Speed",34,bf,42,cb),null(),null());
HXLINE(1014)		 ::flixel::addons::ui::FlxUINumericStepper stepperVocalVol =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,95,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1016)		if (!(::PlayState_obj::isSM)) {
HXLINE(1017)			stepperVocalVol->set_value(this->vocals->_volume);
            		}
            		else {
HXLINE(1019)			stepperVocalVol->set_value(( (Float)(1) ));
            		}
HXLINE(1023)		stepperVocalVol->name = HX_("song_vocalvol",a8,3c,96,f8);
HXLINE(1025)		 ::flixel::text::FlxText stepperVocalVolLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,95,null(),HX_("Vocal Volume",65,14,e3,28),null(),null());
HXLINE(1027)		 ::flixel::addons::ui::FlxUINumericStepper stepperSongVol =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,110,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1028)		stepperSongVol->set_value(::flixel::FlxG_obj::sound->music->_volume);
HXLINE(1029)		stepperSongVol->name = HX_("song_instvol",63,a1,f2,af);
HXLINE(1031)		 ::flixel::text::FlxText stepperSongVolLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,110,null(),HX_("Instrumental Volume",68,1c,6d,b8),null(),null());
HXLINE(1034)		 ::flixel::text::FlxText shiftNoteDialLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,245,null(),HX_("Shift Note FWD by (Section)",60,13,78,8d),null(),null());
HXLINE(1035)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDial =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,260,1,0,-1000,1000,0,null(),null(),null(),null(),null());
HXLINE(1036)		stepperShiftNoteDial->name = HX_("song_shiftnote",4a,09,de,10);
HXLINE(1037)		 ::flixel::text::FlxText shiftNoteDialLabel2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,275,null(),HX_("Shift Note FWD by (Step)",21,fd,77,43),null(),null());
HXLINE(1038)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDialstep =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,290,1,0,-1000,1000,0,null(),null(),null(),null(),null());
HXLINE(1039)		stepperShiftNoteDialstep->name = HX_("song_shiftnotems",30,cf,6a,8b);
HXLINE(1040)		 ::flixel::text::FlxText shiftNoteDialLabel3 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,305,null(),HX_("Shift Note FWD by (ms)",e7,2a,fe,de),null(),null());
HXLINE(1041)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDialms =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,320,1,0,-1000,1000,2,null(),null(),null(),null(),null());
HXLINE(1042)		stepperShiftNoteDialms->name = HX_("song_shiftnotems",30,cf,6a,8b);
HXLINE(1044)		 ::flixel::ui::FlxButton shiftNoteButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,335,HX_("Shift",62,5c,50,0f), ::Dynamic(new _hx_Closure_5(_gthis,stepperShiftNoteDialstep,stepperShiftNoteDial,stepperShiftNoteDialms)));
HXLINE(1049)		::String library = null();
HXDLIN(1049)		::Array< ::String > characters = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/characterList",c2,06,08,81) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(1050)		::String library1 = null();
HXDLIN(1050)		::Array< ::String > gfVersions = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/gfVersionList",d2,b9,ee,44) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE(1051)		::String library2 = null();
HXDLIN(1051)		::Array< ::String > stages = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/stageList",d7,5a,0b,5e) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library2));
HXLINE(1052)		::String library3 = null();
HXDLIN(1052)		::Array< ::String > noteStyles = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/noteStyleList",f8,6d,9e,7c) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library3));
HXLINE(1054)		 ::flixel::addons::ui::FlxUIDropDownMenu player1DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_6(characters)),null(),null(),null(),null());
HXLINE(1058)		player1DropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE(1060)		 ::flixel::text::FlxText player1Label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,80,64,HX_("Player 1",d2,1d,05,22),null(),null());
HXLINE(1062)		 ::flixel::addons::ui::FlxUIDropDownMenu player2DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_7(characters)),null(),null(),null(),null());
HXLINE(1066)		player2DropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE(1068)		 ::flixel::text::FlxText player2Label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,140,80,64,HX_("Player 2",d3,1d,05,22),null(),null());
HXLINE(1070)		 ::flixel::addons::ui::FlxUIDropDownMenu gfVersionDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,200,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(gfVersions,true), ::Dynamic(new _hx_Closure_8(gfVersions)),null(),null(),null(),null());
HXLINE(1074)		gfVersionDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) ));
HXLINE(1076)		 ::flixel::text::FlxText gfVersionLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,180,64,HX_("Girlfriend",da,95,f9,8e),null(),null());
HXLINE(1078)		 ::flixel::addons::ui::FlxUIDropDownMenu stageDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,200,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(stages,true), ::Dynamic(new _hx_Closure_9(stages)),null(),null(),null(),null());
HXLINE(1082)		stageDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE(1084)		 ::flixel::text::FlxText stageLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,140,180,64,HX_("Stage",9e,da,38,17),null(),null());
HXLINE(1086)		 ::flixel::addons::ui::FlxUIDropDownMenu noteStyleDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,300,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(noteStyles,true), ::Dynamic(new _hx_Closure_10(noteStyles)),null(),null(),null(),null());
HXLINE(1090)		noteStyleDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) ));
HXLINE(1092)		 ::flixel::text::FlxText noteStyleLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,280,64,HX_("Note Skin",6b,8d,33,f0),null(),null());
HXLINE(1095)		 ::flixel::addons::ui::FlxUI tab_group_song =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1096)		tab_group_song->name = HX_("Song",f5,4f,31,37);
HXLINE(1097)		tab_group_song->add(UI_songTitle).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1098)		tab_group_song->add(restart).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1099)		tab_group_song->add(check_voices).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1101)		tab_group_song->add(saveButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1102)		tab_group_song->add(reloadSong1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1103)		tab_group_song->add(reloadSongJson).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1104)		tab_group_song->add(loadAutosaveBtn).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1105)		tab_group_song->add(stepperBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1106)		tab_group_song->add(stepperBPMLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1107)		tab_group_song->add(stepperSpeed).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1108)		tab_group_song->add(stepperSpeedLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1109)		tab_group_song->add(stepperVocalVol).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1110)		tab_group_song->add(stepperVocalVolLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1111)		tab_group_song->add(stepperSongVol).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1112)		tab_group_song->add(stepperSongVolLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1113)		tab_group_song->add(shiftNoteDialLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1114)		tab_group_song->add(stepperShiftNoteDial).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1115)		tab_group_song->add(shiftNoteDialLabel2).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1116)		tab_group_song->add(stepperShiftNoteDialstep).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1117)		tab_group_song->add(shiftNoteDialLabel3).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1118)		tab_group_song->add(stepperShiftNoteDialms).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1119)		tab_group_song->add(shiftNoteButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1122)		 ::flixel::addons::ui::FlxUI tab_group_assets =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1123)		tab_group_assets->name = HX_("Assets",a3,bc,97,80);
HXLINE(1124)		tab_group_assets->add(noteStyleDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1125)		tab_group_assets->add(noteStyleLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1126)		tab_group_assets->add(gfVersionDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1127)		tab_group_assets->add(gfVersionLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1128)		tab_group_assets->add(stageDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1129)		tab_group_assets->add(stageLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1130)		tab_group_assets->add(player1DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1131)		tab_group_assets->add(player2DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1132)		tab_group_assets->add(player1Label).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1133)		tab_group_assets->add(player2Label).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1135)		this->UI_box->addGroup(tab_group_song);
HXLINE(1136)		this->UI_box->addGroup(tab_group_assets);
HXLINE(1138)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,280,0,1,1);
HXLINE(1139)		this->add(this->camFollow);
HXLINE(1141)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSongUI,(void))

void ChartingState_obj::addSectionUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperCopy) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1161_addSectionUI)
HXLINE(1161)			 ::ChartingState _gthis1 = _gthis;
HXDLIN(1161)			_gthis1->copySection(::Std_obj::_hx_int(stepperCopy->value));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1165_addSectionUI)
HXLINE(1166)			::PlayState_obj::SONG = ::ChartingState_obj::_song;
HXLINE(1167)			{
HXLINE(1167)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1167)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(1168)			if (!(::PlayState_obj::isSM)) {
HXLINE(1169)				 ::flixel::_hx_system::FlxSound _this = _gthis->vocals;
HXDLIN(1169)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(1170)			::PlayState_obj::startTime = ( (Float)(_gthis->lastUpdatedSection->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) );
HXLINE(1171)			{
HXLINE(1171)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(1171)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1171)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1175_addSectionUI)
HXLINE(1177)			 ::Dynamic sect = _gthis->lastUpdatedSection;
HXLINE(1179)			if (::hx::IsNull( sect )) {
HXLINE(1180)				return;
            			}
HXLINE(1182)			{
HXLINE(1182)				int _g = 0;
HXDLIN(1182)				int _g1 = ( (::Array< ::Dynamic>)(sect->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(1182)				while((_g < _g1)){
HXLINE(1182)					_g = (_g + 1);
HXDLIN(1182)					int i = (_g - 1);
HXLINE(1184)					::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic(sect->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE(1185)					if (::hx::IsLess( note->__get(1),4 )) {
HXLINE(1186)						::cpp::VirtualArray note1 = note;
HXDLIN(1186)						int swapSection = 1;
HXDLIN(1186)						note1->set(swapSection,(note1->__get(swapSection) + 4));
            					}
            					else {
HXLINE(1188)						::cpp::VirtualArray note1 = note;
HXDLIN(1188)						int swapSection = 1;
HXDLIN(1188)						note1->set(swapSection,(note1->__get(swapSection) - 4));
            					}
HXLINE(1189)					 ::Dynamic(sect->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__SetItem(i,note);
HXLINE(1190)					_gthis->updateGrid();
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1193_addSectionUI)
HXLINE(1194)			 ::Dynamic sect = _gthis->lastUpdatedSection;
HXLINE(1196)			::haxe::Log_obj::trace(sect,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),1196,HX_("ChartingState",8d,e0,dd,9b),HX_("addSectionUI",18,75,a5,87)));
HXLINE(1198)			if (::hx::IsNull( sect )) {
HXLINE(1199)				return;
            			}
HXLINE(1201)			sect->__SetField(HX_("mustHitSection",3b,5f,87,62),_gthis->check_mustHitSection->checked,::hx::paccDynamic);
HXLINE(1203)			{
HXLINE(1203)				 ::Dynamic filter = null();
HXDLIN(1203)				 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->sectionRenderes->members,filter);
HXDLIN(1203)				while(i->hasNext()){
HXLINE(1203)					 ::SectionRender i1 = i->next().StaticCast<  ::SectionRender >();
HXLINE(1205)					if (::hx::IsEq( i1->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),sect->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(1207)						Float cachedY = i1->icon->y;
HXLINE(1208)						_gthis->remove(i1->icon,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1209)						 ::flixel::FlxSprite sectionicon;
HXDLIN(1209)						if (_gthis->check_mustHitSection->checked) {
HXLINE(1209)							sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            						}
            						else {
HXLINE(1209)							sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            						}
HXLINE(1210)						sectionicon->set_x(( (Float)(-95) ));
HXLINE(1211)						sectionicon->set_y(cachedY);
HXLINE(1212)						sectionicon->setGraphicSize(0,45);
HXLINE(1214)						i1->icon = sectionicon;
HXLINE(1215)						i1->lastUpdated = ( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1217)						_gthis->add(sectionicon).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1227_addSectionUI)
HXLINE(1228)			 ::Dynamic section = _gthis->getSectionByTime(::Conductor_obj::songPosition,null());
HXLINE(1230)			if (::hx::IsNull( section )) {
HXLINE(1231)				return;
            			}
HXLINE(1233)			_gthis->check_mustHitSection->set_checked(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(1234)			_gthis->check_altAnim->set_checked(( (bool)(section->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1151_addSectionUI)
HXLINE(1150)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1152)		 ::flixel::addons::ui::FlxUI tab_group_section =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1153)		tab_group_section->name = HX_("Section",c5,2d,29,2b);
HXLINE(1156)		 ::flixel::addons::ui::FlxUINumericStepper stepperCopy =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,110,132,1,1,-999,999,0,null(),null(),null(),null(),null());
HXLINE(1157)		 ::flixel::text::FlxText stepperCopyLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,174,132,null(),HX_("sections back",99,e8,ca,16),null(),null());
HXLINE(1159)		 ::flixel::ui::FlxButton copyButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,130,HX_("Copy last section",46,61,ca,99), ::Dynamic(new _hx_Closure_0(_gthis,stepperCopy)));
HXLINE(1164)		 ::flixel::ui::FlxButton clearSectionButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,150,HX_("Clear Section",12,08,13,f3),this->clearSection_dyn());
HXLINE(1165)		 ::flixel::ui::FlxButton startSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,85,HX_("Play Here",9c,91,40,cc), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(1174)		 ::flixel::ui::FlxButton swapSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,170,HX_("Swap Section",58,33,c1,af), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(1193)		this->check_mustHitSection =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,30,null(),null(),HX_("Camera Points to P1?",bb,77,df,54),100,null(), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE(1221)		this->check_mustHitSection->set_checked(true);
HXLINE(1224)		this->check_altAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,340,null(),null(),HX_("Alternate Animation",5e,98,41,fc),100,null(),null());
HXLINE(1225)		this->check_altAnim->name = HX_("check_altAnim",23,ee,53,2e);
HXLINE(1227)		 ::flixel::ui::FlxButton refresh =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,60,HX_("Refresh Section",60,26,aa,d5), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE(1237)		tab_group_section->add(refresh).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1238)		tab_group_section->add(stepperCopy).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1239)		tab_group_section->add(stepperCopyLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1240)		tab_group_section->add(this->check_mustHitSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1241)		tab_group_section->add(this->check_altAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1242)		tab_group_section->add(copyButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1243)		tab_group_section->add(clearSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1244)		tab_group_section->add(swapSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1245)		tab_group_section->add(startSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1247)		this->UI_box->addGroup(tab_group_section);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSectionUI,(void))

void ChartingState_obj::addNoteUI(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1255_addNoteUI)
HXLINE(1256)		this->tab_group_note =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1257)		this->tab_group_note->name = HX_("Note",12,44,e3,33);
HXLINE(1259)		this->writingNotesText =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,20,100,0,HX_("",00,00,00,00),null(),null());
HXLINE(1260)		this->writingNotesText->setFormat(HX_("Arial",23,09,b6,b8),20,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1262)		this->stepperSusLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,10,(::Conductor_obj::stepCrochet / ( (Float)(2) )),0,0,((::Conductor_obj::stepCrochet * ( (Float)(16) )) * ( (Float)(4) )),null(),null(),null(),null(),null(),null());
HXLINE(1263)		this->stepperSusLength->set_value(( (Float)(0) ));
HXLINE(1264)		this->stepperSusLength->name = HX_("note_susLength",8a,6b,51,4b);
HXLINE(1266)		 ::flixel::text::FlxText stepperSusLengthLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,10,null(),HX_("Note Sustain Length",51,bb,65,f7),null(),null());
HXLINE(1268)		 ::flixel::ui::FlxButton applyLength =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,100,HX_("Apply Data",5c,22,e4,a8),null());
HXLINE(1270)		this->tab_group_note->add(this->stepperSusLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1271)		this->tab_group_note->add(stepperSusLengthLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1272)		this->tab_group_note->add(applyLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1274)		this->UI_box->addGroup(this->tab_group_note);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addNoteUI,(void))

void ChartingState_obj::loadSong(::String daSong){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1329_loadSong)
HXLINE(1330)			if (!(::PlayState_obj::isSM)) {
HXLINE(1331)				_gthis->vocals->pause();
            			}
HXLINE(1332)			::flixel::FlxG_obj::sound->music->pause();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1292_loadSong)
HXLINE(1291)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1293)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1295)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1295)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1299)		if (::PlayState_obj::isSM) {
HXLINE(1301)			::haxe::Log_obj::trace((((HX_("Loading ",44,9a,33,a5) + ::PlayState_obj::pathToSm) + HX_("/",2f,00,00,00)) + ::PlayState_obj::sm->header->MUSIC),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),1301,HX_("ChartingState",8d,e0,dd,9b),HX_("loadSong",1b,f5,f7,bc)));
HXLINE(1302)			 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(((::PlayState_obj::pathToSm + HX_("/",2f,00,00,00)) + ::PlayState_obj::sm->header->MUSIC));
HXLINE(1303)			 ::openfl::media::Sound sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1304)			sound->loadCompressedDataFromByteArray(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytesData(bytes->b),bytes->length);
HXLINE(1305)			::flixel::FlxG_obj::sound->playMusic(sound,null(),null(),null());
            		}
            		else {
HXLINE(1308)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1308)			::String songLowercase = ::StringTools_obj::replace(daSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1308)			::String _hx_switch_0 = songLowercase;
            			if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1308)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1308)				goto _hx_goto_60;
            			}
            			if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1308)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1308)				goto _hx_goto_60;
            			}
            			_hx_goto_60:;
HXDLIN(1308)			_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),((Float)0.6),null(),null());
            		}
HXLINE(1315)		if (::PlayState_obj::isSM) {
HXLINE(1316)			this->vocals = null();
            		}
            		else {
HXLINE(1318)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1318)			::String songLowercase = ::StringTools_obj::replace(daSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1318)			::String _hx_switch_1 = songLowercase;
            			if (  (_hx_switch_1==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1318)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1318)				goto _hx_goto_61;
            			}
            			if (  (_hx_switch_1==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1318)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1318)				goto _hx_goto_61;
            			}
            			_hx_goto_61:;
HXDLIN(1318)			this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            		}
HXLINE(1322)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1324)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1325)		if (!(::PlayState_obj::isSM)) {
HXLINE(1326)			this->vocals->pause();
            		}
HXLINE(1328)		::flixel::FlxG_obj::sound->music->onComplete =  ::Dynamic(new _hx_Closure_0(_gthis));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadSong,(void))

void ChartingState_obj::generateUI(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1337_generateUI)
HXLINE(1338)		while((this->bullshitUI->members->get_length() > 0)){
HXLINE(1340)			this->bullshitUI->remove(Dynamic( this->bullshitUI->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(1344)		 ::flixel::text::FlxText title =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->UI_box->x + 20),(this->UI_box->y + 20),0,null(),null(),null());
HXLINE(1345)		this->bullshitUI->add(title).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateUI,(void))

void ChartingState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1357_getEvent)
HXDLIN(1357)		if ((id == HX_("click_check_box",dd,c1,1e,a8))) {
HXLINE(1359)			 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(sender) );
HXLINE(1360)			::String label = check->getLabel()->text;
HXLINE(1361)			if ((label == HX_("Alternate Animation",5e,98,41,fc))) {
HXLINE(1364)				this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("altAnim",da,f3,f2,e5),check->checked,::hx::paccDynamic);
            			}
            		}
            		else {
HXLINE(1367)			bool _hx_tmp;
HXDLIN(1367)			if ((id == HX_("change_numeric_stepper",50,0a,cc,bb))) {
HXLINE(1367)				_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUINumericStepper >());
            			}
            			else {
HXLINE(1367)				_hx_tmp = false;
            			}
HXDLIN(1367)			if (_hx_tmp) {
HXLINE(1369)				 ::flixel::addons::ui::FlxUINumericStepper nums = ( ( ::flixel::addons::ui::FlxUINumericStepper)(sender) );
HXLINE(1370)				::String wname = nums->name;
HXLINE(1373)				::String _hx_switch_0 = wname;
            				if (  (_hx_switch_0==HX_("divisions",a6,2a,2c,7f)) ){
HXLINE(1420)					this->subDivisions = nums->value;
HXLINE(1421)					this->updateGrid();
HXLINE(1419)					goto _hx_goto_66;
            				}
            				if (  (_hx_switch_0==HX_("note_susLength",8a,6b,51,4b)) ){
HXLINE(1394)					if (::hx::IsNull( this->curSelectedNote )) {
HXLINE(1395)						return;
            					}
HXLINE(1397)					if ((nums->value <= 0)) {
HXLINE(1398)						nums->set_value(( (Float)(0) ));
            					}
HXLINE(1399)					this->curSelectedNote->set(2,nums->value);
HXLINE(1400)					this->updateGrid();
HXLINE(1393)					goto _hx_goto_66;
            				}
            				if (  (_hx_switch_0==HX_("section_bpm",45,60,97,44)) ){
HXLINE(1403)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1404)						nums->set_value(((Float)0.1));
            					}
HXLINE(1405)					this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("bpm",df,be,4a,00),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE(1406)					this->updateGrid();
HXLINE(1402)					goto _hx_goto_66;
            				}
            				if (  (_hx_switch_0==HX_("section_length",40,57,01,c1)) ){
HXLINE(1376)					if ((nums->value <= 4)) {
HXLINE(1377)						nums->set_value(( (Float)(4) ));
            					}
HXLINE(1378)					this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("lengthInSteps",3c,ed,41,db),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE(1379)					this->updateGrid();
HXLINE(1375)					goto _hx_goto_66;
            				}
            				if (  (_hx_switch_0==HX_("song_bpm",35,36,15,42)) ){
HXLINE(1387)					if ((nums->value <= 0)) {
HXLINE(1388)						nums->set_value(( (Float)(1) ));
            					}
HXLINE(1389)					this->tempBpm = ( (Float)(::Std_obj::_hx_int(nums->value)) );
HXLINE(1390)					::Conductor_obj::mapBPMChanges(::ChartingState_obj::_song);
HXLINE(1391)					::Conductor_obj::changeBPM(( (Float)(::Std_obj::_hx_int(nums->value)) ),null());
HXLINE(1386)					goto _hx_goto_66;
            				}
            				if (  (_hx_switch_0==HX_("song_instvol",63,a1,f2,af)) ){
HXLINE(1415)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1416)						nums->set_value(((Float)0.1));
            					}
HXLINE(1417)					::flixel::FlxG_obj::sound->music->set_volume(nums->value);
HXLINE(1414)					goto _hx_goto_66;
            				}
            				if (  (_hx_switch_0==HX_("song_speed",5d,10,41,a4)) ){
HXLINE(1382)					if ((nums->value <= 0)) {
HXLINE(1383)						nums->set_value(( (Float)(0) ));
            					}
HXLINE(1384)					::ChartingState_obj::_song->__SetField(HX_("speed",87,97,69,81),nums->value,::hx::paccDynamic);
HXLINE(1381)					goto _hx_goto_66;
            				}
            				if (  (_hx_switch_0==HX_("song_vocalvol",a8,3c,96,f8)) ){
HXLINE(1409)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1410)						nums->set_value(((Float)0.1));
            					}
HXLINE(1411)					if (!(::PlayState_obj::isSM)) {
HXLINE(1412)						this->vocals->set_volume(nums->value);
            					}
HXLINE(1408)					goto _hx_goto_66;
            				}
            				_hx_goto_66:;
            			}
            		}
            	}


Float ChartingState_obj::stepStartTime(int step){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1443_stepStartTime)
HXDLIN(1443)		return ((::Conductor_obj::bpm / (( (Float)(step) ) / ( (Float)(4) ))) / ( (Float)(60) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,stepStartTime,return )

Float ChartingState_obj::sectionStartTime( ::Dynamic __o_customIndex){
            		 ::Dynamic customIndex = __o_customIndex;
            		if (::hx::IsNull(__o_customIndex)) customIndex = -1;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1447_sectionStartTime)
HXLINE(1448)		if (::hx::IsEq( customIndex,-1 )) {
HXLINE(1449)			customIndex = this->curSection;
            		}
HXLINE(1450)		Float daBPM = ::Conductor_obj::bpm;
HXLINE(1451)		Float daPos = ( (Float)(0) );
HXLINE(1452)		{
HXLINE(1452)			int _g = 0;
HXDLIN(1452)			 ::Dynamic _g1 = customIndex;
HXDLIN(1452)			while(::hx::IsLess( _g,_g1 )){
HXLINE(1452)				_g = (_g + 1);
HXDLIN(1452)				int i = (_g - 1);
HXLINE(1454)				daPos = (daPos + (( (Float)(4) ) * (( (Float)(60000) ) / daBPM)));
            			}
            		}
HXLINE(1456)		return daPos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,sectionStartTime,return )

void ChartingState_obj::resizeEverything(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(1)
            		void _hx_run( ::Note note){
            			HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1474_resizeEverything)
HXLINE(1475)			 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtTimestamp(note->strumTime);
HXLINE(1476)			Float _hx_tmp = _gthis->getYfromStrum(note->strumTime);
HXDLIN(1476)			note->set_y((_hx_tmp * _gthis->zoomFactor));
HXLINE(1477)			Float stepCrochet = (((( (Float)(60) ) / seg->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(1478)			if ((note->sustainLength >= 2)) {
HXLINE(1480)				note->noteCharterObject->set_y((note->y + _gthis->GRID_SIZE));
HXLINE(1481)				 ::flixel::FlxSprite note1 = note->noteCharterObject;
HXDLIN(1481)				Float _hx_tmp = _gthis->getYfromStrum((note->strumTime + note->sustainLength));
HXDLIN(1481)				note1->makeGraphic(8,::Math_obj::floor(((_hx_tmp * _gthis->zoomFactor) - note->y)),-1,null(),null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1473_resizeEverything)
HXLINE(1472)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1474)		this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(1485)		this->regenerateLines();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,resizeEverything,(void))

void ChartingState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1491_update)
HXLINE(1490)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1492)		this->updateHeads();
HXLINE(1494)		bool doInput = true;
HXLINE(1496)		{
HXLINE(1496)			int _g = 0;
HXDLIN(1496)			::Array< ::Dynamic> _g1 = this->Typeables;
HXDLIN(1496)			while((_g < _g1->length)){
HXLINE(1496)				 ::flixel::addons::ui::FlxUIInputText i = _g1->__get(_g).StaticCast<  ::flixel::addons::ui::FlxUIInputText >();
HXDLIN(1496)				_g = (_g + 1);
HXLINE(1498)				if (i->hasFocus) {
HXLINE(1499)					doInput = false;
            				}
            			}
            		}
HXLINE(1502)		if (doInput) {
HXLINE(1504)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE(1506)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1508)				if (!(::PlayState_obj::isSM)) {
HXLINE(1509)					this->vocals->pause();
            				}
HXLINE(1510)				this->claps->removeRange(0,this->claps->length);
HXLINE(1513)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1513)				if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE(1515)					int amount = ::flixel::FlxG_obj::mouse->wheel;
HXLINE(1517)					if ((amount > 0)) {
HXLINE(1518)						amount = 0;
            					}
HXLINE(1520)					Float increase = ( (Float)(0) );
HXLINE(1522)					if ((amount < 0)) {
HXLINE(1523)						increase = ((Float)-0.02);
            					}
            					else {
HXLINE(1525)						increase = ((Float)0.02);
            					}
HXLINE(1528)					 ::ChartingState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1528)					_hx_tmp->zoomFactor = (_hx_tmp->zoomFactor + increase);
HXLINE(1530)					if ((this->zoomFactor > 2)) {
HXLINE(1531)						this->zoomFactor = ( (Float)(2) );
            					}
HXLINE(1533)					if ((this->zoomFactor < ((Float)0.1))) {
HXLINE(1534)						this->zoomFactor = ((Float)0.1);
            					}
HXLINE(1536)					this->resizeEverything();
            				}
            				else {
HXLINE(1540)					int amount = ::flixel::FlxG_obj::mouse->wheel;
HXLINE(1542)					bool _hx_tmp;
HXDLIN(1542)					if ((amount > 0)) {
HXLINE(1542)						_hx_tmp = (this->strumLine->y < 0);
            					}
            					else {
HXLINE(1542)						_hx_tmp = false;
            					}
HXDLIN(1542)					if (_hx_tmp) {
HXLINE(1543)						amount = 0;
            					}
HXLINE(1545)					if (this->doSnapShit) {
HXLINE(1547)						Float increase = ( (Float)(0) );
HXLINE(1548)						Float beats = ( (Float)(0) );
HXLINE(1550)						if ((amount < 0)) {
HXLINE(1552)							increase = (( (Float)(1) ) / this->deezNuts->get_float(this->snap));
HXLINE(1553)							Float beats1 = this->curDecimalBeat;
HXDLIN(1553)							int beats2 = ::Math_obj::floor(((beats1 * this->deezNuts->get_float(this->snap)) + ((Float)0.001)));
HXDLIN(1553)							beats = ((( (Float)(beats2) ) / this->deezNuts->get_float(this->snap)) + increase);
            						}
            						else {
HXLINE(1557)							increase = (( (Float)(-1) ) / this->deezNuts->get_float(this->snap));
HXLINE(1558)							Float beats1 = this->curDecimalBeat;
HXDLIN(1558)							Float beats2 = (( (Float)(::Math_obj::ceil((beats1 * this->deezNuts->get_float(this->snap)))) ) - ((Float)0.001));
HXDLIN(1558)							beats = ((beats2 / this->deezNuts->get_float(this->snap)) + increase);
            						}
HXLINE(1561)						::haxe::Log_obj::trace((((((HX_("SNAP - ",69,db,50,4d) + this->snap) + HX_(" INCREASE - ",d1,9c,d3,3f)) + increase) + HX_(" - GO TO BEAT ",ea,4d,9e,d6)) + beats),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),1561,HX_("ChartingState",8d,e0,dd,9b),HX_("update",09,86,05,87)));
HXLINE(1563)						 ::TimingStruct data = ::TimingStruct_obj::getTimingAtBeat(beats);
HXLINE(1565)						if ((beats <= 0)) {
HXLINE(1566)							::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            						}
HXLINE(1568)						Float bpm;
HXDLIN(1568)						if (::hx::IsNotNull( data )) {
HXLINE(1568)							bpm = data->bpm;
            						}
            						else {
HXLINE(1568)							bpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            						}
HXLINE(1570)						if (::hx::IsNotNull( data )) {
HXLINE(1573)							::flixel::FlxG_obj::sound->music->set_time(((data->startTime + ((beats - data->startBeat) / (bpm / ( (Float)(60) )))) * ( (Float)(1000) )));
            						}
            					}
HXLINE(1576)					if (!(::PlayState_obj::isSM)) {
HXLINE(1577)						this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            					}
            				}
            			}
            		}
HXLINE(1582)		if ((this->updateFrame == 4)) {
HXLINE(1584)			::TimingStruct_obj::clearTimings();
HXLINE(1586)			int currentIndex = 0;
HXLINE(1587)			{
HXLINE(1587)				int _g = 0;
HXDLIN(1587)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(1587)				while((_g < _g1->length)){
HXLINE(1587)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(1587)					_g = (_g + 1);
HXLINE(1589)					if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(1591)						Float beat = i->position;
HXLINE(1593)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1595)						::TimingStruct_obj::addTiming(beat,( (Float)(i->value) ),endBeat,( (Float)(0) ));
HXLINE(1597)						if ((currentIndex != 0)) {
HXLINE(1599)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(1600)							data->endBeat = beat;
HXLINE(1601)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE(1602)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE(1605)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE(1609)			this->recalculateAllSectionTimes();
HXLINE(1611)			this->regenerateLines();
HXLINE(1612)			this->updateFrame++;
            		}
            		else {
HXLINE(1614)			if ((this->updateFrame != 5)) {
HXLINE(1615)				this->updateFrame++;
            			}
            		}
HXLINE(1617)		::String _hx_tmp;
HXDLIN(1617)		if (this->doSnapShit) {
HXLINE(1617)			_hx_tmp = HX_("Shift to disable, Left or Right to increase/decrease",e3,a5,15,41);
            		}
            		else {
HXLINE(1617)			_hx_tmp = HX_("Snap Disabled, Shift to renable.",da,50,0f,a9);
            		}
HXDLIN(1617)		this->snapText->set_text((((((HX_("Snap: 1/",6e,d2,81,d5) + this->snap) + HX_(" (",08,1c,00,00)) + _hx_tmp) + HX_(")\nAdd Notes: 1-8 (or click)\nZoom: ",62,5f,a9,ab)) + this->zoomFactor));
HXLINE(1620)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1620)		if (_this->keyManager->checkStatus(39,_this->status)) {
HXLINE(1621)			this->snap = (this->snap * 2);
            		}
HXLINE(1622)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1622)		if (_this1->keyManager->checkStatus(37,_this1->status)) {
HXLINE(1623)			this->snap = ::Math_obj::round((( (Float)(this->snap) ) / ( (Float)(2) )));
            		}
HXLINE(1624)		if ((this->snap >= 64)) {
HXLINE(1625)			this->snap = 64;
            		}
HXLINE(1626)		if ((this->snap <= 4)) {
HXLINE(1627)			this->snap = 4;
            		}
HXLINE(1633)		this->doSnapShit = this->defaultSnap;
HXLINE(1634)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1634)		if (_this2->keyManager->checkStatus(16,_this2->status)) {
HXLINE(1636)			this->doSnapShit = !(this->defaultSnap);
            		}
HXLINE(1640)		this->check_snap->set_checked(this->doSnapShit);
HXLINE(1642)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1643)		::ChartingState_obj::_song->__SetField(HX_("song",d5,23,58,4c),this->typingShit->text,::hx::paccDynamic);
HXLINE(1646)		 ::TimingStruct timingSeg = ::TimingStruct_obj::getTimingAtTimestamp(::Conductor_obj::songPosition);
HXLINE(1648)		Float start = ::Conductor_obj::songPosition;
HXLINE(1650)		if (::hx::IsNotNull( timingSeg )) {
HXLINE(1652)			Float timingSegBpm = timingSeg->bpm;
HXLINE(1653)			this->currentBPM = timingSegBpm;
HXLINE(1655)			if ((this->currentBPM != ::Conductor_obj::bpm)) {
HXLINE(1657)				::haxe::Log_obj::trace((HX_("BPM CHANGE to ",56,07,70,eb) + this->currentBPM),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),1657,HX_("ChartingState",8d,e0,dd,9b),HX_("update",09,86,05,87)));
HXLINE(1658)				::Conductor_obj::changeBPM(this->currentBPM,false);
            			}
HXLINE(1661)			Float pog = ((this->curDecimalBeat - timingSeg->startBeat) / (::Conductor_obj::bpm / ( (Float)(60) )));
HXLINE(1663)			start = ((timingSeg->startTime + pog) * ( (Float)(1000) ));
            		}
HXLINE(1667)		 ::Dynamic weird = this->getSectionByTime(start,true);
HXLINE(1671)		if (::hx::IsNotNull( weird )) {
HXLINE(1673)			 ::Dynamic _hx_tmp = this->lastUpdatedSection;
HXDLIN(1673)			if (::hx::IsNotEq( _hx_tmp,this->getSectionByTime(start,true) )) {
HXLINE(1675)				this->lastUpdatedSection = weird;
HXLINE(1676)				this->check_mustHitSection->set_checked(( (bool)(weird->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(1677)				this->check_altAnim->set_checked(( (bool)(weird->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ));
            			}
            		}
HXLINE(1682)		 ::flixel::FlxSprite _hx_tmp1 = this->strumLine;
HXDLIN(1682)		Float _hx_tmp2 = this->getYfromStrum(start);
HXDLIN(1682)		_hx_tmp1->set_y((_hx_tmp2 * this->zoomFactor));
HXLINE(1683)		this->camFollow->set_y(this->strumLine->y);
HXLINE(1686)		 ::flixel::text::FlxText _hx_tmp3 = this->bpmTxt;
HXDLIN(1686)		::String _hx_tmp4 = (::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::Conductor_obj::songPosition / ( (Float)(1000) )),2)) + HX_(" / ",31,71,18,00));
HXDLIN(1686)		::String _hx_tmp5 = ((_hx_tmp4 + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),2))) + HX_("\nCur Section: ",a1,0e,22,7f));
HXDLIN(1686)		::String _hx_tmp6 = ((((_hx_tmp5 + this->curSection) + HX_("\nCurBPM: ",cf,5b,2e,01)) + this->currentBPM) + HX_("\nCurBeat: ",d2,85,30,2c));
HXDLIN(1686)		::String _hx_tmp7 = ((_hx_tmp6 + ::HelperFunctions_obj::truncateFloat(this->curDecimalBeat,3)) + HX_("\nZoom: ",23,18,21,cf));
HXDLIN(1686)		_hx_tmp3->set_text((_hx_tmp7 + this->zoomFactor));
HXLINE(1699)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1699)		bool left = _this3->keyManager->checkStatus(49,_this3->status);
HXLINE(1700)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1700)		bool down = _this4->keyManager->checkStatus(50,_this4->status);
HXLINE(1701)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1701)		bool up = _this5->keyManager->checkStatus(51,_this5->status);
HXLINE(1702)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1702)		bool right = _this6->keyManager->checkStatus(52,_this6->status);
HXLINE(1703)		 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1703)		bool leftO = _this7->keyManager->checkStatus(53,_this7->status);
HXLINE(1704)		 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1704)		bool downO = _this8->keyManager->checkStatus(54,_this8->status);
HXLINE(1705)		 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1705)		bool upO = _this9->keyManager->checkStatus(55,_this9->status);
HXLINE(1706)		 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1706)		bool rightO = _this10->keyManager->checkStatus(56,_this10->status);
HXLINE(1708)		::Array< bool > pressArray = ::Array_obj< bool >::__new(8)->init(0,left)->init(1,down)->init(2,up)->init(3,right)->init(4,leftO)->init(5,downO)->init(6,upO)->init(7,rightO);
HXLINE(1709)		::Array< bool > _hx_delete = ::Array_obj< bool >::fromData( _hx_array_data_9bdde08d_77,1);
HXLINE(1710)		if (doInput) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis,::Array< bool >,_hx_delete,::Array< bool >,pressArray) HXARGC(1)
            			void _hx_run( ::Note note){
            				HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1714_update)
HXLINE(1714)				bool _hx_tmp;
HXDLIN(1714)				if (_gthis->strumLine->overlaps(note,null(),null())) {
HXLINE(1714)					_hx_tmp = pressArray->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(note->noteData) ))));
            				}
            				else {
HXLINE(1714)					_hx_tmp = false;
            				}
HXDLIN(1714)				if (_hx_tmp) {
HXLINE(1716)					_gthis->deleteNote(note);
HXLINE(1717)					_hx_delete[0] = true;
HXLINE(1718)					::haxe::Log_obj::trace(HX_("deelte note",d9,ab,6b,7e),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),1718,HX_("ChartingState",8d,e0,dd,9b),HX_("update",09,86,05,87)));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1712)			this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis,_hx_delete,pressArray)),null());
HXLINE(1721)			{
HXLINE(1721)				int _g = 0;
HXDLIN(1721)				int _g1 = pressArray->length;
HXDLIN(1721)				while((_g < _g1)){
HXLINE(1721)					_g = (_g + 1);
HXDLIN(1721)					int p = (_g - 1);
HXLINE(1723)					bool i = pressArray->__get(p);
HXLINE(1724)					bool _hx_tmp;
HXDLIN(1724)					if (i) {
HXLINE(1724)						_hx_tmp = !(_hx_delete->__get(0));
            					}
            					else {
HXLINE(1724)						_hx_tmp = false;
            					}
HXDLIN(1724)					if (_hx_tmp) {
HXLINE(1726)						this->addNote( ::Note_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,p,null(),null(),null()));
            					}
            				}
            			}
            		}
HXLINE(1731)		if (this->playClaps) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(1)
            			void _hx_run( ::Note note){
            				HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1735_update)
HXLINE(1735)				if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(1737)					if (_gthis->strumLine->overlaps(note,null(),null())) {
HXLINE(1739)						if (!(_gthis->claps->contains(note))) {
HXLINE(1741)							_gthis->claps->push(note);
HXLINE(1742)							 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1742)							_hx_tmp->play(::Paths_obj::sound(HX_("SNAP",4a,1e,18,37),null()),null(),null(),null(),null(),null());
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1733)			this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_1(_gthis)),null());
            		}
HXLINE(1822)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(1824)			if (::flixel::FlxG_obj::mouse->overlaps(this->curRenderedNotes,null())) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(1)
            				void _hx_run( ::Note note){
            					HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1828_update)
HXLINE(1828)					if (::flixel::FlxG_obj::mouse->overlaps(note,null())) {
HXLINE(1830)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1830)						if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE(1832)							_gthis->selectNote(note);
            						}
            						else {
HXLINE(1836)							_gthis->deleteNote(note);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1826)				this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_2(_gthis)),null());
            			}
            			else {
HXLINE(1843)				bool _hx_tmp;
HXDLIN(1843)				bool _hx_tmp1;
HXDLIN(1843)				bool _hx_tmp2;
HXDLIN(1843)				if ((::flixel::FlxG_obj::mouse->x > 0)) {
HXLINE(1844)					int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXLINE(1843)					_hx_tmp2 = (_hx_tmp < this->gridBG->get_width());
            				}
            				else {
HXLINE(1843)					_hx_tmp2 = false;
            				}
HXDLIN(1843)				if (_hx_tmp2) {
HXLINE(1843)					_hx_tmp1 = (::flixel::FlxG_obj::mouse->y > 0);
            				}
            				else {
HXLINE(1843)					_hx_tmp1 = false;
            				}
HXDLIN(1843)				if (_hx_tmp1) {
HXLINE(1843)					_hx_tmp = (::flixel::FlxG_obj::mouse->y < this->height);
            				}
            				else {
HXLINE(1843)					_hx_tmp = false;
            				}
HXDLIN(1843)				if (_hx_tmp) {
HXLINE(1849)					this->addNote(null());
            				}
            			}
            		}
HXLINE(1854)		bool _hx_tmp8;
HXDLIN(1854)		bool _hx_tmp9;
HXDLIN(1854)		bool _hx_tmp10;
HXDLIN(1854)		if ((::flixel::FlxG_obj::mouse->x > 0)) {
HXLINE(1855)			int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXLINE(1854)			_hx_tmp10 = (_hx_tmp < this->gridBG->get_width());
            		}
            		else {
HXLINE(1854)			_hx_tmp10 = false;
            		}
HXDLIN(1854)		if (_hx_tmp10) {
HXLINE(1854)			_hx_tmp9 = (::flixel::FlxG_obj::mouse->y > 0);
            		}
            		else {
HXLINE(1854)			_hx_tmp9 = false;
            		}
HXDLIN(1854)		if (_hx_tmp9) {
HXLINE(1854)			_hx_tmp8 = (::flixel::FlxG_obj::mouse->y < this->height);
            		}
            		else {
HXLINE(1854)			_hx_tmp8 = false;
            		}
HXDLIN(1854)		if (_hx_tmp8) {
HXLINE(1859)			this->dummyArrow->set_visible(true);
HXLINE(1861)			this->dummyArrow->set_x(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
HXLINE(1863)			 ::flixel::FlxSprite _hx_tmp = this->dummyArrow;
HXDLIN(1863)			int _hx_tmp1 = ::flixel::FlxG_obj::mouse->y;
HXDLIN(1863)			int _hx_tmp2 = this->GRID_SIZE;
HXDLIN(1863)			int _hx_tmp3 = ::Math_obj::floor((( (Float)(_hx_tmp1) ) / (( (Float)(_hx_tmp2) ) / this->deezNuts->get_float(this->snap))));
HXDLIN(1863)			int _hx_tmp4 = this->GRID_SIZE;
HXDLIN(1863)			_hx_tmp->set_y((( (Float)(_hx_tmp3) ) * (( (Float)(_hx_tmp4) ) / this->deezNuts->get_float(this->snap))));
            		}
            		else {
HXLINE(1867)			this->dummyArrow->set_visible(false);
            		}
HXLINE(1870)		if (doInput) {
HXLINE(1872)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1872)			if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE(1874)				::ChartingState_obj::lastSection = this->curSection;
HXLINE(1876)				::PlayState_obj::SONG = ::ChartingState_obj::_song;
HXLINE(1877)				{
HXLINE(1877)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1877)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(1878)				if (!(::PlayState_obj::isSM)) {
HXLINE(1879)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(1879)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(1880)				{
HXLINE(1880)					 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(1880)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1880)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
HXLINE(1883)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1883)			if (_this1->keyManager->checkStatus(69,_this1->status)) {
HXLINE(1885)				Float _hx_tmp;
HXDLIN(1885)				if (::hx::IsNotNull( timingSeg )) {
HXLINE(1885)					_hx_tmp = timingSeg->bpm;
            				}
            				else {
HXLINE(1885)					_hx_tmp = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
HXDLIN(1885)				this->changeNoteSustain((((( (Float)(60) ) / _hx_tmp) * ( (Float)(1000) )) / ( (Float)(4) )));
            			}
HXLINE(1887)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1887)			if (_this2->keyManager->checkStatus(81,_this2->status)) {
HXLINE(1889)				Float _hx_tmp;
HXDLIN(1889)				if (::hx::IsNotNull( timingSeg )) {
HXLINE(1889)					_hx_tmp = timingSeg->bpm;
            				}
            				else {
HXLINE(1889)					_hx_tmp = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
HXDLIN(1889)				this->changeNoteSustain(-((((( (Float)(60) ) / _hx_tmp) * ( (Float)(1000) )) / ( (Float)(4) ))));
            			}
HXLINE(1892)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1892)			if (_this3->keyManager->checkStatus(9,_this3->status)) {
HXLINE(1894)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1894)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE(1896)					{
HXLINE(1896)						 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN(1896)						_g->set_selected_tab((_g->get_selected_tab() - 1));
            					}
HXLINE(1897)					if ((this->UI_box->get_selected_tab() < 0)) {
HXLINE(1898)						this->UI_box->set_selected_tab(2);
            					}
            				}
            				else {
HXLINE(1902)					{
HXLINE(1902)						 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN(1902)						_g->set_selected_tab((_g->get_selected_tab() + 1));
            					}
HXLINE(1903)					if ((this->UI_box->get_selected_tab() >= 3)) {
HXLINE(1904)						this->UI_box->set_selected_tab(0);
            					}
            				}
            			}
HXLINE(1908)			if (!(this->typingShit->hasFocus)) {
HXLINE(1911)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1911)				if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE(1913)					bool _hx_tmp;
HXDLIN(1913)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1913)					if (_this->keyManager->checkStatus(90,_this->status)) {
HXLINE(1913)						_hx_tmp = ::hx::IsNotNull( this->lastNote );
            					}
            					else {
HXLINE(1913)						_hx_tmp = false;
            					}
HXDLIN(1913)					if (_hx_tmp) {
HXLINE(1915)						 ::Dynamic _hx_tmp;
HXDLIN(1915)						if (this->curRenderedNotes->members->contains(this->lastNote)) {
HXLINE(1915)							_hx_tmp = HX_("delete note",07,6c,a4,b2);
            						}
            						else {
HXLINE(1915)							_hx_tmp = HX_("add note",51,5e,0c,9c);
            						}
HXDLIN(1915)						::haxe::Log_obj::trace(_hx_tmp,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),1915,HX_("ChartingState",8d,e0,dd,9b),HX_("update",09,86,05,87)));
HXLINE(1916)						if (this->curRenderedNotes->members->contains(this->lastNote)) {
HXLINE(1917)							this->deleteNote(this->lastNote);
            						}
            						else {
HXLINE(1919)							this->addNote(this->lastNote);
            						}
            					}
            				}
HXLINE(1923)				int shiftThing = 1;
HXLINE(1924)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1924)				if (_this1->keyManager->checkStatus(16,_this1->status)) {
HXLINE(1925)					shiftThing = 4;
            				}
HXLINE(1926)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1926)				if (_this2->keyManager->checkStatus(32,_this2->status)) {
HXLINE(1928)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(1930)						::flixel::FlxG_obj::sound->music->pause();
HXLINE(1931)						if (!(::PlayState_obj::isSM)) {
HXLINE(1932)							this->vocals->pause();
            						}
HXLINE(1933)						this->claps->removeRange(0,this->claps->length);
            					}
            					else {
HXLINE(1937)						if (!(::PlayState_obj::isSM)) {
HXLINE(1938)							this->vocals->play(null(),null(),null());
            						}
HXLINE(1939)						::flixel::FlxG_obj::sound->music->play(null(),null(),null());
            					}
            				}
HXLINE(1944)				bool _hx_tmp;
HXDLIN(1944)				if (!((::flixel::FlxG_obj::sound->music->_time < 0))) {
HXLINE(1944)					_hx_tmp = (this->curDecimalBeat < 0);
            				}
            				else {
HXLINE(1944)					_hx_tmp = true;
            				}
HXDLIN(1944)				if (_hx_tmp) {
HXLINE(1945)					::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            				}
HXLINE(1947)				 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1947)				if (!(_this3->keyManager->checkStatus(16,_this3->status))) {
HXLINE(1949)					bool _hx_tmp;
HXDLIN(1949)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1949)					if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE(1949)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1949)						_hx_tmp = _this->keyManager->checkStatus(83,_this->status);
            					}
            					else {
HXLINE(1949)						_hx_tmp = true;
            					}
HXDLIN(1949)					if (_hx_tmp) {
HXLINE(1951)						::flixel::FlxG_obj::sound->music->pause();
HXLINE(1952)						if (!(::PlayState_obj::isSM)) {
HXLINE(1953)							this->vocals->pause();
            						}
HXLINE(1954)						this->claps->removeRange(0,this->claps->length);
HXLINE(1956)						Float daTime = (( (Float)(700) ) * ::flixel::FlxG_obj::elapsed);
HXLINE(1958)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1958)						if (_this->keyManager->checkStatus(87,_this->status)) {
HXLINE(1960)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(1960)							_g->set_time((_g->_time - daTime));
            						}
            						else {
HXLINE(1963)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(1963)							_g->set_time((_g->_time + daTime));
            						}
HXLINE(1965)						if (!(::PlayState_obj::isSM)) {
HXLINE(1966)							this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            						}
            					}
            				}
            				else {
HXLINE(1971)					bool _hx_tmp;
HXDLIN(1971)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1971)					if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE(1971)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1971)						_hx_tmp = _this->keyManager->checkStatus(83,_this->status);
            					}
            					else {
HXLINE(1971)						_hx_tmp = true;
            					}
HXDLIN(1971)					if (_hx_tmp) {
HXLINE(1973)						::flixel::FlxG_obj::sound->music->pause();
HXLINE(1974)						if (!(::PlayState_obj::isSM)) {
HXLINE(1975)							this->vocals->pause();
            						}
HXLINE(1977)						Float daTime = (::Conductor_obj::stepCrochet * ( (Float)(2) ));
HXLINE(1979)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1979)						if (_this->keyManager->checkStatus(87,_this->status)) {
HXLINE(1981)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(1981)							_g->set_time((_g->_time - daTime));
            						}
            						else {
HXLINE(1984)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(1984)							_g->set_time((_g->_time + daTime));
            						}
HXLINE(1986)						if (!(::PlayState_obj::isSM)) {
HXLINE(1987)							this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            						}
            					}
            				}
            			}
            		}
HXLINE(1992)		::ChartingState_obj::_song->__SetField(HX_("bpm",df,be,4a,00),this->tempBpm,::hx::paccDynamic);
HXLINE(1998)		this->super::update(elapsed);
            	}


void ChartingState_obj::changeNoteSustain(Float value){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2002_changeNoteSustain)
HXLINE(2003)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2005)			if (::hx::IsNotNull( this->curSelectedNote->__get(2) )) {
HXLINE(2007)				::cpp::VirtualArray _hx_tmp = this->curSelectedNote;
HXDLIN(2007)				int _hx_tmp1 = 2;
HXDLIN(2007)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + value));
HXLINE(2008)				this->curSelectedNote->set(2,::Math_obj::max(( (Float)(this->curSelectedNote->__get(2)) ),( (Float)(0) )));
            			}
            		}
HXLINE(2012)		this->updateNoteUI();
HXLINE(2013)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,changeNoteSustain,(void))

void ChartingState_obj::resetSection(::hx::Null< bool >  __o_songBeginning){
            		bool songBeginning = __o_songBeginning.Default(false);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2017_resetSection)
HXLINE(2018)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(2019)		if (!(::PlayState_obj::isSM)) {
HXLINE(2020)			this->vocals->pause();
            		}
HXLINE(2023)		::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE(2025)		if (!(::PlayState_obj::isSM)) {
HXLINE(2026)			this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            		}
HXLINE(2028)		this->updateGrid();
HXLINE(2029)		if (!(songBeginning)) {
HXLINE(2030)			this->updateSectionUI();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,resetSection,(void))

void ChartingState_obj::changeSection(::hx::Null< int >  __o_sec, ::Dynamic __o_updateMusic){
            		int sec = __o_sec.Default(0);
            		 ::Dynamic updateMusic = __o_updateMusic;
            		if (::hx::IsNull(__o_updateMusic)) updateMusic = true;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2034_changeSection)
HXLINE(2035)		::haxe::Log_obj::trace((HX_("changing section",72,75,c1,9c) + sec),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),2035,HX_("ChartingState",8d,e0,dd,9b),HX_("changeSection",55,aa,ac,be)));
HXLINE(2037)		if (::hx::IsNotNull(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec) )) {
HXLINE(2039)			::haxe::Log_obj::trace(HX_("naw im not null",34,ff,11,38),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),2039,HX_("ChartingState",8d,e0,dd,9b),HX_("changeSection",55,aa,ac,be)));
HXLINE(2040)			this->curSection = sec;
HXLINE(2042)			this->updateGrid();
HXLINE(2044)			if (( (bool)(updateMusic) )) {
HXLINE(2046)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(2047)				if (!(::PlayState_obj::isSM)) {
HXLINE(2048)					this->vocals->pause();
            				}
HXLINE(2058)				 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN(2058)				_hx_tmp->set_time(this->sectionStartTime(null()));
HXLINE(2059)				if (!(::PlayState_obj::isSM)) {
HXLINE(2060)					this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            				}
HXLINE(2061)				this->updateCurStep();
            			}
HXLINE(2064)			this->updateGrid();
HXLINE(2065)			this->updateSectionUI();
            		}
            		else {
HXLINE(2068)			::haxe::Log_obj::trace(HX_("bro wtf I AM NULL",ec,3a,e8,a2),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),2068,HX_("ChartingState",8d,e0,dd,9b),HX_("changeSection",55,aa,ac,be)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,changeSection,(void))

void ChartingState_obj::copySection( ::Dynamic __o_sectionNum){
            		 ::Dynamic sectionNum = __o_sectionNum;
            		if (::hx::IsNull(__o_sectionNum)) sectionNum = 1;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2072_copySection)
HXLINE(2073)		int a = this->curSection;
HXDLIN(2073)		int b = ( (int)(sectionNum) );
HXDLIN(2073)		int daSec;
HXDLIN(2073)		if ((a > b)) {
HXLINE(2073)			daSec = a;
            		}
            		else {
HXLINE(2073)			daSec = b;
            		}
HXLINE(2074)		 ::Dynamic sect = this->lastUpdatedSection;
HXLINE(2076)		if (::hx::IsNull( sect )) {
HXLINE(2077)			return;
            		}
HXLINE(2079)		{
HXLINE(2079)			int _g = 0;
HXDLIN(2079)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((daSec - ( (int)(sectionNum) )))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2079)			while((_g < _g1->length)){
HXLINE(2079)				::cpp::VirtualArray note = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(2079)				_g = (_g + 1);
HXLINE(2081)				 ::Dynamic strum = (note->__get(0) + (::Conductor_obj::stepCrochet * ( (Float)((( (int)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * ( (int)(sectionNum) ))) )));
HXLINE(2083)				::cpp::VirtualArray copiedNote = ::cpp::VirtualArray_obj::__new(3)->init(0,strum)->init(1,note->__get(1))->init(2,note->__get(2));
HXLINE(2084)				( (::Array< ::Dynamic>)(sect->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(copiedNote);
            			}
            		}
HXLINE(2087)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,copySection,(void))

void ChartingState_obj::updateSectionUI(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2091_updateSectionUI)
HXLINE(2092)		 ::Dynamic sec = this->getSectionByTime(::Conductor_obj::songPosition,null());
HXLINE(2094)		if (::hx::IsNull( sec )) {
HXLINE(2096)			this->check_mustHitSection->set_checked(true);
HXLINE(2097)			this->check_altAnim->set_checked(false);
            		}
            		else {
HXLINE(2101)			this->check_mustHitSection->set_checked(( (bool)(sec->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(2102)			this->check_altAnim->set_checked(( (bool)(sec->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ));
HXLINE(2103)			this->check_changeBPM->set_checked(( (bool)(sec->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateSectionUI,(void))

void ChartingState_obj::updateHeads(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2109_updateHeads)
HXDLIN(2109)		if (this->check_mustHitSection->checked) {
HXLINE(2111)			::ChartingState_obj::leftIcon->animation->play(( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
HXLINE(2112)			::ChartingState_obj::rightIcon->animation->play(( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            		}
            		else {
HXLINE(2116)			::ChartingState_obj::leftIcon->animation->play(( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
HXLINE(2117)			::ChartingState_obj::rightIcon->animation->play(( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateHeads,(void))

void ChartingState_obj::updateNoteUI(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2123_updateNoteUI)
HXDLIN(2123)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2124)			this->stepperSusLength->set_value(( (Float)(this->curSelectedNote->__get(2)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateNoteUI,(void))

void ChartingState_obj::updateGrid(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2128_updateGrid)
HXLINE(2129)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(2131)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            		}
HXLINE(2134)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(2136)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(2153)		int currentSection = 0;
HXLINE(2155)		{
HXLINE(2155)			int _g = 0;
HXDLIN(2155)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2155)			while((_g < _g1->length)){
HXLINE(2155)				 ::Dynamic section = _g1->__get(_g);
HXDLIN(2155)				_g = (_g + 1);
HXLINE(2157)				{
HXLINE(2157)					int _g2 = 0;
HXDLIN(2157)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2157)					while((_g2 < _g3->length)){
HXLINE(2157)						::cpp::VirtualArray i = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(2157)						_g2 = (_g2 + 1);
HXLINE(2159)						 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtTimestamp(( (Float)(i->__get(0)) ));
HXLINE(2160)						int daNoteInfo = ( (int)(i->__get(1)) );
HXLINE(2161)						Float daStrumTime = ( (Float)(i->__get(0)) );
HXLINE(2162)						Float daSus = ( (Float)(i->__get(2)) );
HXLINE(2164)						 ::Note note =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,::hx::Mod(daNoteInfo,4),null(),false,true);
HXLINE(2165)						note->rawNoteData = daNoteInfo;
HXLINE(2166)						note->sustainLength = daSus;
HXLINE(2167)						note->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(2168)						note->updateHitbox();
HXLINE(2169)						note->set_x(( (Float)(::Math_obj::floor(( (Float)((daNoteInfo * this->GRID_SIZE)) ))) ));
HXLINE(2171)						Float _hx_tmp = this->getYfromStrum(daStrumTime);
HXDLIN(2171)						note->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(2173)						if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2174)							if (::hx::IsEq( this->curSelectedNote->__get(0),note->strumTime )) {
HXLINE(2175)								this->lastNote = note;
            							}
            						}
HXLINE(2177)						this->curRenderedNotes->add(note).StaticCast<  ::Note >();
HXLINE(2179)						Float stepCrochet = (((( (Float)(60) ) / seg->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(2181)						if ((daSus > 0)) {
HXLINE(2183)							 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(note->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(note->y + this->GRID_SIZE),null());
HXLINE(2184)							Float sustainVis1 = this->getYfromStrum((note->strumTime + note->sustainLength));
HXLINE(2183)							 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - note->y)),null(),null(),null());
HXLINE(2186)							note->noteCharterObject = sustainVis2;
HXLINE(2188)							this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            						}
            					}
            				}
HXLINE(2191)				currentSection = (currentSection + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateGrid,(void))

void ChartingState_obj::addSection(::hx::Null< int >  __o_lengthInSteps){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2197_addSection)
HXLINE(2198)		Float daPos = ( (Float)(0) );
HXLINE(2199)		Float start = ( (Float)(0) );
HXLINE(2201)		Float bpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(2202)		{
HXLINE(2202)			int _g = 0;
HXDLIN(2202)			int _g1 = this->curSection;
HXDLIN(2202)			while((_g < _g1)){
HXLINE(2202)				_g = (_g + 1);
HXDLIN(2202)				int i = (_g - 1);
HXLINE(2204)				{
HXLINE(2204)					int _g1 = 0;
HXDLIN(2204)					::Array< ::Dynamic> _g2 = ::TimingStruct_obj::AllTimings;
HXDLIN(2204)					while((_g1 < _g2->length)){
HXLINE(2204)						 ::TimingStruct ii = _g2->__get(_g1).StaticCast<  ::TimingStruct >();
HXDLIN(2204)						_g1 = (_g1 + 1);
HXLINE(2206)						 ::TimingStruct data = ::TimingStruct_obj::getTimingAtTimestamp(start);
HXLINE(2207)						bool _hx_tmp;
HXDLIN(2207)						Float _hx_tmp1;
HXDLIN(2207)						if (::hx::IsNotNull( data )) {
HXLINE(2207)							_hx_tmp1 = data->bpm;
            						}
            						else {
HXLINE(2207)							_hx_tmp1 = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            						}
HXDLIN(2207)						if ((_hx_tmp1 != bpm)) {
HXLINE(2207)							_hx_tmp = (bpm != ii->bpm);
            						}
            						else {
HXLINE(2207)							_hx_tmp = false;
            						}
HXDLIN(2207)						if (_hx_tmp) {
HXLINE(2208)							bpm = ii->bpm;
            						}
            					}
            				}
HXLINE(2210)				start = (start + ((( (Float)(4) ) * (( (Float)(60) ) / bpm)) * ( (Float)(1000) )));
            			}
            		}
HXLINE(2213)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(3,HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(4,HX_("bpm",df,be,4a,00), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(5,HX_("startTime",8f,45,f0,05),daPos)
            			->setFixed(6,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(7,HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY)
            			->setFixed(8,HX_("mustHitSection",3b,5f,87,62),true));
HXLINE(2225)		( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->push(sec);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addSection,(void))

void ChartingState_obj::selectNote( ::Note note){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2229_selectNote)
HXLINE(2230)		int swagNum = 0;
HXLINE(2232)		{
HXLINE(2232)			int _g = 0;
HXDLIN(2232)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->getSectionByTime(note->strumTime,null())->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2232)			while((_g < _g1->length)){
HXLINE(2232)				::cpp::VirtualArray i = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(2232)				_g = (_g + 1);
HXLINE(2234)				bool _hx_tmp;
HXDLIN(2234)				if (::hx::IsEq( i->__get(0),note->strumTime )) {
HXLINE(2234)					_hx_tmp = ::hx::IsEq( i->__get(1),note->rawNoteData );
            				}
            				else {
HXLINE(2234)					_hx_tmp = false;
            				}
HXDLIN(2234)				if (_hx_tmp) {
HXLINE(2236)					this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic(this->getSectionByTime(note->strumTime,null())->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(swagNum)) );
            				}
HXLINE(2239)				swagNum = (swagNum + 1);
            			}
            		}
HXLINE(2242)		this->updateGrid();
HXLINE(2243)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,selectNote,(void))

void ChartingState_obj::deleteNote( ::Note note){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2248_deleteNote)
HXLINE(2249)		this->lastNote = note;
HXLINE(2251)		 ::Dynamic section = this->getSectionByTime(note->strumTime,null());
HXLINE(2253)		::haxe::Log_obj::trace(section,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),2253,HX_("ChartingState",8d,e0,dd,9b),HX_("deleteNote",bd,f5,56,9c)));
HXLINE(2255)		bool found = false;
HXLINE(2257)		{
HXLINE(2257)			int _g = 0;
HXDLIN(2257)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2257)			while((_g < _g1->length)){
HXLINE(2257)				::cpp::VirtualArray i = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(2257)				_g = (_g + 1);
HXLINE(2259)				bool _hx_tmp;
HXDLIN(2259)				if (::hx::IsEq( i->__get(0),note->strumTime )) {
HXLINE(2259)					_hx_tmp = ::hx::IsEq( i->__get(1),note->rawNoteData );
            				}
            				else {
HXLINE(2259)					_hx_tmp = false;
            				}
HXDLIN(2259)				if (_hx_tmp) {
HXLINE(2261)					( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
HXLINE(2262)					found = true;
            				}
            			}
            		}
HXLINE(2266)		if (!(found)) {
HXLINE(2268)			int _g = 0;
HXDLIN(2268)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2268)			while((_g < _g1->length)){
HXLINE(2268)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(2268)				_g = (_g + 1);
HXLINE(2270)				{
HXLINE(2270)					int _g2 = 0;
HXDLIN(2270)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2270)					while((_g2 < _g3->length)){
HXLINE(2270)						::cpp::VirtualArray n = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(2270)						_g2 = (_g2 + 1);
HXLINE(2271)						bool _hx_tmp;
HXDLIN(2271)						if (::hx::IsEq( n->__get(0),note->strumTime )) {
HXLINE(2271)							_hx_tmp = ::hx::IsEq( n->__get(1),note->rawNoteData );
            						}
            						else {
HXLINE(2271)							_hx_tmp = false;
            						}
HXDLIN(2271)						if (_hx_tmp) {
HXLINE(2272)							( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(n);
            						}
            					}
            				}
            			}
            		}
HXLINE(2276)		::haxe::Log_obj::trace(HX_("DELETED!",48,48,2f,bc),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),2276,HX_("ChartingState",8d,e0,dd,9b),HX_("deleteNote",bd,f5,56,9c)));
HXLINE(2278)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,deleteNote,(void))

void ChartingState_obj::clearSection(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2282_clearSection)
HXLINE(2283)		this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
HXLINE(2285)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSection,(void))

void ChartingState_obj::clearSong(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2289_clearSong)
HXLINE(2290)		{
HXLINE(2290)			int _g = 0;
HXDLIN(2290)			int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(2290)			while((_g < _g1)){
HXLINE(2290)				_g = (_g + 1);
HXDLIN(2290)				int daSection = (_g - 1);
HXLINE(2292)				 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
            			}
            		}
HXLINE(2295)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSong,(void))

 ::Dynamic ChartingState_obj::newSection(::hx::Null< int >  __o_lengthInSteps,::hx::Null< bool >  __o_mustHitSection,::hx::Null< bool >  __o_altAnim){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            		bool mustHitSection = __o_mustHitSection.Default(false);
            		bool altAnim = __o_altAnim.Default(true);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2299_newSection)
HXLINE(2301)		Float daPos = ( (Float)(0) );
HXLINE(2303)		 ::TimingStruct currentSeg = ::TimingStruct_obj::AllTimings->__get((::TimingStruct_obj::AllTimings->length - 1)).StaticCast<  ::TimingStruct >();
HXLINE(2305)		int currentBeat = 4;
HXLINE(2307)		{
HXLINE(2307)			int _g = 0;
HXDLIN(2307)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2307)			while((_g < _g1->length)){
HXLINE(2307)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(2307)				_g = (_g + 1);
HXLINE(2308)				currentBeat = (currentBeat + 4);
            			}
            		}
HXLINE(2310)		if (::hx::IsNull( currentSeg )) {
HXLINE(2311)			return null();
            		}
HXLINE(2313)		Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(2315)		daPos = ((currentSeg->startTime + start) * ( (Float)(1000) ));
HXLINE(2317)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),altAnim)
            			->setFixed(2,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(3,HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(4,HX_("bpm",df,be,4a,00), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(5,HX_("startTime",8f,45,f0,05),daPos)
            			->setFixed(6,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(7,HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY)
            			->setFixed(8,HX_("mustHitSection",3b,5f,87,62),mustHitSection));
HXLINE(2330)		return sec;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,newSection,return )

void ChartingState_obj::recalculateAllSectionTimes(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2334_recalculateAllSectionTimes)
HXLINE(2357)		::haxe::Log_obj::trace(HX_("RECALCULATING SECTION TIMES",1b,8e,4c,d4),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),2357,HX_("ChartingState",8d,e0,dd,9b),HX_("recalculateAllSectionTimes",4f,b8,31,bc)));
HXLINE(2358)		{
HXLINE(2358)			int _g = 0;
HXDLIN(2358)			int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(2358)			while((_g < _g1)){
HXLINE(2358)				_g = (_g + 1);
HXDLIN(2358)				int i = (_g - 1);
HXLINE(2360)				 ::Dynamic section =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i);
HXLINE(2362)				int currentBeat = (4 * i);
HXLINE(2364)				 ::TimingStruct currentSeg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(currentBeat) ));
HXLINE(2366)				if (::hx::IsNull( currentSeg )) {
HXLINE(2367)					return;
            				}
HXLINE(2369)				Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(2371)				section->__SetField(HX_("startTime",8f,45,f0,05),((currentSeg->startTime + start) * ( (Float)(1000) )),::hx::paccDynamic);
HXLINE(2373)				if ((i != 0)) {
HXLINE(2374)					 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((i - 1))->__SetField(HX_("endTime",88,85,21,2f),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::hx::paccDynamic);
            				}
HXLINE(2375)				section->__SetField(HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY,::hx::paccDynamic);
            			}
            		}
HXLINE(2378)		this->once = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,recalculateAllSectionTimes,(void))

void ChartingState_obj::shiftNotes(::hx::Null< int >  __o_measure,::hx::Null< int >  __o_step,::hx::Null< int >  __o_ms){
            		int measure = __o_measure.Default(0);
            		int step = __o_step.Default(0);
            		int ms = __o_ms.Default(0);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2385_shiftNotes)
HXLINE(2386)		::Array< ::Dynamic> newSong = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2388)		Float millisecadd = ((((measure * 4) + (( (Float)(step) ) / ( (Float)(4) ))) * (( (Float)(60000) ) / this->currentBPM)) + ms);
HXLINE(2389)		int totaladdsection = ::Std_obj::_hx_int(((millisecadd / (( (Float)(60000) ) / this->currentBPM)) / ( (Float)(4) )));
HXLINE(2390)		::haxe::Log_obj::trace(millisecadd, ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("ChartingState",8d,e0,dd,9b))
            			->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,totaladdsection))
            			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("shiftNotes",5f,c8,22,af))
            			->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/ChartingState.hx",45,af,8d,9a))
            			->setFixed(4,HX_("lineNumber",dd,81,22,76),2390)));
HXLINE(2391)		if ((millisecadd > 0)) {
HXLINE(2393)			int _g = 0;
HXDLIN(2393)			int _g1 = totaladdsection;
HXDLIN(2393)			while((_g < _g1)){
HXLINE(2393)				_g = (_g + 1);
HXDLIN(2393)				int i = (_g - 1);
HXLINE(2395)				newSong->unshift(this->newSection(null(),null(),null()));
            			}
            		}
HXLINE(2398)		{
HXLINE(2398)			int _g = 0;
HXDLIN(2398)			int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(2398)			while((_g < _g1)){
HXLINE(2398)				_g = (_g + 1);
HXDLIN(2398)				int daSection1 = (_g - 1);
HXLINE(2400)				newSong->push(this->newSection(16, ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection1)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection1)->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)));
            			}
            		}
HXLINE(2403)		{
HXLINE(2403)			int _g2 = 0;
HXDLIN(2403)			int _g3 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(2403)			while((_g2 < _g3)){
HXLINE(2403)				_g2 = (_g2 + 1);
HXDLIN(2403)				int daSection = (_g2 - 1);
HXLINE(2405)				int aimtosetsection = (daSection + ::Std_obj::_hx_int(( (Float)(totaladdsection) )));
HXLINE(2406)				if ((aimtosetsection < 0)) {
HXLINE(2406)					aimtosetsection = 0;
            				}
HXLINE(2407)				newSong->__get(aimtosetsection)->__SetField(HX_("mustHitSection",3b,5f,87,62), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(2408)				newSong->__get(aimtosetsection)->__SetField(HX_("altAnim",da,f3,f2,e5), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(2410)				{
HXLINE(2410)					int _g = 0;
HXDLIN(2410)					int _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(2410)					while((_g < _g1)){
HXLINE(2410)						_g = (_g + 1);
HXDLIN(2410)						int daNote = (_g - 1);
HXLINE(2412)						int newtiming = ( (int)(( ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote)->__GetItem(0) + millisecadd)) );
HXLINE(2413)						if ((newtiming < 0)) {
HXLINE(2415)							newtiming = 0;
            						}
HXLINE(2417)						int futureSection = ::Math_obj::floor(((( (Float)(newtiming) ) / ( (Float)(4) )) / (( (Float)(60000) ) / this->currentBPM)));
HXLINE(2418)						 ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote)->__SetItem(0,newtiming);
HXLINE(2419)						( (::Array< ::Dynamic>)(newSong->__get(futureSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push( ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote));
            					}
            				}
            			}
            		}
HXLINE(2426)		::ChartingState_obj::_song->__SetField(HX_("notes",41,dc,ca,9f),newSong,::hx::paccDynamic);
HXLINE(2427)		this->recalculateAllSectionTimes();
HXLINE(2428)		this->updateGrid();
HXLINE(2429)		this->updateSectionUI();
HXLINE(2430)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,shiftNotes,(void))

 ::Dynamic ChartingState_obj::getSectionByTime(Float ms, ::Dynamic __o_changeCurSectionIndex){
            		 ::Dynamic changeCurSectionIndex = __o_changeCurSectionIndex;
            		if (::hx::IsNull(__o_changeCurSectionIndex)) changeCurSectionIndex = false;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2434_getSectionByTime)
HXLINE(2435)		int index = 0;
HXLINE(2439)		{
HXLINE(2439)			int _g = 0;
HXDLIN(2439)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2439)			while((_g < _g1->length)){
HXLINE(2439)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(2439)				_g = (_g + 1);
HXLINE(2441)				bool _hx_tmp;
HXDLIN(2441)				if (::hx::IsGreaterEq( ms,i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(2441)					_hx_tmp = ::hx::IsLess( ms,i->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            				}
            				else {
HXLINE(2441)					_hx_tmp = false;
            				}
HXDLIN(2441)				if (_hx_tmp) {
HXLINE(2443)					if (( (bool)(changeCurSectionIndex) )) {
HXLINE(2444)						this->curSection = index;
            					}
HXLINE(2445)					return i;
            				}
HXLINE(2447)				index = (index + 1);
            			}
            		}
HXLINE(2451)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,getSectionByTime,return )

 ::Dynamic ChartingState_obj::getNoteByTime(Float ms){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2455_getNoteByTime)
HXLINE(2456)		{
HXLINE(2456)			int _g = 0;
HXDLIN(2456)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2456)			while((_g < _g1->length)){
HXLINE(2456)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(2456)				_g = (_g + 1);
HXLINE(2458)				{
HXLINE(2458)					int _g2 = 0;
HXDLIN(2458)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2458)					while((_g2 < _g3->length)){
HXLINE(2458)						::cpp::VirtualArray n = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(2458)						_g2 = (_g2 + 1);
HXLINE(2459)						if (::hx::IsEq( n->__get(0),ms )) {
HXLINE(2460)							return i;
            						}
            					}
            				}
            			}
            		}
HXLINE(2462)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getNoteByTime,return )

void ChartingState_obj::addNote( ::Note n){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2467_addNote)
HXLINE(2468)		Float strum = this->getStrumTime(this->dummyArrow->y);
HXDLIN(2468)		Float strum1 = (strum / this->zoomFactor);
HXLINE(2470)		::haxe::Log_obj::trace(((strum1 + HX_(" from ",56,a3,f9,d1)) + this->dummyArrow->y),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),2470,HX_("ChartingState",8d,e0,dd,9b),HX_("addNote",b3,5a,47,85)));
HXLINE(2472)		::haxe::Log_obj::trace(((HX_("adding note with ",0b,a1,76,00) + strum1) + HX_(" from dummyArrow",57,f5,b0,fa)),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),2472,HX_("ChartingState",8d,e0,dd,9b),HX_("addNote",b3,5a,47,85)));
HXLINE(2474)		 ::Dynamic section = this->getSectionByTime(strum1,null());
HXLINE(2476)		if (::hx::IsNull( section )) {
HXLINE(2477)			return;
            		}
HXLINE(2479)		Float noteStrum = strum1;
HXLINE(2480)		int noteData = ::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) )));
HXLINE(2481)		int noteSus = 0;
HXLINE(2483)		if (::hx::IsNotNull( n )) {
HXLINE(2484)			( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(3)->init(0,n->strumTime)->init(1,n->noteData)->init(2,n->sustainLength));
            		}
            		else {
HXLINE(2486)			( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(3)->init(0,noteStrum)->init(1,noteData)->init(2,noteSus));
            		}
HXLINE(2488)		::cpp::VirtualArray thingy = ( (::cpp::VirtualArray)( ::Dynamic(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length - 1))) );
HXLINE(2490)		this->curSelectedNote = thingy;
HXLINE(2492)		this->updateGrid();
HXLINE(2493)		this->updateNoteUI();
HXLINE(2495)		this->autosaveSong();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addNote,(void))

Float ChartingState_obj::getStrumTime(Float yPos){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2500_getStrumTime)
HXDLIN(2500)		return ::flixel::math::FlxMath_obj::remapToRange(yPos,( (Float)(0) ),::ChartingState_obj::lengthInSteps,( (Float)(0) ),::ChartingState_obj::lengthInSteps);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getStrumTime,return )

Float ChartingState_obj::getYfromStrum(Float strumTime){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2505_getYfromStrum)
HXDLIN(2505)		return ::flixel::math::FlxMath_obj::remapToRange(strumTime,( (Float)(0) ),::ChartingState_obj::lengthInSteps,( (Float)(0) ),::ChartingState_obj::lengthInSteps);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getYfromStrum,return )

void ChartingState_obj::loadLevel(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2535_loadLevel)
HXDLIN(2535)		::haxe::Log_obj::trace( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)),::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),2535,HX_("ChartingState",8d,e0,dd,9b),HX_("loadLevel",7e,61,9a,8d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadLevel,(void))

::cpp::VirtualArray ChartingState_obj::getNotes(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2539_getNotes)
HXLINE(2540)		::cpp::VirtualArray noteData = ::cpp::VirtualArray_obj::__new(0);
HXLINE(2542)		{
HXLINE(2542)			int _g = 0;
HXDLIN(2542)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2542)			while((_g < _g1->length)){
HXLINE(2542)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(2542)				_g = (_g + 1);
HXLINE(2544)				noteData->push( ::Dynamic(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)));
            			}
            		}
HXLINE(2547)		return noteData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,getNotes,return )

void ChartingState_obj::loadJson(::String song){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2551_loadJson)
HXLINE(2552)		::String format = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(2553)		::String _hx_switch_0 = format;
            		if (  (_hx_switch_0==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE(2554)			format = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN(2554)			goto _hx_goto_126;
            		}
            		if (  (_hx_switch_0==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE(2555)			format = HX_("Philly",48,eb,f2,23);
HXDLIN(2555)			goto _hx_goto_126;
            		}
            		_hx_goto_126:;
HXLINE(2557)		::PlayState_obj::SONG = ::Song_obj::loadFromJson(format,format);
HXLINE(2558)		{
HXLINE(2558)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::ChartingState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(2558)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2558)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadJson,(void))

void ChartingState_obj::loadAutosave(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2562_loadAutosave)
HXLINE(2563)		::PlayState_obj::SONG = ::Song_obj::parseJSONshit(( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("autosave",2c,4e,9a,44),::hx::paccDynamic)) ));
HXLINE(2564)		{
HXLINE(2564)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::ChartingState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(2564)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2564)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadAutosave,(void))

void ChartingState_obj::autosaveSong(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2568_autosaveSong)
HXLINE(2569)		 ::Dynamic replacer = null();
HXDLIN(2569)		::String space = null();
HXDLIN(2569)		::String _hx_tmp = ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),::ChartingState_obj::_song)),replacer,space);
HXDLIN(2569)		::flixel::FlxG_obj::save->data->__SetField(HX_("autosave",2c,4e,9a,44),_hx_tmp,::hx::paccDynamic);
HXLINE(2572)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,autosaveSong,(void))

void ChartingState_obj::saveLevel(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2576_saveLevel)
HXLINE(2577)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),::ChartingState_obj::_song));
HXLINE(2581)		 ::Dynamic replacer = null();
HXDLIN(2581)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,HX_(" ",20,00,00,00));
HXLINE(2583)		bool _hx_tmp;
HXDLIN(2583)		if (::hx::IsNotNull( data )) {
HXLINE(2583)			_hx_tmp = (data.length > 0);
            		}
            		else {
HXLINE(2583)			_hx_tmp = false;
            		}
HXDLIN(2583)		if (_hx_tmp) {
HXLINE(2585)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(2586)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(2587)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(2588)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(2589)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN(2589)			::String _hx_tmp1 = ::StringTools_obj::trim(data);
HXDLIN(2589)			_hx_tmp->save(_hx_tmp1,(( (::String)(::ChartingState_obj::_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,saveLevel,(void))

void ChartingState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2594_onSaveComplete)
HXLINE(2595)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(2596)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(2597)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(2598)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveComplete,(void))

void ChartingState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2606_onSaveCancel)
HXLINE(2607)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(2608)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(2609)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(2610)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveCancel,(void))

void ChartingState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2617_onSaveError)
HXLINE(2618)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(2619)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(2620)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(2621)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveError,(void))

 ::ChartingState ChartingState_obj::instance;

Float ChartingState_obj::lengthInSteps;

Float ChartingState_obj::lengthInBeats;

int ChartingState_obj::lastSection;

 ::Dynamic ChartingState_obj::_song;

 ::HealthIcon ChartingState_obj::leftIcon;

 ::HealthIcon ChartingState_obj::rightIcon;

::String ChartingState_obj::latestChartVersion;


::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< ChartingState_obj > __this = new ChartingState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	ChartingState_obj *__this = (ChartingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChartingState_obj), true, "ChartingState"));
	*(void **)__this = ChartingState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

ChartingState_obj::ChartingState_obj()
{
}

void ChartingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChartingState);
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(playClaps,"playClaps");
	HX_MARK_MEMBER_NAME(snap,"snap");
	HX_MARK_MEMBER_NAME(deezNuts,"deezNuts");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(UI_options,"UI_options");
	HX_MARK_MEMBER_NAME(beatsShown,"beatsShown");
	HX_MARK_MEMBER_NAME(zoomFactor,"zoomFactor");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(amountSteps,"amountSteps");
	HX_MARK_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_MARK_MEMBER_NAME(writingNotesText,"writingNotesText");
	HX_MARK_MEMBER_NAME(highlight,"highlight");
	HX_MARK_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_MARK_MEMBER_NAME(subDivisions,"subDivisions");
	HX_MARK_MEMBER_NAME(defaultSnap,"defaultSnap");
	HX_MARK_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_MARK_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_MARK_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_MARK_MEMBER_NAME(gridBG,"gridBG");
	HX_MARK_MEMBER_NAME(sectionRenderes,"sectionRenderes");
	HX_MARK_MEMBER_NAME(typingShit,"typingShit");
	HX_MARK_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_MARK_MEMBER_NAME(tempBpm,"tempBpm");
	HX_MARK_MEMBER_NAME(gridBlackLine,"gridBlackLine");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(player2,"player2");
	HX_MARK_MEMBER_NAME(player1,"player1");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(lastNote,"lastNote");
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_MEMBER_NAME(claps,"claps");
	HX_MARK_MEMBER_NAME(snapText,"snapText");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(texts,"texts");
	HX_MARK_MEMBER_NAME(stepperDiv,"stepperDiv");
	HX_MARK_MEMBER_NAME(check_snap,"check_snap");
	HX_MARK_MEMBER_NAME(listOfEvents,"listOfEvents");
	HX_MARK_MEMBER_NAME(currentSelectedEventName,"currentSelectedEventName");
	HX_MARK_MEMBER_NAME(savedType,"savedType");
	HX_MARK_MEMBER_NAME(savedValue,"savedValue");
	HX_MARK_MEMBER_NAME(currentEventPosition,"currentEventPosition");
	HX_MARK_MEMBER_NAME(chartEvents,"chartEvents");
	HX_MARK_MEMBER_NAME(Typeables,"Typeables");
	HX_MARK_MEMBER_NAME(stepperLength,"stepperLength");
	HX_MARK_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_MARK_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_MARK_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_MARK_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_MARK_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_MARK_MEMBER_NAME(tab_group_note,"tab_group_note");
	HX_MARK_MEMBER_NAME(updatedSection,"updatedSection");
	HX_MARK_MEMBER_NAME(writingNotes,"writingNotes");
	HX_MARK_MEMBER_NAME(doSnapShit,"doSnapShit");
	HX_MARK_MEMBER_NAME(diff,"diff");
	HX_MARK_MEMBER_NAME(changeIndex,"changeIndex");
	HX_MARK_MEMBER_NAME(currentBPM,"currentBPM");
	HX_MARK_MEMBER_NAME(lastBPM,"lastBPM");
	HX_MARK_MEMBER_NAME(updateFrame,"updateFrame");
	HX_MARK_MEMBER_NAME(lastUpdatedSection,"lastUpdatedSection");
	HX_MARK_MEMBER_NAME(once,"once");
	HX_MARK_MEMBER_NAME(daSpacing,"daSpacing");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChartingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(playClaps,"playClaps");
	HX_VISIT_MEMBER_NAME(snap,"snap");
	HX_VISIT_MEMBER_NAME(deezNuts,"deezNuts");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(UI_options,"UI_options");
	HX_VISIT_MEMBER_NAME(beatsShown,"beatsShown");
	HX_VISIT_MEMBER_NAME(zoomFactor,"zoomFactor");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(amountSteps,"amountSteps");
	HX_VISIT_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_VISIT_MEMBER_NAME(writingNotesText,"writingNotesText");
	HX_VISIT_MEMBER_NAME(highlight,"highlight");
	HX_VISIT_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_VISIT_MEMBER_NAME(subDivisions,"subDivisions");
	HX_VISIT_MEMBER_NAME(defaultSnap,"defaultSnap");
	HX_VISIT_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_VISIT_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_VISIT_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_VISIT_MEMBER_NAME(gridBG,"gridBG");
	HX_VISIT_MEMBER_NAME(sectionRenderes,"sectionRenderes");
	HX_VISIT_MEMBER_NAME(typingShit,"typingShit");
	HX_VISIT_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_VISIT_MEMBER_NAME(tempBpm,"tempBpm");
	HX_VISIT_MEMBER_NAME(gridBlackLine,"gridBlackLine");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(player2,"player2");
	HX_VISIT_MEMBER_NAME(player1,"player1");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(lastNote,"lastNote");
	HX_VISIT_MEMBER_NAME(lines,"lines");
	HX_VISIT_MEMBER_NAME(claps,"claps");
	HX_VISIT_MEMBER_NAME(snapText,"snapText");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(texts,"texts");
	HX_VISIT_MEMBER_NAME(stepperDiv,"stepperDiv");
	HX_VISIT_MEMBER_NAME(check_snap,"check_snap");
	HX_VISIT_MEMBER_NAME(listOfEvents,"listOfEvents");
	HX_VISIT_MEMBER_NAME(currentSelectedEventName,"currentSelectedEventName");
	HX_VISIT_MEMBER_NAME(savedType,"savedType");
	HX_VISIT_MEMBER_NAME(savedValue,"savedValue");
	HX_VISIT_MEMBER_NAME(currentEventPosition,"currentEventPosition");
	HX_VISIT_MEMBER_NAME(chartEvents,"chartEvents");
	HX_VISIT_MEMBER_NAME(Typeables,"Typeables");
	HX_VISIT_MEMBER_NAME(stepperLength,"stepperLength");
	HX_VISIT_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_VISIT_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_VISIT_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_VISIT_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_VISIT_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_VISIT_MEMBER_NAME(tab_group_note,"tab_group_note");
	HX_VISIT_MEMBER_NAME(updatedSection,"updatedSection");
	HX_VISIT_MEMBER_NAME(writingNotes,"writingNotes");
	HX_VISIT_MEMBER_NAME(doSnapShit,"doSnapShit");
	HX_VISIT_MEMBER_NAME(diff,"diff");
	HX_VISIT_MEMBER_NAME(changeIndex,"changeIndex");
	HX_VISIT_MEMBER_NAME(currentBPM,"currentBPM");
	HX_VISIT_MEMBER_NAME(lastBPM,"lastBPM");
	HX_VISIT_MEMBER_NAME(updateFrame,"updateFrame");
	HX_VISIT_MEMBER_NAME(lastUpdatedSection,"lastUpdatedSection");
	HX_VISIT_MEMBER_NAME(once,"once");
	HX_VISIT_MEMBER_NAME(daSpacing,"daSpacing");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChartingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"snap") ) { return ::hx::Val( snap ); }
		if (HX_FIELD_EQ(inName,"diff") ) { return ::hx::Val( diff ); }
		if (HX_FIELD_EQ(inName,"once") ) { return ::hx::Val( once ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		if (HX_FIELD_EQ(inName,"lines") ) { return ::hx::Val( lines ); }
		if (HX_FIELD_EQ(inName,"claps") ) { return ::hx::Val( claps ); }
		if (HX_FIELD_EQ(inName,"texts") ) { return ::hx::Val( texts ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { return ::hx::Val( bpmTxt ); }
		if (HX_FIELD_EQ(inName,"gridBG") ) { return ::hx::Val( gridBG ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { return ::hx::Val( tempBpm ); }
		if (HX_FIELD_EQ(inName,"player2") ) { return ::hx::Val( player2 ); }
		if (HX_FIELD_EQ(inName,"player1") ) { return ::hx::Val( player1 ); }
		if (HX_FIELD_EQ(inName,"addGrid") ) { return ::hx::Val( addGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastBPM") ) { return ::hx::Val( lastBPM ); }
		if (HX_FIELD_EQ(inName,"addNote") ) { return ::hx::Val( addNote_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deezNuts") ) { return ::hx::Val( deezNuts ); }
		if (HX_FIELD_EQ(inName,"lastNote") ) { return ::hx::Val( lastNote ); }
		if (HX_FIELD_EQ(inName,"snapText") ) { return ::hx::Val( snapText ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNotes") ) { return ::hx::Val( getNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadJson") ) { return ::hx::Val( loadJson_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playClaps") ) { return ::hx::Val( playClaps ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"highlight") ) { return ::hx::Val( highlight ); }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { return ::hx::Val( GRID_SIZE ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"savedType") ) { return ::hx::Val( savedType ); }
		if (HX_FIELD_EQ(inName,"Typeables") ) { return ::hx::Val( Typeables ); }
		if (HX_FIELD_EQ(inName,"addSongUI") ) { return ::hx::Val( addSongUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addNoteUI") ) { return ::hx::Val( addNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSong") ) { return ::hx::Val( clearSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { return ::hx::Val( daSpacing ); }
		if (HX_FIELD_EQ(inName,"loadLevel") ) { return ::hx::Val( loadLevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveLevel") ) { return ::hx::Val( saveLevel_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"UI_options") ) { return ::hx::Val( UI_options ); }
		if (HX_FIELD_EQ(inName,"beatsShown") ) { return ::hx::Val( beatsShown ); }
		if (HX_FIELD_EQ(inName,"zoomFactor") ) { return ::hx::Val( zoomFactor ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { return ::hx::Val( bullshitUI ); }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { return ::hx::Val( dummyArrow ); }
		if (HX_FIELD_EQ(inName,"typingShit") ) { return ::hx::Val( typingShit ); }
		if (HX_FIELD_EQ(inName,"stepperDiv") ) { return ::hx::Val( stepperDiv ); }
		if (HX_FIELD_EQ(inName,"check_snap") ) { return ::hx::Val( check_snap ); }
		if (HX_FIELD_EQ(inName,"savedValue") ) { return ::hx::Val( savedValue ); }
		if (HX_FIELD_EQ(inName,"generateUI") ) { return ::hx::Val( generateUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"doSnapShit") ) { return ::hx::Val( doSnapShit ); }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { return ::hx::Val( currentBPM ); }
		if (HX_FIELD_EQ(inName,"updateGrid") ) { return ::hx::Val( updateGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSection") ) { return ::hx::Val( addSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectNote") ) { return ::hx::Val( selectNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteNote") ) { return ::hx::Val( deleteNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"newSection") ) { return ::hx::Val( newSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"shiftNotes") ) { return ::hx::Val( shiftNotes_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { return ::hx::Val( amountSteps ); }
		if (HX_FIELD_EQ(inName,"defaultSnap") ) { return ::hx::Val( defaultSnap ); }
		if (HX_FIELD_EQ(inName,"chartEvents") ) { return ::hx::Val( chartEvents ); }
		if (HX_FIELD_EQ(inName,"addEventsUI") ) { return ::hx::Val( addEventsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeIndex") ) { return ::hx::Val( changeIndex ); }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { return ::hx::Val( updateFrame ); }
		if (HX_FIELD_EQ(inName,"copySection") ) { return ::hx::Val( copySection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateHeads") ) { return ::hx::Val( updateHeads_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subDivisions") ) { return ::hx::Val( subDivisions ); }
		if (HX_FIELD_EQ(inName,"listOfEvents") ) { return ::hx::Val( listOfEvents ); }
		if (HX_FIELD_EQ(inName,"containsName") ) { return ::hx::Val( containsName_dyn() ); }
		if (HX_FIELD_EQ(inName,"addOptionsUI") ) { return ::hx::Val( addOptionsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSectionUI") ) { return ::hx::Val( addSectionUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"writingNotes") ) { return ::hx::Val( writingNotes ); }
		if (HX_FIELD_EQ(inName,"resetSection") ) { return ::hx::Val( resetSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateNoteUI") ) { return ::hx::Val( updateNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSection") ) { return ::hx::Val( clearSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStrumTime") ) { return ::hx::Val( getStrumTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadAutosave") ) { return ::hx::Val( loadAutosave_dyn() ); }
		if (HX_FIELD_EQ(inName,"autosaveSong") ) { return ::hx::Val( autosaveSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gridBlackLine") ) { return ::hx::Val( gridBlackLine ); }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { return ::hx::Val( stepperLength ); }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { return ::hx::Val( check_altAnim ); }
		if (HX_FIELD_EQ(inName,"stepStartTime") ) { return ::hx::Val( stepStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeSection") ) { return ::hx::Val( changeSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNoteByTime") ) { return ::hx::Val( getNoteByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYfromStrum") ) { return ::hx::Val( getYfromStrum_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tab_group_note") ) { return ::hx::Val( tab_group_note ); }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { return ::hx::Val( updatedSection ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sectionRenderes") ) { return ::hx::Val( sectionRenderes ); }
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { return ::hx::Val( curSelectedNote ); }
		if (HX_FIELD_EQ(inName,"regenerateLines") ) { return ::hx::Val( regenerateLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { return ::hx::Val( check_changeBPM ); }
		if (HX_FIELD_EQ(inName,"updateSectionUI") ) { return ::hx::Val( updateSectionUI_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"writingNotesText") ) { return ::hx::Val( writingNotesText ); }
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { return ::hx::Val( curRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { return ::hx::Val( stepperSusLength ); }
		if (HX_FIELD_EQ(inName,"sectionStartTime") ) { return ::hx::Val( sectionStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"resizeEverything") ) { return ::hx::Val( resizeEverything_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSectionByTime") ) { return ::hx::Val( getSectionByTime_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { return ::hx::Val( stepperSectionBPM ); }
		if (HX_FIELD_EQ(inName,"changeNoteSustain") ) { return ::hx::Val( changeNoteSustain_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastUpdatedSection") ) { return ::hx::Val( lastUpdatedSection ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { return ::hx::Val( curRenderedSustains ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentEventPosition") ) { return ::hx::Val( currentEventPosition ); }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { return ::hx::Val( check_mustHitSection ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"currentSelectedEventName") ) { return ::hx::Val( currentSelectedEventName ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"recalculateAllSectionTimes") ) { return ::hx::Val( recalculateAllSectionTimes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ChartingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_song") ) { outValue = ( _song ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { outValue = ( leftIcon ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightIcon") ) { outValue = ( rightIcon ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { outValue = ( lastSection ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthInSteps") ) { outValue = ( lengthInSteps ); return true; }
		if (HX_FIELD_EQ(inName,"lengthInBeats") ) { outValue = ( lengthInBeats ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"latestChartVersion") ) { outValue = ( latestChartVersion ); return true; }
	}
	return false;
}

::hx::Val ChartingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"snap") ) { snap=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diff") ) { diff=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"once") ) { once=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lines") ) { lines=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"claps") ) { claps=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texts") ) { texts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { bpmTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBG") ) { gridBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { tempBpm=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player2") ) { player2=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player1") ) { player1=inValue.Cast<  ::Boyfriend >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastBPM") ) { lastBPM=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deezNuts") ) { deezNuts=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastNote") ) { lastNote=inValue.Cast<  ::Note >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snapText") ) { snapText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playClaps") ) { playClaps=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlight") ) { highlight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { GRID_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"savedType") ) { savedType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Typeables") ) { Typeables=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { daSpacing=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"UI_options") ) { UI_options=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beatsShown") ) { beatsShown=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomFactor") ) { zoomFactor=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { bullshitUI=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { dummyArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typingShit") ) { typingShit=inValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperDiv") ) { stepperDiv=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_snap") ) { check_snap=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"savedValue") ) { savedValue=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doSnapShit") ) { doSnapShit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { currentBPM=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { amountSteps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultSnap") ) { defaultSnap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chartEvents") ) { chartEvents=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"changeIndex") ) { changeIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { updateFrame=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subDivisions") ) { subDivisions=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listOfEvents") ) { listOfEvents=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"writingNotes") ) { writingNotes=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gridBlackLine") ) { gridBlackLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { stepperLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { check_altAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tab_group_note") ) { tab_group_note=inValue.Cast<  ::flixel::addons::ui::FlxUI >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { updatedSection=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sectionRenderes") ) { sectionRenderes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { curSelectedNote=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { check_changeBPM=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"writingNotesText") ) { writingNotesText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { curRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { stepperSusLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { stepperSectionBPM=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastUpdatedSection") ) { lastUpdatedSection=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { curRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentEventPosition") ) { currentEventPosition=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { check_mustHitSection=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"currentSelectedEventName") ) { currentSelectedEventName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ChartingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_song") ) { _song=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::ChartingState >(); return true; }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { leftIcon=ioValue.Cast<  ::HealthIcon >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightIcon") ) { rightIcon=ioValue.Cast<  ::HealthIcon >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { lastSection=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthInSteps") ) { lengthInSteps=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"lengthInBeats") ) { lengthInBeats=ioValue.Cast< Float >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"latestChartVersion") ) { latestChartVersion=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void ChartingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("playClaps",07,a3,3c,69));
	outFields->push(HX_("snap",4a,56,57,4c));
	outFields->push(HX_("deezNuts",dc,76,82,94));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("UI_options",33,4b,47,19));
	outFields->push(HX_("beatsShown",54,d5,f6,63));
	outFields->push(HX_("zoomFactor",42,c0,4e,b4));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("bpmTxt",d1,bc,26,f4));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("amountSteps",af,2a,91,a5));
	outFields->push(HX_("bullshitUI",67,a9,a3,d3));
	outFields->push(HX_("writingNotesText",12,02,e7,d3));
	outFields->push(HX_("highlight",34,56,00,ed));
	outFields->push(HX_("GRID_SIZE",1a,98,25,c9));
	outFields->push(HX_("subDivisions",06,31,26,2c));
	outFields->push(HX_("defaultSnap",ab,4f,16,1e));
	outFields->push(HX_("dummyArrow",81,8a,75,ae));
	outFields->push(HX_("curRenderedNotes",2c,e1,fb,dc));
	outFields->push(HX_("curRenderedSustains",65,b2,8a,50));
	outFields->push(HX_("gridBG",0b,ce,23,18));
	outFields->push(HX_("sectionRenderes",49,74,65,eb));
	outFields->push(HX_("typingShit",d7,01,ec,6a));
	outFields->push(HX_("curSelectedNote",8d,49,f4,47));
	outFields->push(HX_("tempBpm",2b,d8,ac,46));
	outFields->push(HX_("gridBlackLine",ad,65,ea,f8));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("player2",b1,09,15,8a));
	outFields->push(HX_("player1",b0,09,15,8a));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("lastNote",68,31,53,dc));
	outFields->push(HX_("lines",ff,dd,01,75));
	outFields->push(HX_("claps",9b,75,58,48));
	outFields->push(HX_("snapText",17,3c,34,0d));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("texts",26,4b,99,0d));
	outFields->push(HX_("stepperDiv",c0,b0,21,f4));
	outFields->push(HX_("check_snap",61,04,2b,7c));
	outFields->push(HX_("listOfEvents",0e,f6,f0,91));
	outFields->push(HX_("currentSelectedEventName",31,61,08,a9));
	outFields->push(HX_("savedType",e1,b8,73,c7));
	outFields->push(HX_("savedValue",6a,1b,bb,d4));
	outFields->push(HX_("currentEventPosition",ea,92,90,06));
	outFields->push(HX_("chartEvents",97,5a,ec,fc));
	outFields->push(HX_("Typeables",7f,44,75,ee));
	outFields->push(HX_("stepperLength",d7,b0,3a,4b));
	outFields->push(HX_("check_mustHitSection",12,30,fc,78));
	outFields->push(HX_("check_changeBPM",d8,2d,43,fc));
	outFields->push(HX_("stepperSectionBPM",6b,ba,b7,95));
	outFields->push(HX_("check_altAnim",23,ee,53,2e));
	outFields->push(HX_("stepperSusLength",06,e6,fc,95));
	outFields->push(HX_("tab_group_note",1c,75,04,82));
	outFields->push(HX_("updatedSection",ea,f8,55,de));
	outFields->push(HX_("writingNotes",c5,c2,9a,1c));
	outFields->push(HX_("doSnapShit",d5,55,02,7a));
	outFields->push(HX_("diff",05,5c,69,42));
	outFields->push(HX_("changeIndex",82,43,da,e3));
	outFields->push(HX_("currentBPM",26,68,25,c7));
	outFields->push(HX_("lastBPM",29,ea,9f,d7));
	outFields->push(HX_("updateFrame",64,e1,1b,ec));
	outFields->push(HX_("lastUpdatedSection",e0,c1,dd,e5));
	outFields->push(HX_("once",81,7d,b2,49));
	outFields->push(HX_("daSpacing",86,9d,76,71));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChartingState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(ChartingState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,playClaps),HX_("playClaps",07,a3,3c,69)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,snap),HX_("snap",4a,56,57,4c)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(ChartingState_obj,deezNuts),HX_("deezNuts",dc,76,82,94)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_options),HX_("UI_options",33,4b,47,19)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,beatsShown),HX_("beatsShown",54,d5,f6,63)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,zoomFactor),HX_("zoomFactor",42,c0,4e,b4)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,bpmTxt),HX_("bpmTxt",d1,bc,26,f4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,amountSteps),HX_("amountSteps",af,2a,91,a5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,bullshitUI),HX_("bullshitUI",67,a9,a3,d3)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,writingNotesText),HX_("writingNotesText",12,02,e7,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,highlight),HX_("highlight",34,56,00,ed)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,GRID_SIZE),HX_("GRID_SIZE",1a,98,25,c9)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,subDivisions),HX_("subDivisions",06,31,26,2c)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,defaultSnap),HX_("defaultSnap",ab,4f,16,1e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,dummyArrow),HX_("dummyArrow",81,8a,75,ae)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNotes),HX_("curRenderedNotes",2c,e1,fb,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedSustains),HX_("curRenderedSustains",65,b2,8a,50)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBG),HX_("gridBG",0b,ce,23,18)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,sectionRenderes),HX_("sectionRenderes",49,74,65,eb)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxInputText */ ,(int)offsetof(ChartingState_obj,typingShit),HX_("typingShit",d7,01,ec,6a)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,curSelectedNote),HX_("curSelectedNote",8d,49,f4,47)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,tempBpm),HX_("tempBpm",2b,d8,ac,46)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBlackLine),HX_("gridBlackLine",ad,65,ea,f8)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(ChartingState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(ChartingState_obj,player2),HX_("player2",b1,09,15,8a)},
	{::hx::fsObject /*  ::Boyfriend */ ,(int)offsetof(ChartingState_obj,player1),HX_("player1",b0,09,15,8a)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::Note */ ,(int)offsetof(ChartingState_obj,lastNote),HX_("lastNote",68,31,53,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,lines),HX_("lines",ff,dd,01,75)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,claps),HX_("claps",9b,75,58,48)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,snapText),HX_("snapText",17,3c,34,0d)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(ChartingState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,texts),HX_("texts",26,4b,99,0d)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperDiv),HX_("stepperDiv",c0,b0,21,f4)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_snap),HX_("check_snap",61,04,2b,7c)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,listOfEvents),HX_("listOfEvents",0e,f6,f0,91)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,currentSelectedEventName),HX_("currentSelectedEventName",31,61,08,a9)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,savedType),HX_("savedType",e1,b8,73,c7)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,savedValue),HX_("savedValue",6a,1b,bb,d4)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,currentEventPosition),HX_("currentEventPosition",ea,92,90,06)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,chartEvents),HX_("chartEvents",97,5a,ec,fc)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,Typeables),HX_("Typeables",7f,44,75,ee)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperLength),HX_("stepperLength",d7,b0,3a,4b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mustHitSection),HX_("check_mustHitSection",12,30,fc,78)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_changeBPM),HX_("check_changeBPM",d8,2d,43,fc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSectionBPM),HX_("stepperSectionBPM",6b,ba,b7,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_altAnim),HX_("check_altAnim",23,ee,53,2e)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSusLength),HX_("stepperSusLength",06,e6,fc,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUI */ ,(int)offsetof(ChartingState_obj,tab_group_note),HX_("tab_group_note",1c,75,04,82)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,updatedSection),HX_("updatedSection",ea,f8,55,de)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,writingNotes),HX_("writingNotes",c5,c2,9a,1c)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,doSnapShit),HX_("doSnapShit",d5,55,02,7a)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,diff),HX_("diff",05,5c,69,42)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,changeIndex),HX_("changeIndex",82,43,da,e3)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,currentBPM),HX_("currentBPM",26,68,25,c7)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,lastBPM),HX_("lastBPM",29,ea,9f,d7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,updateFrame),HX_("updateFrame",64,e1,1b,ec)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,lastUpdatedSection),HX_("lastUpdatedSection",e0,c1,dd,e5)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,once),HX_("once",81,7d,b2,49)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,daSpacing),HX_("daSpacing",86,9d,76,71)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ChartingState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::ChartingState */ ,(void *) &ChartingState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsFloat,(void *) &ChartingState_obj::lengthInSteps,HX_("lengthInSteps",3c,ed,41,db)},
	{::hx::fsFloat,(void *) &ChartingState_obj::lengthInBeats,HX_("lengthInBeats",d2,d7,84,07)},
	{::hx::fsInt,(void *) &ChartingState_obj::lastSection,HX_("lastSection",2f,ba,83,12)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &ChartingState_obj::_song,HX_("_song",b4,3f,69,ff)},
	{::hx::fsObject /*  ::HealthIcon */ ,(void *) &ChartingState_obj::leftIcon,HX_("leftIcon",20,2b,ae,4c)},
	{::hx::fsObject /*  ::HealthIcon */ ,(void *) &ChartingState_obj::rightIcon,HX_("rightIcon",75,3d,79,b0)},
	{::hx::fsString,(void *) &ChartingState_obj::latestChartVersion,HX_("latestChartVersion",c1,89,05,09)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ChartingState_obj_sMemberFields[] = {
	HX_("_file",5b,ea,cc,f6),
	HX_("playClaps",07,a3,3c,69),
	HX_("snap",4a,56,57,4c),
	HX_("deezNuts",dc,76,82,94),
	HX_("UI_box",60,07,ac,43),
	HX_("UI_options",33,4b,47,19),
	HX_("beatsShown",54,d5,f6,63),
	HX_("zoomFactor",42,c0,4e,b4),
	HX_("curSection",45,58,c1,68),
	HX_("bpmTxt",d1,bc,26,f4),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSong",75,95,6d,b7),
	HX_("amountSteps",af,2a,91,a5),
	HX_("bullshitUI",67,a9,a3,d3),
	HX_("writingNotesText",12,02,e7,d3),
	HX_("highlight",34,56,00,ed),
	HX_("GRID_SIZE",1a,98,25,c9),
	HX_("subDivisions",06,31,26,2c),
	HX_("defaultSnap",ab,4f,16,1e),
	HX_("dummyArrow",81,8a,75,ae),
	HX_("curRenderedNotes",2c,e1,fb,dc),
	HX_("curRenderedSustains",65,b2,8a,50),
	HX_("gridBG",0b,ce,23,18),
	HX_("sectionRenderes",49,74,65,eb),
	HX_("typingShit",d7,01,ec,6a),
	HX_("curSelectedNote",8d,49,f4,47),
	HX_("tempBpm",2b,d8,ac,46),
	HX_("gridBlackLine",ad,65,ea,f8),
	HX_("vocals",5e,10,51,59),
	HX_("player2",b1,09,15,8a),
	HX_("player1",b0,09,15,8a),
	HX_("height",e7,07,4c,02),
	HX_("lastNote",68,31,53,dc),
	HX_("lines",ff,dd,01,75),
	HX_("claps",9b,75,58,48),
	HX_("snapText",17,3c,34,0d),
	HX_("camFollow",e0,6e,47,22),
	HX_("create",fc,66,0f,7c),
	HX_("texts",26,4b,99,0d),
	HX_("regenerateLines",f7,b6,ed,41),
	HX_("addGrid",87,19,a9,80),
	HX_("stepperDiv",c0,b0,21,f4),
	HX_("check_snap",61,04,2b,7c),
	HX_("listOfEvents",0e,f6,f0,91),
	HX_("currentSelectedEventName",31,61,08,a9),
	HX_("savedType",e1,b8,73,c7),
	HX_("savedValue",6a,1b,bb,d4),
	HX_("currentEventPosition",ea,92,90,06),
	HX_("containsName",0a,f4,74,a3),
	HX_("chartEvents",97,5a,ec,fc),
	HX_("Typeables",7f,44,75,ee),
	HX_("addEventsUI",ee,88,4b,f2),
	HX_("addOptionsUI",d1,b2,cc,81),
	HX_("addSongUI",6a,02,ad,e5),
	HX_("stepperLength",d7,b0,3a,4b),
	HX_("check_mustHitSection",12,30,fc,78),
	HX_("check_changeBPM",d8,2d,43,fc),
	HX_("stepperSectionBPM",6b,ba,b7,95),
	HX_("check_altAnim",23,ee,53,2e),
	HX_("addSectionUI",18,75,a5,87),
	HX_("stepperSusLength",06,e6,fc,95),
	HX_("tab_group_note",1c,75,04,82),
	HX_("addNoteUI",c7,f7,d9,e9),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("generateUI",c9,a0,60,4e),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("updatedSection",ea,f8,55,de),
	HX_("stepStartTime",a3,f4,4d,c0),
	HX_("sectionStartTime",ea,ba,df,45),
	HX_("writingNotes",c5,c2,9a,1c),
	HX_("doSnapShit",d5,55,02,7a),
	HX_("diff",05,5c,69,42),
	HX_("changeIndex",82,43,da,e3),
	HX_("currentBPM",26,68,25,c7),
	HX_("lastBPM",29,ea,9f,d7),
	HX_("updateFrame",64,e1,1b,ec),
	HX_("lastUpdatedSection",e0,c1,dd,e5),
	HX_("resizeEverything",87,a1,09,4d),
	HX_("update",09,86,05,87),
	HX_("changeNoteSustain",41,6b,40,3c),
	HX_("resetSection",d6,4b,b6,cf),
	HX_("changeSection",55,aa,ac,be),
	HX_("copySection",b0,82,ec,b3),
	HX_("updateSectionUI",30,24,dc,d7),
	HX_("updateHeads",8a,3c,51,0a),
	HX_("updateNoteUI",af,69,79,31),
	HX_("updateGrid",6f,c1,20,fd),
	HX_("addSection",c4,31,62,c5),
	HX_("selectNote",0e,8d,a5,b7),
	HX_("deleteNote",bd,f5,56,9c),
	HX_("clearSection",d8,b7,56,39),
	HX_("clearSong",02,0c,19,c0),
	HX_("newSection",65,29,da,9a),
	HX_("recalculateAllSectionTimes",4f,b8,31,bc),
	HX_("once",81,7d,b2,49),
	HX_("shiftNotes",5f,c8,22,af),
	HX_("getSectionByTime",d3,a2,dd,1e),
	HX_("getNoteByTime",4c,ef,d1,0c),
	HX_("addNote",b3,5a,47,85),
	HX_("getStrumTime",80,ca,77,03),
	HX_("getYfromStrum",1c,4c,46,78),
	HX_("daSpacing",86,9d,76,71),
	HX_("loadLevel",7e,61,9a,8d),
	HX_("getNotes",cb,eb,a1,ff),
	HX_("loadJson",6e,13,08,b7),
	HX_("loadAutosave",72,3a,03,fe),
	HX_("autosaveSong",21,24,ac,67),
	HX_("saveLevel",07,1d,10,01),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	::String(null()) };

static void ChartingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChartingState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lengthInSteps,"lengthInSteps");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lengthInBeats,"lengthInBeats");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_MARK_MEMBER_NAME(ChartingState_obj::_song,"_song");
	HX_MARK_MEMBER_NAME(ChartingState_obj::leftIcon,"leftIcon");
	HX_MARK_MEMBER_NAME(ChartingState_obj::rightIcon,"rightIcon");
	HX_MARK_MEMBER_NAME(ChartingState_obj::latestChartVersion,"latestChartVersion");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChartingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChartingState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lengthInSteps,"lengthInSteps");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lengthInBeats,"lengthInBeats");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::_song,"_song");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::leftIcon,"leftIcon");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::rightIcon,"rightIcon");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::latestChartVersion,"latestChartVersion");
};

#endif

::hx::Class ChartingState_obj::__mClass;

static ::String ChartingState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("lengthInSteps",3c,ed,41,db),
	HX_("lengthInBeats",d2,d7,84,07),
	HX_("lastSection",2f,ba,83,12),
	HX_("_song",b4,3f,69,ff),
	HX_("leftIcon",20,2b,ae,4c),
	HX_("rightIcon",75,3d,79,b0),
	HX_("latestChartVersion",c1,89,05,09),
	::String(null())
};

void ChartingState_obj::__register()
{
	ChartingState_obj _hx_dummy;
	ChartingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ChartingState",8d,e0,dd,9b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ChartingState_obj::__GetStatic;
	__mClass->mSetStaticField = &ChartingState_obj::__SetStatic;
	__mClass->mMarkFunc = ChartingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ChartingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChartingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChartingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChartingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChartingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChartingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ChartingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_65_boot)
HXDLIN(  65)		lengthInSteps = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_66_boot)
HXDLIN(  66)		lengthInBeats = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_77_boot)
HXDLIN(  77)		lastSection = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_134_boot)
HXDLIN( 134)		latestChartVersion = HX_("2",32,00,00,00);
            	}
}

